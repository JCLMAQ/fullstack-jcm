
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `OrgDomain` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model OrgDomain
 * 
 */
export type OrgDomainModel = runtime.Types.Result.DefaultSelection<Prisma.$OrgDomainPayload>

export type AggregateOrgDomain = {
  _count: OrgDomainCountAggregateOutputType | null
  _avg: OrgDomainAvgAggregateOutputType | null
  _sum: OrgDomainSumAggregateOutputType | null
  _min: OrgDomainMinAggregateOutputType | null
  _max: OrgDomainMaxAggregateOutputType | null
}

export type OrgDomainAvgAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type OrgDomainSumAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type OrgDomainMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  domainName: string | null
  extension: string | null
  orgId: string | null
}

export type OrgDomainMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  domainName: string | null
  extension: string | null
  orgId: string | null
}

export type OrgDomainCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  published: number
  isPublic: number
  isDeleted: number
  isDeletedDT: number
  domainName: number
  extension: number
  orgId: number
  _all: number
}


export type OrgDomainAvgAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type OrgDomainSumAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type OrgDomainMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  domainName?: true
  extension?: true
  orgId?: true
}

export type OrgDomainMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  domainName?: true
  extension?: true
  orgId?: true
}

export type OrgDomainCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  domainName?: true
  extension?: true
  orgId?: true
  _all?: true
}

export type OrgDomainAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrgDomain to aggregate.
   */
  where?: Prisma.OrgDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgDomains to fetch.
   */
  orderBy?: Prisma.OrgDomainOrderByWithRelationInput | Prisma.OrgDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrgDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OrgDomains
  **/
  _count?: true | OrgDomainCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OrgDomainAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OrgDomainSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrgDomainMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrgDomainMaxAggregateInputType
}

export type GetOrgDomainAggregateType<T extends OrgDomainAggregateArgs> = {
      [P in keyof T & keyof AggregateOrgDomain]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrgDomain[P]>
    : Prisma.GetScalarType<T[P], AggregateOrgDomain[P]>
}




export type OrgDomainGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrgDomainWhereInput
  orderBy?: Prisma.OrgDomainOrderByWithAggregationInput | Prisma.OrgDomainOrderByWithAggregationInput[]
  by: Prisma.OrgDomainScalarFieldEnum[] | Prisma.OrgDomainScalarFieldEnum
  having?: Prisma.OrgDomainScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrgDomainCountAggregateInputType | true
  _avg?: OrgDomainAvgAggregateInputType
  _sum?: OrgDomainSumAggregateInputType
  _min?: OrgDomainMinAggregateInputType
  _max?: OrgDomainMaxAggregateInputType
}

export type OrgDomainGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  published: boolean
  isPublic: boolean
  isDeleted: number
  isDeletedDT: Date | null
  domainName: string
  extension: string
  orgId: string
  _count: OrgDomainCountAggregateOutputType | null
  _avg: OrgDomainAvgAggregateOutputType | null
  _sum: OrgDomainSumAggregateOutputType | null
  _min: OrgDomainMinAggregateOutputType | null
  _max: OrgDomainMaxAggregateOutputType | null
}

type GetOrgDomainGroupByPayload<T extends OrgDomainGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrgDomainGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrgDomainGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrgDomainGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrgDomainGroupByOutputType[P]>
      }
    >
  >



export type OrgDomainWhereInput = {
  AND?: Prisma.OrgDomainWhereInput | Prisma.OrgDomainWhereInput[]
  OR?: Prisma.OrgDomainWhereInput[]
  NOT?: Prisma.OrgDomainWhereInput | Prisma.OrgDomainWhereInput[]
  id?: Prisma.IntFilter<"OrgDomain"> | number
  createdAt?: Prisma.DateTimeFilter<"OrgDomain"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgDomain"> | Date | string
  published?: Prisma.BoolFilter<"OrgDomain"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgDomain"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgDomain"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgDomain"> | Date | string | null
  domainName?: Prisma.StringFilter<"OrgDomain"> | string
  extension?: Prisma.StringFilter<"OrgDomain"> | string
  orgId?: Prisma.StringFilter<"OrgDomain"> | string
  org?: Prisma.XOR<Prisma.OrganizationNullableScalarRelationFilter, Prisma.OrganizationWhereInput> | null
}

export type OrgDomainOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  domainName?: Prisma.SortOrder
  extension?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  org?: Prisma.OrganizationOrderByWithRelationInput
}

export type OrgDomainWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.OrgDomainWhereInput | Prisma.OrgDomainWhereInput[]
  OR?: Prisma.OrgDomainWhereInput[]
  NOT?: Prisma.OrgDomainWhereInput | Prisma.OrgDomainWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"OrgDomain"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgDomain"> | Date | string
  published?: Prisma.BoolFilter<"OrgDomain"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgDomain"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgDomain"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgDomain"> | Date | string | null
  domainName?: Prisma.StringFilter<"OrgDomain"> | string
  extension?: Prisma.StringFilter<"OrgDomain"> | string
  orgId?: Prisma.StringFilter<"OrgDomain"> | string
  org?: Prisma.XOR<Prisma.OrganizationNullableScalarRelationFilter, Prisma.OrganizationWhereInput> | null
}, "id">

export type OrgDomainOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  domainName?: Prisma.SortOrder
  extension?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  _count?: Prisma.OrgDomainCountOrderByAggregateInput
  _avg?: Prisma.OrgDomainAvgOrderByAggregateInput
  _max?: Prisma.OrgDomainMaxOrderByAggregateInput
  _min?: Prisma.OrgDomainMinOrderByAggregateInput
  _sum?: Prisma.OrgDomainSumOrderByAggregateInput
}

export type OrgDomainScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrgDomainScalarWhereWithAggregatesInput | Prisma.OrgDomainScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrgDomainScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrgDomainScalarWhereWithAggregatesInput | Prisma.OrgDomainScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"OrgDomain"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"OrgDomain"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"OrgDomain"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"OrgDomain"> | boolean
  isPublic?: Prisma.BoolWithAggregatesFilter<"OrgDomain"> | boolean
  isDeleted?: Prisma.IntWithAggregatesFilter<"OrgDomain"> | number
  isDeletedDT?: Prisma.DateTimeNullableWithAggregatesFilter<"OrgDomain"> | Date | string | null
  domainName?: Prisma.StringWithAggregatesFilter<"OrgDomain"> | string
  extension?: Prisma.StringWithAggregatesFilter<"OrgDomain"> | string
  orgId?: Prisma.StringWithAggregatesFilter<"OrgDomain"> | string
}

export type OrgDomainCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domainName: string
  extension: string
  org?: Prisma.OrganizationCreateNestedOneWithoutOrgDomainsInput
}

export type OrgDomainUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domainName: string
  extension: string
  orgId: string
}

export type OrgDomainUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domainName?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.StringFieldUpdateOperationsInput | string
  org?: Prisma.OrganizationUpdateOneWithoutOrgDomainsNestedInput
}

export type OrgDomainUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domainName?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrgDomainCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domainName: string
  extension: string
  orgId: string
}

export type OrgDomainUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domainName?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrgDomainUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domainName?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrgDomainListRelationFilter = {
  every?: Prisma.OrgDomainWhereInput
  some?: Prisma.OrgDomainWhereInput
  none?: Prisma.OrgDomainWhereInput
}

export type OrgDomainOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OrgDomainCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  domainName?: Prisma.SortOrder
  extension?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
}

export type OrgDomainAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type OrgDomainMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  domainName?: Prisma.SortOrder
  extension?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
}

export type OrgDomainMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  domainName?: Prisma.SortOrder
  extension?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
}

export type OrgDomainSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type OrgDomainCreateNestedManyWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.OrgDomainCreateWithoutOrgInput, Prisma.OrgDomainUncheckedCreateWithoutOrgInput> | Prisma.OrgDomainCreateWithoutOrgInput[] | Prisma.OrgDomainUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.OrgDomainCreateOrConnectWithoutOrgInput | Prisma.OrgDomainCreateOrConnectWithoutOrgInput[]
  createMany?: Prisma.OrgDomainCreateManyOrgInputEnvelope
  connect?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
}

export type OrgDomainUncheckedCreateNestedManyWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.OrgDomainCreateWithoutOrgInput, Prisma.OrgDomainUncheckedCreateWithoutOrgInput> | Prisma.OrgDomainCreateWithoutOrgInput[] | Prisma.OrgDomainUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.OrgDomainCreateOrConnectWithoutOrgInput | Prisma.OrgDomainCreateOrConnectWithoutOrgInput[]
  createMany?: Prisma.OrgDomainCreateManyOrgInputEnvelope
  connect?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
}

export type OrgDomainUpdateManyWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.OrgDomainCreateWithoutOrgInput, Prisma.OrgDomainUncheckedCreateWithoutOrgInput> | Prisma.OrgDomainCreateWithoutOrgInput[] | Prisma.OrgDomainUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.OrgDomainCreateOrConnectWithoutOrgInput | Prisma.OrgDomainCreateOrConnectWithoutOrgInput[]
  upsert?: Prisma.OrgDomainUpsertWithWhereUniqueWithoutOrgInput | Prisma.OrgDomainUpsertWithWhereUniqueWithoutOrgInput[]
  createMany?: Prisma.OrgDomainCreateManyOrgInputEnvelope
  set?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
  disconnect?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
  delete?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
  connect?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
  update?: Prisma.OrgDomainUpdateWithWhereUniqueWithoutOrgInput | Prisma.OrgDomainUpdateWithWhereUniqueWithoutOrgInput[]
  updateMany?: Prisma.OrgDomainUpdateManyWithWhereWithoutOrgInput | Prisma.OrgDomainUpdateManyWithWhereWithoutOrgInput[]
  deleteMany?: Prisma.OrgDomainScalarWhereInput | Prisma.OrgDomainScalarWhereInput[]
}

export type OrgDomainUncheckedUpdateManyWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.OrgDomainCreateWithoutOrgInput, Prisma.OrgDomainUncheckedCreateWithoutOrgInput> | Prisma.OrgDomainCreateWithoutOrgInput[] | Prisma.OrgDomainUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.OrgDomainCreateOrConnectWithoutOrgInput | Prisma.OrgDomainCreateOrConnectWithoutOrgInput[]
  upsert?: Prisma.OrgDomainUpsertWithWhereUniqueWithoutOrgInput | Prisma.OrgDomainUpsertWithWhereUniqueWithoutOrgInput[]
  createMany?: Prisma.OrgDomainCreateManyOrgInputEnvelope
  set?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
  disconnect?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
  delete?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
  connect?: Prisma.OrgDomainWhereUniqueInput | Prisma.OrgDomainWhereUniqueInput[]
  update?: Prisma.OrgDomainUpdateWithWhereUniqueWithoutOrgInput | Prisma.OrgDomainUpdateWithWhereUniqueWithoutOrgInput[]
  updateMany?: Prisma.OrgDomainUpdateManyWithWhereWithoutOrgInput | Prisma.OrgDomainUpdateManyWithWhereWithoutOrgInput[]
  deleteMany?: Prisma.OrgDomainScalarWhereInput | Prisma.OrgDomainScalarWhereInput[]
}

export type OrgDomainCreateWithoutOrgInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domainName: string
  extension: string
}

export type OrgDomainUncheckedCreateWithoutOrgInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domainName: string
  extension: string
}

export type OrgDomainCreateOrConnectWithoutOrgInput = {
  where: Prisma.OrgDomainWhereUniqueInput
  create: Prisma.XOR<Prisma.OrgDomainCreateWithoutOrgInput, Prisma.OrgDomainUncheckedCreateWithoutOrgInput>
}

export type OrgDomainCreateManyOrgInputEnvelope = {
  data: Prisma.OrgDomainCreateManyOrgInput | Prisma.OrgDomainCreateManyOrgInput[]
  skipDuplicates?: boolean
}

export type OrgDomainUpsertWithWhereUniqueWithoutOrgInput = {
  where: Prisma.OrgDomainWhereUniqueInput
  update: Prisma.XOR<Prisma.OrgDomainUpdateWithoutOrgInput, Prisma.OrgDomainUncheckedUpdateWithoutOrgInput>
  create: Prisma.XOR<Prisma.OrgDomainCreateWithoutOrgInput, Prisma.OrgDomainUncheckedCreateWithoutOrgInput>
}

export type OrgDomainUpdateWithWhereUniqueWithoutOrgInput = {
  where: Prisma.OrgDomainWhereUniqueInput
  data: Prisma.XOR<Prisma.OrgDomainUpdateWithoutOrgInput, Prisma.OrgDomainUncheckedUpdateWithoutOrgInput>
}

export type OrgDomainUpdateManyWithWhereWithoutOrgInput = {
  where: Prisma.OrgDomainScalarWhereInput
  data: Prisma.XOR<Prisma.OrgDomainUpdateManyMutationInput, Prisma.OrgDomainUncheckedUpdateManyWithoutOrgInput>
}

export type OrgDomainScalarWhereInput = {
  AND?: Prisma.OrgDomainScalarWhereInput | Prisma.OrgDomainScalarWhereInput[]
  OR?: Prisma.OrgDomainScalarWhereInput[]
  NOT?: Prisma.OrgDomainScalarWhereInput | Prisma.OrgDomainScalarWhereInput[]
  id?: Prisma.IntFilter<"OrgDomain"> | number
  createdAt?: Prisma.DateTimeFilter<"OrgDomain"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgDomain"> | Date | string
  published?: Prisma.BoolFilter<"OrgDomain"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgDomain"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgDomain"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgDomain"> | Date | string | null
  domainName?: Prisma.StringFilter<"OrgDomain"> | string
  extension?: Prisma.StringFilter<"OrgDomain"> | string
  orgId?: Prisma.StringFilter<"OrgDomain"> | string
}

export type OrgDomainCreateManyOrgInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domainName: string
  extension: string
}

export type OrgDomainUpdateWithoutOrgInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domainName?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrgDomainUncheckedUpdateWithoutOrgInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domainName?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrgDomainUncheckedUpdateManyWithoutOrgInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domainName?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.StringFieldUpdateOperationsInput | string
}



export type OrgDomainSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  domainName?: boolean
  extension?: boolean
  orgId?: boolean
  org?: boolean | Prisma.OrgDomain$orgArgs<ExtArgs>
}, ExtArgs["result"]["orgDomain"]>

export type OrgDomainSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  domainName?: boolean
  extension?: boolean
  orgId?: boolean
  org?: boolean | Prisma.OrgDomain$orgArgs<ExtArgs>
}, ExtArgs["result"]["orgDomain"]>

export type OrgDomainSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  domainName?: boolean
  extension?: boolean
  orgId?: boolean
  org?: boolean | Prisma.OrgDomain$orgArgs<ExtArgs>
}, ExtArgs["result"]["orgDomain"]>

export type OrgDomainSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  domainName?: boolean
  extension?: boolean
  orgId?: boolean
}

export type OrgDomainOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "published" | "isPublic" | "isDeleted" | "isDeletedDT" | "domainName" | "extension" | "orgId", ExtArgs["result"]["orgDomain"]>
export type OrgDomainInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgDomain$orgArgs<ExtArgs>
}
export type OrgDomainIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgDomain$orgArgs<ExtArgs>
}
export type OrgDomainIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgDomain$orgArgs<ExtArgs>
}

export type $OrgDomainPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OrgDomain"
  objects: {
    org: Prisma.$OrganizationPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    published: boolean
    isPublic: boolean
    isDeleted: number
    isDeletedDT: Date | null
    domainName: string
    extension: string
    orgId: string
  }, ExtArgs["result"]["orgDomain"]>
  composites: {}
}

export type OrgDomainGetPayload<S extends boolean | null | undefined | OrgDomainDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload, S>

export type OrgDomainCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrgDomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrgDomainCountAggregateInputType | true
  }

export interface OrgDomainDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrgDomain'], meta: { name: 'OrgDomain' } }
  /**
   * Find zero or one OrgDomain that matches the filter.
   * @param {OrgDomainFindUniqueArgs} args - Arguments to find a OrgDomain
   * @example
   * // Get one OrgDomain
   * const orgDomain = await prisma.orgDomain.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrgDomainFindUniqueArgs>(args: Prisma.SelectSubset<T, OrgDomainFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrgDomainClient<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OrgDomain that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrgDomainFindUniqueOrThrowArgs} args - Arguments to find a OrgDomain
   * @example
   * // Get one OrgDomain
   * const orgDomain = await prisma.orgDomain.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrgDomainFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrgDomainFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrgDomainClient<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrgDomain that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgDomainFindFirstArgs} args - Arguments to find a OrgDomain
   * @example
   * // Get one OrgDomain
   * const orgDomain = await prisma.orgDomain.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrgDomainFindFirstArgs>(args?: Prisma.SelectSubset<T, OrgDomainFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrgDomainClient<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrgDomain that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgDomainFindFirstOrThrowArgs} args - Arguments to find a OrgDomain
   * @example
   * // Get one OrgDomain
   * const orgDomain = await prisma.orgDomain.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrgDomainFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrgDomainFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrgDomainClient<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrgDomains that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgDomainFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrgDomains
   * const orgDomains = await prisma.orgDomain.findMany()
   * 
   * // Get first 10 OrgDomains
   * const orgDomains = await prisma.orgDomain.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const orgDomainWithIdOnly = await prisma.orgDomain.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrgDomainFindManyArgs>(args?: Prisma.SelectSubset<T, OrgDomainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OrgDomain.
   * @param {OrgDomainCreateArgs} args - Arguments to create a OrgDomain.
   * @example
   * // Create one OrgDomain
   * const OrgDomain = await prisma.orgDomain.create({
   *   data: {
   *     // ... data to create a OrgDomain
   *   }
   * })
   * 
   */
  create<T extends OrgDomainCreateArgs>(args: Prisma.SelectSubset<T, OrgDomainCreateArgs<ExtArgs>>): Prisma.Prisma__OrgDomainClient<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OrgDomains.
   * @param {OrgDomainCreateManyArgs} args - Arguments to create many OrgDomains.
   * @example
   * // Create many OrgDomains
   * const orgDomain = await prisma.orgDomain.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrgDomainCreateManyArgs>(args?: Prisma.SelectSubset<T, OrgDomainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OrgDomains and returns the data saved in the database.
   * @param {OrgDomainCreateManyAndReturnArgs} args - Arguments to create many OrgDomains.
   * @example
   * // Create many OrgDomains
   * const orgDomain = await prisma.orgDomain.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OrgDomains and only return the `id`
   * const orgDomainWithIdOnly = await prisma.orgDomain.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrgDomainCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrgDomainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OrgDomain.
   * @param {OrgDomainDeleteArgs} args - Arguments to delete one OrgDomain.
   * @example
   * // Delete one OrgDomain
   * const OrgDomain = await prisma.orgDomain.delete({
   *   where: {
   *     // ... filter to delete one OrgDomain
   *   }
   * })
   * 
   */
  delete<T extends OrgDomainDeleteArgs>(args: Prisma.SelectSubset<T, OrgDomainDeleteArgs<ExtArgs>>): Prisma.Prisma__OrgDomainClient<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OrgDomain.
   * @param {OrgDomainUpdateArgs} args - Arguments to update one OrgDomain.
   * @example
   * // Update one OrgDomain
   * const orgDomain = await prisma.orgDomain.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrgDomainUpdateArgs>(args: Prisma.SelectSubset<T, OrgDomainUpdateArgs<ExtArgs>>): Prisma.Prisma__OrgDomainClient<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OrgDomains.
   * @param {OrgDomainDeleteManyArgs} args - Arguments to filter OrgDomains to delete.
   * @example
   * // Delete a few OrgDomains
   * const { count } = await prisma.orgDomain.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrgDomainDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrgDomainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrgDomains.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgDomainUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrgDomains
   * const orgDomain = await prisma.orgDomain.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrgDomainUpdateManyArgs>(args: Prisma.SelectSubset<T, OrgDomainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrgDomains and returns the data updated in the database.
   * @param {OrgDomainUpdateManyAndReturnArgs} args - Arguments to update many OrgDomains.
   * @example
   * // Update many OrgDomains
   * const orgDomain = await prisma.orgDomain.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OrgDomains and only return the `id`
   * const orgDomainWithIdOnly = await prisma.orgDomain.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrgDomainUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrgDomainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OrgDomain.
   * @param {OrgDomainUpsertArgs} args - Arguments to update or create a OrgDomain.
   * @example
   * // Update or create a OrgDomain
   * const orgDomain = await prisma.orgDomain.upsert({
   *   create: {
   *     // ... data to create a OrgDomain
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrgDomain we want to update
   *   }
   * })
   */
  upsert<T extends OrgDomainUpsertArgs>(args: Prisma.SelectSubset<T, OrgDomainUpsertArgs<ExtArgs>>): Prisma.Prisma__OrgDomainClient<runtime.Types.Result.GetResult<Prisma.$OrgDomainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OrgDomains.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgDomainCountArgs} args - Arguments to filter OrgDomains to count.
   * @example
   * // Count the number of OrgDomains
   * const count = await prisma.orgDomain.count({
   *   where: {
   *     // ... the filter for the OrgDomains we want to count
   *   }
   * })
  **/
  count<T extends OrgDomainCountArgs>(
    args?: Prisma.Subset<T, OrgDomainCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrgDomainCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OrgDomain.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgDomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrgDomainAggregateArgs>(args: Prisma.Subset<T, OrgDomainAggregateArgs>): Prisma.PrismaPromise<GetOrgDomainAggregateType<T>>

  /**
   * Group by OrgDomain.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgDomainGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrgDomainGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrgDomainGroupByArgs['orderBy'] }
      : { orderBy?: OrgDomainGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrgDomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrgDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OrgDomain model
 */
readonly fields: OrgDomainFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrgDomain.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrgDomainClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  org<T extends Prisma.OrgDomain$orgArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrgDomain$orgArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OrgDomain model
 */
export interface OrgDomainFieldRefs {
  readonly id: Prisma.FieldRef<"OrgDomain", 'Int'>
  readonly createdAt: Prisma.FieldRef<"OrgDomain", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"OrgDomain", 'DateTime'>
  readonly published: Prisma.FieldRef<"OrgDomain", 'Boolean'>
  readonly isPublic: Prisma.FieldRef<"OrgDomain", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"OrgDomain", 'Int'>
  readonly isDeletedDT: Prisma.FieldRef<"OrgDomain", 'DateTime'>
  readonly domainName: Prisma.FieldRef<"OrgDomain", 'String'>
  readonly extension: Prisma.FieldRef<"OrgDomain", 'String'>
  readonly orgId: Prisma.FieldRef<"OrgDomain", 'String'>
}
    

// Custom InputTypes
/**
 * OrgDomain findUnique
 */
export type OrgDomainFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * Filter, which OrgDomain to fetch.
   */
  where: Prisma.OrgDomainWhereUniqueInput
}

/**
 * OrgDomain findUniqueOrThrow
 */
export type OrgDomainFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * Filter, which OrgDomain to fetch.
   */
  where: Prisma.OrgDomainWhereUniqueInput
}

/**
 * OrgDomain findFirst
 */
export type OrgDomainFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * Filter, which OrgDomain to fetch.
   */
  where?: Prisma.OrgDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgDomains to fetch.
   */
  orderBy?: Prisma.OrgDomainOrderByWithRelationInput | Prisma.OrgDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrgDomains.
   */
  cursor?: Prisma.OrgDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrgDomains.
   */
  distinct?: Prisma.OrgDomainScalarFieldEnum | Prisma.OrgDomainScalarFieldEnum[]
}

/**
 * OrgDomain findFirstOrThrow
 */
export type OrgDomainFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * Filter, which OrgDomain to fetch.
   */
  where?: Prisma.OrgDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgDomains to fetch.
   */
  orderBy?: Prisma.OrgDomainOrderByWithRelationInput | Prisma.OrgDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrgDomains.
   */
  cursor?: Prisma.OrgDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrgDomains.
   */
  distinct?: Prisma.OrgDomainScalarFieldEnum | Prisma.OrgDomainScalarFieldEnum[]
}

/**
 * OrgDomain findMany
 */
export type OrgDomainFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * Filter, which OrgDomains to fetch.
   */
  where?: Prisma.OrgDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgDomains to fetch.
   */
  orderBy?: Prisma.OrgDomainOrderByWithRelationInput | Prisma.OrgDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OrgDomains.
   */
  cursor?: Prisma.OrgDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgDomains.
   */
  skip?: number
  distinct?: Prisma.OrgDomainScalarFieldEnum | Prisma.OrgDomainScalarFieldEnum[]
}

/**
 * OrgDomain create
 */
export type OrgDomainCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * The data needed to create a OrgDomain.
   */
  data: Prisma.XOR<Prisma.OrgDomainCreateInput, Prisma.OrgDomainUncheckedCreateInput>
}

/**
 * OrgDomain createMany
 */
export type OrgDomainCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OrgDomains.
   */
  data: Prisma.OrgDomainCreateManyInput | Prisma.OrgDomainCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * OrgDomain createManyAndReturn
 */
export type OrgDomainCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * The data used to create many OrgDomains.
   */
  data: Prisma.OrgDomainCreateManyInput | Prisma.OrgDomainCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OrgDomain update
 */
export type OrgDomainUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * The data needed to update a OrgDomain.
   */
  data: Prisma.XOR<Prisma.OrgDomainUpdateInput, Prisma.OrgDomainUncheckedUpdateInput>
  /**
   * Choose, which OrgDomain to update.
   */
  where: Prisma.OrgDomainWhereUniqueInput
}

/**
 * OrgDomain updateMany
 */
export type OrgDomainUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OrgDomains.
   */
  data: Prisma.XOR<Prisma.OrgDomainUpdateManyMutationInput, Prisma.OrgDomainUncheckedUpdateManyInput>
  /**
   * Filter which OrgDomains to update
   */
  where?: Prisma.OrgDomainWhereInput
  /**
   * Limit how many OrgDomains to update.
   */
  limit?: number
}

/**
 * OrgDomain updateManyAndReturn
 */
export type OrgDomainUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * The data used to update OrgDomains.
   */
  data: Prisma.XOR<Prisma.OrgDomainUpdateManyMutationInput, Prisma.OrgDomainUncheckedUpdateManyInput>
  /**
   * Filter which OrgDomains to update
   */
  where?: Prisma.OrgDomainWhereInput
  /**
   * Limit how many OrgDomains to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OrgDomain upsert
 */
export type OrgDomainUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * The filter to search for the OrgDomain to update in case it exists.
   */
  where: Prisma.OrgDomainWhereUniqueInput
  /**
   * In case the OrgDomain found by the `where` argument doesn't exist, create a new OrgDomain with this data.
   */
  create: Prisma.XOR<Prisma.OrgDomainCreateInput, Prisma.OrgDomainUncheckedCreateInput>
  /**
   * In case the OrgDomain was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrgDomainUpdateInput, Prisma.OrgDomainUncheckedUpdateInput>
}

/**
 * OrgDomain delete
 */
export type OrgDomainDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
  /**
   * Filter which OrgDomain to delete.
   */
  where: Prisma.OrgDomainWhereUniqueInput
}

/**
 * OrgDomain deleteMany
 */
export type OrgDomainDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrgDomains to delete
   */
  where?: Prisma.OrgDomainWhereInput
  /**
   * Limit how many OrgDomains to delete.
   */
  limit?: number
}

/**
 * OrgDomain.org
 */
export type OrgDomain$orgArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  where?: Prisma.OrganizationWhereInput
}

/**
 * OrgDomain without action
 */
export type OrgDomainDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgDomain
   */
  select?: Prisma.OrgDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgDomain
   */
  omit?: Prisma.OrgDomainOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgDomainInclude<ExtArgs> | null
}
