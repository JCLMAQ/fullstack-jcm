
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ChangesTracking` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ChangesTracking
 * 
 */
export type ChangesTrackingModel = runtime.Types.Result.DefaultSelection<Prisma.$ChangesTrackingPayload>

export type AggregateChangesTracking = {
  _count: ChangesTrackingCountAggregateOutputType | null
  _avg: ChangesTrackingAvgAggregateOutputType | null
  _sum: ChangesTrackingSumAggregateOutputType | null
  _min: ChangesTrackingMinAggregateOutputType | null
  _max: ChangesTrackingMaxAggregateOutputType | null
}

export type ChangesTrackingAvgAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type ChangesTrackingSumAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type ChangesTrackingMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  doneAt: Date | null
  modifiedById: string | null
  modelName: string | null
  recordId: string | null
  operation: string | null
}

export type ChangesTrackingMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  doneAt: Date | null
  modifiedById: string | null
  modelName: string | null
  recordId: string | null
  operation: string | null
}

export type ChangesTrackingCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  published: number
  isPublic: number
  isDeleted: number
  isDeletedDT: number
  doneAt: number
  modifiedById: number
  modelName: number
  recordId: number
  operation: number
  newData: number
  oldData: number
  _all: number
}


export type ChangesTrackingAvgAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type ChangesTrackingSumAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type ChangesTrackingMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  doneAt?: true
  modifiedById?: true
  modelName?: true
  recordId?: true
  operation?: true
}

export type ChangesTrackingMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  doneAt?: true
  modifiedById?: true
  modelName?: true
  recordId?: true
  operation?: true
}

export type ChangesTrackingCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  doneAt?: true
  modifiedById?: true
  modelName?: true
  recordId?: true
  operation?: true
  newData?: true
  oldData?: true
  _all?: true
}

export type ChangesTrackingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChangesTracking to aggregate.
   */
  where?: Prisma.ChangesTrackingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChangesTrackings to fetch.
   */
  orderBy?: Prisma.ChangesTrackingOrderByWithRelationInput | Prisma.ChangesTrackingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChangesTrackingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChangesTrackings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChangesTrackings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChangesTrackings
  **/
  _count?: true | ChangesTrackingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChangesTrackingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChangesTrackingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChangesTrackingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChangesTrackingMaxAggregateInputType
}

export type GetChangesTrackingAggregateType<T extends ChangesTrackingAggregateArgs> = {
      [P in keyof T & keyof AggregateChangesTracking]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChangesTracking[P]>
    : Prisma.GetScalarType<T[P], AggregateChangesTracking[P]>
}




export type ChangesTrackingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChangesTrackingWhereInput
  orderBy?: Prisma.ChangesTrackingOrderByWithAggregationInput | Prisma.ChangesTrackingOrderByWithAggregationInput[]
  by: Prisma.ChangesTrackingScalarFieldEnum[] | Prisma.ChangesTrackingScalarFieldEnum
  having?: Prisma.ChangesTrackingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChangesTrackingCountAggregateInputType | true
  _avg?: ChangesTrackingAvgAggregateInputType
  _sum?: ChangesTrackingSumAggregateInputType
  _min?: ChangesTrackingMinAggregateInputType
  _max?: ChangesTrackingMaxAggregateInputType
}

export type ChangesTrackingGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  published: boolean
  isPublic: boolean
  isDeleted: number
  isDeletedDT: Date | null
  doneAt: Date
  modifiedById: string
  modelName: string
  recordId: string
  operation: string
  newData: runtime.JsonValue
  oldData: runtime.JsonValue
  _count: ChangesTrackingCountAggregateOutputType | null
  _avg: ChangesTrackingAvgAggregateOutputType | null
  _sum: ChangesTrackingSumAggregateOutputType | null
  _min: ChangesTrackingMinAggregateOutputType | null
  _max: ChangesTrackingMaxAggregateOutputType | null
}

type GetChangesTrackingGroupByPayload<T extends ChangesTrackingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChangesTrackingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChangesTrackingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChangesTrackingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChangesTrackingGroupByOutputType[P]>
      }
    >
  >



export type ChangesTrackingWhereInput = {
  AND?: Prisma.ChangesTrackingWhereInput | Prisma.ChangesTrackingWhereInput[]
  OR?: Prisma.ChangesTrackingWhereInput[]
  NOT?: Prisma.ChangesTrackingWhereInput | Prisma.ChangesTrackingWhereInput[]
  id?: Prisma.IntFilter<"ChangesTracking"> | number
  createdAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  published?: Prisma.BoolFilter<"ChangesTracking"> | boolean
  isPublic?: Prisma.BoolFilter<"ChangesTracking"> | boolean
  isDeleted?: Prisma.IntFilter<"ChangesTracking"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"ChangesTracking"> | Date | string | null
  doneAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  modifiedById?: Prisma.StringFilter<"ChangesTracking"> | string
  modelName?: Prisma.StringFilter<"ChangesTracking"> | string
  recordId?: Prisma.StringFilter<"ChangesTracking"> | string
  operation?: Prisma.StringFilter<"ChangesTracking"> | string
  newData?: Prisma.JsonFilter<"ChangesTracking">
  oldData?: Prisma.JsonFilter<"ChangesTracking">
  modifiedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ChangesTrackingOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  doneAt?: Prisma.SortOrder
  modifiedById?: Prisma.SortOrder
  modelName?: Prisma.SortOrder
  recordId?: Prisma.SortOrder
  operation?: Prisma.SortOrder
  newData?: Prisma.SortOrder
  oldData?: Prisma.SortOrder
  modifiedBy?: Prisma.UserOrderByWithRelationInput
}

export type ChangesTrackingWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ChangesTrackingWhereInput | Prisma.ChangesTrackingWhereInput[]
  OR?: Prisma.ChangesTrackingWhereInput[]
  NOT?: Prisma.ChangesTrackingWhereInput | Prisma.ChangesTrackingWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  published?: Prisma.BoolFilter<"ChangesTracking"> | boolean
  isPublic?: Prisma.BoolFilter<"ChangesTracking"> | boolean
  isDeleted?: Prisma.IntFilter<"ChangesTracking"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"ChangesTracking"> | Date | string | null
  doneAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  modifiedById?: Prisma.StringFilter<"ChangesTracking"> | string
  modelName?: Prisma.StringFilter<"ChangesTracking"> | string
  recordId?: Prisma.StringFilter<"ChangesTracking"> | string
  operation?: Prisma.StringFilter<"ChangesTracking"> | string
  newData?: Prisma.JsonFilter<"ChangesTracking">
  oldData?: Prisma.JsonFilter<"ChangesTracking">
  modifiedBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ChangesTrackingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  doneAt?: Prisma.SortOrder
  modifiedById?: Prisma.SortOrder
  modelName?: Prisma.SortOrder
  recordId?: Prisma.SortOrder
  operation?: Prisma.SortOrder
  newData?: Prisma.SortOrder
  oldData?: Prisma.SortOrder
  _count?: Prisma.ChangesTrackingCountOrderByAggregateInput
  _avg?: Prisma.ChangesTrackingAvgOrderByAggregateInput
  _max?: Prisma.ChangesTrackingMaxOrderByAggregateInput
  _min?: Prisma.ChangesTrackingMinOrderByAggregateInput
  _sum?: Prisma.ChangesTrackingSumOrderByAggregateInput
}

export type ChangesTrackingScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChangesTrackingScalarWhereWithAggregatesInput | Prisma.ChangesTrackingScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChangesTrackingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChangesTrackingScalarWhereWithAggregatesInput | Prisma.ChangesTrackingScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ChangesTracking"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChangesTracking"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ChangesTracking"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"ChangesTracking"> | boolean
  isPublic?: Prisma.BoolWithAggregatesFilter<"ChangesTracking"> | boolean
  isDeleted?: Prisma.IntWithAggregatesFilter<"ChangesTracking"> | number
  isDeletedDT?: Prisma.DateTimeNullableWithAggregatesFilter<"ChangesTracking"> | Date | string | null
  doneAt?: Prisma.DateTimeWithAggregatesFilter<"ChangesTracking"> | Date | string
  modifiedById?: Prisma.StringWithAggregatesFilter<"ChangesTracking"> | string
  modelName?: Prisma.StringWithAggregatesFilter<"ChangesTracking"> | string
  recordId?: Prisma.StringWithAggregatesFilter<"ChangesTracking"> | string
  operation?: Prisma.StringWithAggregatesFilter<"ChangesTracking"> | string
  newData?: Prisma.JsonWithAggregatesFilter<"ChangesTracking">
  oldData?: Prisma.JsonWithAggregatesFilter<"ChangesTracking">
}

export type ChangesTrackingCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  doneAt?: Date | string
  modelName: string
  recordId: string
  operation: string
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  modifiedBy: Prisma.UserCreateNestedOneWithoutChangesLogsInput
}

export type ChangesTrackingUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  doneAt?: Date | string
  modifiedById: string
  modelName: string
  recordId: string
  operation: string
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  doneAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  modelName?: Prisma.StringFieldUpdateOperationsInput | string
  recordId?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.StringFieldUpdateOperationsInput | string
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  modifiedBy?: Prisma.UserUpdateOneRequiredWithoutChangesLogsNestedInput
}

export type ChangesTrackingUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  doneAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  modifiedById?: Prisma.StringFieldUpdateOperationsInput | string
  modelName?: Prisma.StringFieldUpdateOperationsInput | string
  recordId?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.StringFieldUpdateOperationsInput | string
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  doneAt?: Date | string
  modifiedById: string
  modelName: string
  recordId: string
  operation: string
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  doneAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  modelName?: Prisma.StringFieldUpdateOperationsInput | string
  recordId?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.StringFieldUpdateOperationsInput | string
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  doneAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  modifiedById?: Prisma.StringFieldUpdateOperationsInput | string
  modelName?: Prisma.StringFieldUpdateOperationsInput | string
  recordId?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.StringFieldUpdateOperationsInput | string
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingListRelationFilter = {
  every?: Prisma.ChangesTrackingWhereInput
  some?: Prisma.ChangesTrackingWhereInput
  none?: Prisma.ChangesTrackingWhereInput
}

export type ChangesTrackingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChangesTrackingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  doneAt?: Prisma.SortOrder
  modifiedById?: Prisma.SortOrder
  modelName?: Prisma.SortOrder
  recordId?: Prisma.SortOrder
  operation?: Prisma.SortOrder
  newData?: Prisma.SortOrder
  oldData?: Prisma.SortOrder
}

export type ChangesTrackingAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type ChangesTrackingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  doneAt?: Prisma.SortOrder
  modifiedById?: Prisma.SortOrder
  modelName?: Prisma.SortOrder
  recordId?: Prisma.SortOrder
  operation?: Prisma.SortOrder
}

export type ChangesTrackingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  doneAt?: Prisma.SortOrder
  modifiedById?: Prisma.SortOrder
  modelName?: Prisma.SortOrder
  recordId?: Prisma.SortOrder
  operation?: Prisma.SortOrder
}

export type ChangesTrackingSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type ChangesTrackingCreateNestedManyWithoutModifiedByInput = {
  create?: Prisma.XOR<Prisma.ChangesTrackingCreateWithoutModifiedByInput, Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput> | Prisma.ChangesTrackingCreateWithoutModifiedByInput[] | Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput[]
  connectOrCreate?: Prisma.ChangesTrackingCreateOrConnectWithoutModifiedByInput | Prisma.ChangesTrackingCreateOrConnectWithoutModifiedByInput[]
  createMany?: Prisma.ChangesTrackingCreateManyModifiedByInputEnvelope
  connect?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
}

export type ChangesTrackingUncheckedCreateNestedManyWithoutModifiedByInput = {
  create?: Prisma.XOR<Prisma.ChangesTrackingCreateWithoutModifiedByInput, Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput> | Prisma.ChangesTrackingCreateWithoutModifiedByInput[] | Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput[]
  connectOrCreate?: Prisma.ChangesTrackingCreateOrConnectWithoutModifiedByInput | Prisma.ChangesTrackingCreateOrConnectWithoutModifiedByInput[]
  createMany?: Prisma.ChangesTrackingCreateManyModifiedByInputEnvelope
  connect?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
}

export type ChangesTrackingUpdateManyWithoutModifiedByNestedInput = {
  create?: Prisma.XOR<Prisma.ChangesTrackingCreateWithoutModifiedByInput, Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput> | Prisma.ChangesTrackingCreateWithoutModifiedByInput[] | Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput[]
  connectOrCreate?: Prisma.ChangesTrackingCreateOrConnectWithoutModifiedByInput | Prisma.ChangesTrackingCreateOrConnectWithoutModifiedByInput[]
  upsert?: Prisma.ChangesTrackingUpsertWithWhereUniqueWithoutModifiedByInput | Prisma.ChangesTrackingUpsertWithWhereUniqueWithoutModifiedByInput[]
  createMany?: Prisma.ChangesTrackingCreateManyModifiedByInputEnvelope
  set?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
  disconnect?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
  delete?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
  connect?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
  update?: Prisma.ChangesTrackingUpdateWithWhereUniqueWithoutModifiedByInput | Prisma.ChangesTrackingUpdateWithWhereUniqueWithoutModifiedByInput[]
  updateMany?: Prisma.ChangesTrackingUpdateManyWithWhereWithoutModifiedByInput | Prisma.ChangesTrackingUpdateManyWithWhereWithoutModifiedByInput[]
  deleteMany?: Prisma.ChangesTrackingScalarWhereInput | Prisma.ChangesTrackingScalarWhereInput[]
}

export type ChangesTrackingUncheckedUpdateManyWithoutModifiedByNestedInput = {
  create?: Prisma.XOR<Prisma.ChangesTrackingCreateWithoutModifiedByInput, Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput> | Prisma.ChangesTrackingCreateWithoutModifiedByInput[] | Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput[]
  connectOrCreate?: Prisma.ChangesTrackingCreateOrConnectWithoutModifiedByInput | Prisma.ChangesTrackingCreateOrConnectWithoutModifiedByInput[]
  upsert?: Prisma.ChangesTrackingUpsertWithWhereUniqueWithoutModifiedByInput | Prisma.ChangesTrackingUpsertWithWhereUniqueWithoutModifiedByInput[]
  createMany?: Prisma.ChangesTrackingCreateManyModifiedByInputEnvelope
  set?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
  disconnect?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
  delete?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
  connect?: Prisma.ChangesTrackingWhereUniqueInput | Prisma.ChangesTrackingWhereUniqueInput[]
  update?: Prisma.ChangesTrackingUpdateWithWhereUniqueWithoutModifiedByInput | Prisma.ChangesTrackingUpdateWithWhereUniqueWithoutModifiedByInput[]
  updateMany?: Prisma.ChangesTrackingUpdateManyWithWhereWithoutModifiedByInput | Prisma.ChangesTrackingUpdateManyWithWhereWithoutModifiedByInput[]
  deleteMany?: Prisma.ChangesTrackingScalarWhereInput | Prisma.ChangesTrackingScalarWhereInput[]
}

export type ChangesTrackingCreateWithoutModifiedByInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  doneAt?: Date | string
  modelName: string
  recordId: string
  operation: string
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingUncheckedCreateWithoutModifiedByInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  doneAt?: Date | string
  modelName: string
  recordId: string
  operation: string
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingCreateOrConnectWithoutModifiedByInput = {
  where: Prisma.ChangesTrackingWhereUniqueInput
  create: Prisma.XOR<Prisma.ChangesTrackingCreateWithoutModifiedByInput, Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput>
}

export type ChangesTrackingCreateManyModifiedByInputEnvelope = {
  data: Prisma.ChangesTrackingCreateManyModifiedByInput | Prisma.ChangesTrackingCreateManyModifiedByInput[]
  skipDuplicates?: boolean
}

export type ChangesTrackingUpsertWithWhereUniqueWithoutModifiedByInput = {
  where: Prisma.ChangesTrackingWhereUniqueInput
  update: Prisma.XOR<Prisma.ChangesTrackingUpdateWithoutModifiedByInput, Prisma.ChangesTrackingUncheckedUpdateWithoutModifiedByInput>
  create: Prisma.XOR<Prisma.ChangesTrackingCreateWithoutModifiedByInput, Prisma.ChangesTrackingUncheckedCreateWithoutModifiedByInput>
}

export type ChangesTrackingUpdateWithWhereUniqueWithoutModifiedByInput = {
  where: Prisma.ChangesTrackingWhereUniqueInput
  data: Prisma.XOR<Prisma.ChangesTrackingUpdateWithoutModifiedByInput, Prisma.ChangesTrackingUncheckedUpdateWithoutModifiedByInput>
}

export type ChangesTrackingUpdateManyWithWhereWithoutModifiedByInput = {
  where: Prisma.ChangesTrackingScalarWhereInput
  data: Prisma.XOR<Prisma.ChangesTrackingUpdateManyMutationInput, Prisma.ChangesTrackingUncheckedUpdateManyWithoutModifiedByInput>
}

export type ChangesTrackingScalarWhereInput = {
  AND?: Prisma.ChangesTrackingScalarWhereInput | Prisma.ChangesTrackingScalarWhereInput[]
  OR?: Prisma.ChangesTrackingScalarWhereInput[]
  NOT?: Prisma.ChangesTrackingScalarWhereInput | Prisma.ChangesTrackingScalarWhereInput[]
  id?: Prisma.IntFilter<"ChangesTracking"> | number
  createdAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  published?: Prisma.BoolFilter<"ChangesTracking"> | boolean
  isPublic?: Prisma.BoolFilter<"ChangesTracking"> | boolean
  isDeleted?: Prisma.IntFilter<"ChangesTracking"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"ChangesTracking"> | Date | string | null
  doneAt?: Prisma.DateTimeFilter<"ChangesTracking"> | Date | string
  modifiedById?: Prisma.StringFilter<"ChangesTracking"> | string
  modelName?: Prisma.StringFilter<"ChangesTracking"> | string
  recordId?: Prisma.StringFilter<"ChangesTracking"> | string
  operation?: Prisma.StringFilter<"ChangesTracking"> | string
  newData?: Prisma.JsonFilter<"ChangesTracking">
  oldData?: Prisma.JsonFilter<"ChangesTracking">
}

export type ChangesTrackingCreateManyModifiedByInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  doneAt?: Date | string
  modelName: string
  recordId: string
  operation: string
  newData: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingUpdateWithoutModifiedByInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  doneAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  modelName?: Prisma.StringFieldUpdateOperationsInput | string
  recordId?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.StringFieldUpdateOperationsInput | string
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingUncheckedUpdateWithoutModifiedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  doneAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  modelName?: Prisma.StringFieldUpdateOperationsInput | string
  recordId?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.StringFieldUpdateOperationsInput | string
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type ChangesTrackingUncheckedUpdateManyWithoutModifiedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  doneAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  modelName?: Prisma.StringFieldUpdateOperationsInput | string
  recordId?: Prisma.StringFieldUpdateOperationsInput | string
  operation?: Prisma.StringFieldUpdateOperationsInput | string
  newData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  oldData?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}



export type ChangesTrackingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  doneAt?: boolean
  modifiedById?: boolean
  modelName?: boolean
  recordId?: boolean
  operation?: boolean
  newData?: boolean
  oldData?: boolean
  modifiedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["changesTracking"]>

export type ChangesTrackingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  doneAt?: boolean
  modifiedById?: boolean
  modelName?: boolean
  recordId?: boolean
  operation?: boolean
  newData?: boolean
  oldData?: boolean
  modifiedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["changesTracking"]>

export type ChangesTrackingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  doneAt?: boolean
  modifiedById?: boolean
  modelName?: boolean
  recordId?: boolean
  operation?: boolean
  newData?: boolean
  oldData?: boolean
  modifiedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["changesTracking"]>

export type ChangesTrackingSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  doneAt?: boolean
  modifiedById?: boolean
  modelName?: boolean
  recordId?: boolean
  operation?: boolean
  newData?: boolean
  oldData?: boolean
}

export type ChangesTrackingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "published" | "isPublic" | "isDeleted" | "isDeletedDT" | "doneAt" | "modifiedById" | "modelName" | "recordId" | "operation" | "newData" | "oldData", ExtArgs["result"]["changesTracking"]>
export type ChangesTrackingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modifiedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ChangesTrackingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modifiedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ChangesTrackingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  modifiedBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ChangesTrackingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChangesTracking"
  objects: {
    modifiedBy: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    published: boolean
    isPublic: boolean
    isDeleted: number
    isDeletedDT: Date | null
    doneAt: Date
    modifiedById: string
    modelName: string
    recordId: string
    operation: string
    newData: runtime.JsonValue
    oldData: runtime.JsonValue
  }, ExtArgs["result"]["changesTracking"]>
  composites: {}
}

export type ChangesTrackingGetPayload<S extends boolean | null | undefined | ChangesTrackingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload, S>

export type ChangesTrackingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChangesTrackingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChangesTrackingCountAggregateInputType | true
  }

export interface ChangesTrackingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChangesTracking'], meta: { name: 'ChangesTracking' } }
  /**
   * Find zero or one ChangesTracking that matches the filter.
   * @param {ChangesTrackingFindUniqueArgs} args - Arguments to find a ChangesTracking
   * @example
   * // Get one ChangesTracking
   * const changesTracking = await prisma.changesTracking.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChangesTrackingFindUniqueArgs>(args: Prisma.SelectSubset<T, ChangesTrackingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChangesTrackingClient<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChangesTracking that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChangesTrackingFindUniqueOrThrowArgs} args - Arguments to find a ChangesTracking
   * @example
   * // Get one ChangesTracking
   * const changesTracking = await prisma.changesTracking.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChangesTrackingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChangesTrackingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChangesTrackingClient<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChangesTracking that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChangesTrackingFindFirstArgs} args - Arguments to find a ChangesTracking
   * @example
   * // Get one ChangesTracking
   * const changesTracking = await prisma.changesTracking.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChangesTrackingFindFirstArgs>(args?: Prisma.SelectSubset<T, ChangesTrackingFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChangesTrackingClient<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChangesTracking that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChangesTrackingFindFirstOrThrowArgs} args - Arguments to find a ChangesTracking
   * @example
   * // Get one ChangesTracking
   * const changesTracking = await prisma.changesTracking.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChangesTrackingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChangesTrackingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChangesTrackingClient<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChangesTrackings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChangesTrackingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChangesTrackings
   * const changesTrackings = await prisma.changesTracking.findMany()
   * 
   * // Get first 10 ChangesTrackings
   * const changesTrackings = await prisma.changesTracking.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const changesTrackingWithIdOnly = await prisma.changesTracking.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChangesTrackingFindManyArgs>(args?: Prisma.SelectSubset<T, ChangesTrackingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChangesTracking.
   * @param {ChangesTrackingCreateArgs} args - Arguments to create a ChangesTracking.
   * @example
   * // Create one ChangesTracking
   * const ChangesTracking = await prisma.changesTracking.create({
   *   data: {
   *     // ... data to create a ChangesTracking
   *   }
   * })
   * 
   */
  create<T extends ChangesTrackingCreateArgs>(args: Prisma.SelectSubset<T, ChangesTrackingCreateArgs<ExtArgs>>): Prisma.Prisma__ChangesTrackingClient<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChangesTrackings.
   * @param {ChangesTrackingCreateManyArgs} args - Arguments to create many ChangesTrackings.
   * @example
   * // Create many ChangesTrackings
   * const changesTracking = await prisma.changesTracking.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChangesTrackingCreateManyArgs>(args?: Prisma.SelectSubset<T, ChangesTrackingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ChangesTrackings and returns the data saved in the database.
   * @param {ChangesTrackingCreateManyAndReturnArgs} args - Arguments to create many ChangesTrackings.
   * @example
   * // Create many ChangesTrackings
   * const changesTracking = await prisma.changesTracking.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ChangesTrackings and only return the `id`
   * const changesTrackingWithIdOnly = await prisma.changesTracking.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChangesTrackingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChangesTrackingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ChangesTracking.
   * @param {ChangesTrackingDeleteArgs} args - Arguments to delete one ChangesTracking.
   * @example
   * // Delete one ChangesTracking
   * const ChangesTracking = await prisma.changesTracking.delete({
   *   where: {
   *     // ... filter to delete one ChangesTracking
   *   }
   * })
   * 
   */
  delete<T extends ChangesTrackingDeleteArgs>(args: Prisma.SelectSubset<T, ChangesTrackingDeleteArgs<ExtArgs>>): Prisma.Prisma__ChangesTrackingClient<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChangesTracking.
   * @param {ChangesTrackingUpdateArgs} args - Arguments to update one ChangesTracking.
   * @example
   * // Update one ChangesTracking
   * const changesTracking = await prisma.changesTracking.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChangesTrackingUpdateArgs>(args: Prisma.SelectSubset<T, ChangesTrackingUpdateArgs<ExtArgs>>): Prisma.Prisma__ChangesTrackingClient<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChangesTrackings.
   * @param {ChangesTrackingDeleteManyArgs} args - Arguments to filter ChangesTrackings to delete.
   * @example
   * // Delete a few ChangesTrackings
   * const { count } = await prisma.changesTracking.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChangesTrackingDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChangesTrackingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChangesTrackings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChangesTrackingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChangesTrackings
   * const changesTracking = await prisma.changesTracking.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChangesTrackingUpdateManyArgs>(args: Prisma.SelectSubset<T, ChangesTrackingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChangesTrackings and returns the data updated in the database.
   * @param {ChangesTrackingUpdateManyAndReturnArgs} args - Arguments to update many ChangesTrackings.
   * @example
   * // Update many ChangesTrackings
   * const changesTracking = await prisma.changesTracking.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ChangesTrackings and only return the `id`
   * const changesTrackingWithIdOnly = await prisma.changesTracking.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChangesTrackingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChangesTrackingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ChangesTracking.
   * @param {ChangesTrackingUpsertArgs} args - Arguments to update or create a ChangesTracking.
   * @example
   * // Update or create a ChangesTracking
   * const changesTracking = await prisma.changesTracking.upsert({
   *   create: {
   *     // ... data to create a ChangesTracking
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChangesTracking we want to update
   *   }
   * })
   */
  upsert<T extends ChangesTrackingUpsertArgs>(args: Prisma.SelectSubset<T, ChangesTrackingUpsertArgs<ExtArgs>>): Prisma.Prisma__ChangesTrackingClient<runtime.Types.Result.GetResult<Prisma.$ChangesTrackingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChangesTrackings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChangesTrackingCountArgs} args - Arguments to filter ChangesTrackings to count.
   * @example
   * // Count the number of ChangesTrackings
   * const count = await prisma.changesTracking.count({
   *   where: {
   *     // ... the filter for the ChangesTrackings we want to count
   *   }
   * })
  **/
  count<T extends ChangesTrackingCountArgs>(
    args?: Prisma.Subset<T, ChangesTrackingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChangesTrackingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChangesTracking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChangesTrackingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChangesTrackingAggregateArgs>(args: Prisma.Subset<T, ChangesTrackingAggregateArgs>): Prisma.PrismaPromise<GetChangesTrackingAggregateType<T>>

  /**
   * Group by ChangesTracking.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChangesTrackingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChangesTrackingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChangesTrackingGroupByArgs['orderBy'] }
      : { orderBy?: ChangesTrackingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChangesTrackingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChangesTrackingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChangesTracking model
 */
readonly fields: ChangesTrackingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChangesTracking.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChangesTrackingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  modifiedBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChangesTracking model
 */
export interface ChangesTrackingFieldRefs {
  readonly id: Prisma.FieldRef<"ChangesTracking", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ChangesTracking", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ChangesTracking", 'DateTime'>
  readonly published: Prisma.FieldRef<"ChangesTracking", 'Boolean'>
  readonly isPublic: Prisma.FieldRef<"ChangesTracking", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"ChangesTracking", 'Int'>
  readonly isDeletedDT: Prisma.FieldRef<"ChangesTracking", 'DateTime'>
  readonly doneAt: Prisma.FieldRef<"ChangesTracking", 'DateTime'>
  readonly modifiedById: Prisma.FieldRef<"ChangesTracking", 'String'>
  readonly modelName: Prisma.FieldRef<"ChangesTracking", 'String'>
  readonly recordId: Prisma.FieldRef<"ChangesTracking", 'String'>
  readonly operation: Prisma.FieldRef<"ChangesTracking", 'String'>
  readonly newData: Prisma.FieldRef<"ChangesTracking", 'Json'>
  readonly oldData: Prisma.FieldRef<"ChangesTracking", 'Json'>
}
    

// Custom InputTypes
/**
 * ChangesTracking findUnique
 */
export type ChangesTrackingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * Filter, which ChangesTracking to fetch.
   */
  where: Prisma.ChangesTrackingWhereUniqueInput
}

/**
 * ChangesTracking findUniqueOrThrow
 */
export type ChangesTrackingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * Filter, which ChangesTracking to fetch.
   */
  where: Prisma.ChangesTrackingWhereUniqueInput
}

/**
 * ChangesTracking findFirst
 */
export type ChangesTrackingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * Filter, which ChangesTracking to fetch.
   */
  where?: Prisma.ChangesTrackingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChangesTrackings to fetch.
   */
  orderBy?: Prisma.ChangesTrackingOrderByWithRelationInput | Prisma.ChangesTrackingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChangesTrackings.
   */
  cursor?: Prisma.ChangesTrackingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChangesTrackings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChangesTrackings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChangesTrackings.
   */
  distinct?: Prisma.ChangesTrackingScalarFieldEnum | Prisma.ChangesTrackingScalarFieldEnum[]
}

/**
 * ChangesTracking findFirstOrThrow
 */
export type ChangesTrackingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * Filter, which ChangesTracking to fetch.
   */
  where?: Prisma.ChangesTrackingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChangesTrackings to fetch.
   */
  orderBy?: Prisma.ChangesTrackingOrderByWithRelationInput | Prisma.ChangesTrackingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChangesTrackings.
   */
  cursor?: Prisma.ChangesTrackingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChangesTrackings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChangesTrackings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChangesTrackings.
   */
  distinct?: Prisma.ChangesTrackingScalarFieldEnum | Prisma.ChangesTrackingScalarFieldEnum[]
}

/**
 * ChangesTracking findMany
 */
export type ChangesTrackingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * Filter, which ChangesTrackings to fetch.
   */
  where?: Prisma.ChangesTrackingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChangesTrackings to fetch.
   */
  orderBy?: Prisma.ChangesTrackingOrderByWithRelationInput | Prisma.ChangesTrackingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChangesTrackings.
   */
  cursor?: Prisma.ChangesTrackingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChangesTrackings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChangesTrackings.
   */
  skip?: number
  distinct?: Prisma.ChangesTrackingScalarFieldEnum | Prisma.ChangesTrackingScalarFieldEnum[]
}

/**
 * ChangesTracking create
 */
export type ChangesTrackingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * The data needed to create a ChangesTracking.
   */
  data: Prisma.XOR<Prisma.ChangesTrackingCreateInput, Prisma.ChangesTrackingUncheckedCreateInput>
}

/**
 * ChangesTracking createMany
 */
export type ChangesTrackingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChangesTrackings.
   */
  data: Prisma.ChangesTrackingCreateManyInput | Prisma.ChangesTrackingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChangesTracking createManyAndReturn
 */
export type ChangesTrackingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * The data used to create many ChangesTrackings.
   */
  data: Prisma.ChangesTrackingCreateManyInput | Prisma.ChangesTrackingCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ChangesTracking update
 */
export type ChangesTrackingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * The data needed to update a ChangesTracking.
   */
  data: Prisma.XOR<Prisma.ChangesTrackingUpdateInput, Prisma.ChangesTrackingUncheckedUpdateInput>
  /**
   * Choose, which ChangesTracking to update.
   */
  where: Prisma.ChangesTrackingWhereUniqueInput
}

/**
 * ChangesTracking updateMany
 */
export type ChangesTrackingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChangesTrackings.
   */
  data: Prisma.XOR<Prisma.ChangesTrackingUpdateManyMutationInput, Prisma.ChangesTrackingUncheckedUpdateManyInput>
  /**
   * Filter which ChangesTrackings to update
   */
  where?: Prisma.ChangesTrackingWhereInput
  /**
   * Limit how many ChangesTrackings to update.
   */
  limit?: number
}

/**
 * ChangesTracking updateManyAndReturn
 */
export type ChangesTrackingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * The data used to update ChangesTrackings.
   */
  data: Prisma.XOR<Prisma.ChangesTrackingUpdateManyMutationInput, Prisma.ChangesTrackingUncheckedUpdateManyInput>
  /**
   * Filter which ChangesTrackings to update
   */
  where?: Prisma.ChangesTrackingWhereInput
  /**
   * Limit how many ChangesTrackings to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ChangesTracking upsert
 */
export type ChangesTrackingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * The filter to search for the ChangesTracking to update in case it exists.
   */
  where: Prisma.ChangesTrackingWhereUniqueInput
  /**
   * In case the ChangesTracking found by the `where` argument doesn't exist, create a new ChangesTracking with this data.
   */
  create: Prisma.XOR<Prisma.ChangesTrackingCreateInput, Prisma.ChangesTrackingUncheckedCreateInput>
  /**
   * In case the ChangesTracking was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChangesTrackingUpdateInput, Prisma.ChangesTrackingUncheckedUpdateInput>
}

/**
 * ChangesTracking delete
 */
export type ChangesTrackingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
  /**
   * Filter which ChangesTracking to delete.
   */
  where: Prisma.ChangesTrackingWhereUniqueInput
}

/**
 * ChangesTracking deleteMany
 */
export type ChangesTrackingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChangesTrackings to delete
   */
  where?: Prisma.ChangesTrackingWhereInput
  /**
   * Limit how many ChangesTrackings to delete.
   */
  limit?: number
}

/**
 * ChangesTracking without action
 */
export type ChangesTrackingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChangesTracking
   */
  select?: Prisma.ChangesTrackingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChangesTracking
   */
  omit?: Prisma.ChangesTrackingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChangesTrackingInclude<ExtArgs> | null
}
