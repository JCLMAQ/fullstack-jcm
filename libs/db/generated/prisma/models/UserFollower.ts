
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserFollower` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserFollower
 * 
 */
export type UserFollowerModel = runtime.Types.Result.DefaultSelection<Prisma.$UserFollowerPayload>

export type AggregateUserFollower = {
  _count: UserFollowerCountAggregateOutputType | null
  _min: UserFollowerMinAggregateOutputType | null
  _max: UserFollowerMaxAggregateOutputType | null
}

export type UserFollowerMinAggregateOutputType = {
  user_id: string | null
  follower_id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserFollowerMaxAggregateOutputType = {
  user_id: string | null
  follower_id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserFollowerCountAggregateOutputType = {
  user_id: number
  follower_id: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserFollowerMinAggregateInputType = {
  user_id?: true
  follower_id?: true
  createdAt?: true
  updatedAt?: true
}

export type UserFollowerMaxAggregateInputType = {
  user_id?: true
  follower_id?: true
  createdAt?: true
  updatedAt?: true
}

export type UserFollowerCountAggregateInputType = {
  user_id?: true
  follower_id?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserFollowerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserFollower to aggregate.
   */
  where?: Prisma.UserFollowerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserFollowers to fetch.
   */
  orderBy?: Prisma.UserFollowerOrderByWithRelationInput | Prisma.UserFollowerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserFollowerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserFollowers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserFollowers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserFollowers
  **/
  _count?: true | UserFollowerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserFollowerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserFollowerMaxAggregateInputType
}

export type GetUserFollowerAggregateType<T extends UserFollowerAggregateArgs> = {
      [P in keyof T & keyof AggregateUserFollower]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserFollower[P]>
    : Prisma.GetScalarType<T[P], AggregateUserFollower[P]>
}




export type UserFollowerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserFollowerWhereInput
  orderBy?: Prisma.UserFollowerOrderByWithAggregationInput | Prisma.UserFollowerOrderByWithAggregationInput[]
  by: Prisma.UserFollowerScalarFieldEnum[] | Prisma.UserFollowerScalarFieldEnum
  having?: Prisma.UserFollowerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserFollowerCountAggregateInputType | true
  _min?: UserFollowerMinAggregateInputType
  _max?: UserFollowerMaxAggregateInputType
}

export type UserFollowerGroupByOutputType = {
  user_id: string
  follower_id: string
  createdAt: Date
  updatedAt: Date
  _count: UserFollowerCountAggregateOutputType | null
  _min: UserFollowerMinAggregateOutputType | null
  _max: UserFollowerMaxAggregateOutputType | null
}

type GetUserFollowerGroupByPayload<T extends UserFollowerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserFollowerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserFollowerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserFollowerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserFollowerGroupByOutputType[P]>
      }
    >
  >



export type UserFollowerWhereInput = {
  AND?: Prisma.UserFollowerWhereInput | Prisma.UserFollowerWhereInput[]
  OR?: Prisma.UserFollowerWhereInput[]
  NOT?: Prisma.UserFollowerWhereInput | Prisma.UserFollowerWhereInput[]
  user_id?: Prisma.StringFilter<"UserFollower"> | string
  follower_id?: Prisma.StringFilter<"UserFollower"> | string
  createdAt?: Prisma.DateTimeFilter<"UserFollower"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserFollower"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  follower?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserFollowerOrderByWithRelationInput = {
  user_id?: Prisma.SortOrder
  follower_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  follower?: Prisma.UserOrderByWithRelationInput
}

export type UserFollowerWhereUniqueInput = Prisma.AtLeast<{
  user_id_follower_id?: Prisma.UserFollowerUser_idFollower_idCompoundUniqueInput
  AND?: Prisma.UserFollowerWhereInput | Prisma.UserFollowerWhereInput[]
  OR?: Prisma.UserFollowerWhereInput[]
  NOT?: Prisma.UserFollowerWhereInput | Prisma.UserFollowerWhereInput[]
  user_id?: Prisma.StringFilter<"UserFollower"> | string
  follower_id?: Prisma.StringFilter<"UserFollower"> | string
  createdAt?: Prisma.DateTimeFilter<"UserFollower"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserFollower"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  follower?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "user_id_follower_id">

export type UserFollowerOrderByWithAggregationInput = {
  user_id?: Prisma.SortOrder
  follower_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserFollowerCountOrderByAggregateInput
  _max?: Prisma.UserFollowerMaxOrderByAggregateInput
  _min?: Prisma.UserFollowerMinOrderByAggregateInput
}

export type UserFollowerScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserFollowerScalarWhereWithAggregatesInput | Prisma.UserFollowerScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserFollowerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserFollowerScalarWhereWithAggregatesInput | Prisma.UserFollowerScalarWhereWithAggregatesInput[]
  user_id?: Prisma.StringWithAggregatesFilter<"UserFollower"> | string
  follower_id?: Prisma.StringWithAggregatesFilter<"UserFollower"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserFollower"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserFollower"> | Date | string
}

export type UserFollowerCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFollowersInput
  follower: Prisma.UserCreateNestedOneWithoutFollowingsInput
}

export type UserFollowerUncheckedCreateInput = {
  user_id: string
  follower_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserFollowerUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFollowersNestedInput
  follower?: Prisma.UserUpdateOneRequiredWithoutFollowingsNestedInput
}

export type UserFollowerUncheckedUpdateInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  follower_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserFollowerCreateManyInput = {
  user_id: string
  follower_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserFollowerUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserFollowerUncheckedUpdateManyInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  follower_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserFollowerListRelationFilter = {
  every?: Prisma.UserFollowerWhereInput
  some?: Prisma.UserFollowerWhereInput
  none?: Prisma.UserFollowerWhereInput
}

export type UserFollowerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserFollowerUser_idFollower_idCompoundUniqueInput = {
  user_id: string
  follower_id: string
}

export type UserFollowerCountOrderByAggregateInput = {
  user_id?: Prisma.SortOrder
  follower_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserFollowerMaxOrderByAggregateInput = {
  user_id?: Prisma.SortOrder
  follower_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserFollowerMinOrderByAggregateInput = {
  user_id?: Prisma.SortOrder
  follower_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserFollowerCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserFollowerCreateWithoutUserInput, Prisma.UserFollowerUncheckedCreateWithoutUserInput> | Prisma.UserFollowerCreateWithoutUserInput[] | Prisma.UserFollowerUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserFollowerCreateOrConnectWithoutUserInput | Prisma.UserFollowerCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserFollowerCreateManyUserInputEnvelope
  connect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
}

export type UserFollowerCreateNestedManyWithoutFollowerInput = {
  create?: Prisma.XOR<Prisma.UserFollowerCreateWithoutFollowerInput, Prisma.UserFollowerUncheckedCreateWithoutFollowerInput> | Prisma.UserFollowerCreateWithoutFollowerInput[] | Prisma.UserFollowerUncheckedCreateWithoutFollowerInput[]
  connectOrCreate?: Prisma.UserFollowerCreateOrConnectWithoutFollowerInput | Prisma.UserFollowerCreateOrConnectWithoutFollowerInput[]
  createMany?: Prisma.UserFollowerCreateManyFollowerInputEnvelope
  connect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
}

export type UserFollowerUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserFollowerCreateWithoutUserInput, Prisma.UserFollowerUncheckedCreateWithoutUserInput> | Prisma.UserFollowerCreateWithoutUserInput[] | Prisma.UserFollowerUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserFollowerCreateOrConnectWithoutUserInput | Prisma.UserFollowerCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserFollowerCreateManyUserInputEnvelope
  connect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
}

export type UserFollowerUncheckedCreateNestedManyWithoutFollowerInput = {
  create?: Prisma.XOR<Prisma.UserFollowerCreateWithoutFollowerInput, Prisma.UserFollowerUncheckedCreateWithoutFollowerInput> | Prisma.UserFollowerCreateWithoutFollowerInput[] | Prisma.UserFollowerUncheckedCreateWithoutFollowerInput[]
  connectOrCreate?: Prisma.UserFollowerCreateOrConnectWithoutFollowerInput | Prisma.UserFollowerCreateOrConnectWithoutFollowerInput[]
  createMany?: Prisma.UserFollowerCreateManyFollowerInputEnvelope
  connect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
}

export type UserFollowerUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserFollowerCreateWithoutUserInput, Prisma.UserFollowerUncheckedCreateWithoutUserInput> | Prisma.UserFollowerCreateWithoutUserInput[] | Prisma.UserFollowerUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserFollowerCreateOrConnectWithoutUserInput | Prisma.UserFollowerCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserFollowerUpsertWithWhereUniqueWithoutUserInput | Prisma.UserFollowerUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserFollowerCreateManyUserInputEnvelope
  set?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  disconnect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  delete?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  connect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  update?: Prisma.UserFollowerUpdateWithWhereUniqueWithoutUserInput | Prisma.UserFollowerUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserFollowerUpdateManyWithWhereWithoutUserInput | Prisma.UserFollowerUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserFollowerScalarWhereInput | Prisma.UserFollowerScalarWhereInput[]
}

export type UserFollowerUpdateManyWithoutFollowerNestedInput = {
  create?: Prisma.XOR<Prisma.UserFollowerCreateWithoutFollowerInput, Prisma.UserFollowerUncheckedCreateWithoutFollowerInput> | Prisma.UserFollowerCreateWithoutFollowerInput[] | Prisma.UserFollowerUncheckedCreateWithoutFollowerInput[]
  connectOrCreate?: Prisma.UserFollowerCreateOrConnectWithoutFollowerInput | Prisma.UserFollowerCreateOrConnectWithoutFollowerInput[]
  upsert?: Prisma.UserFollowerUpsertWithWhereUniqueWithoutFollowerInput | Prisma.UserFollowerUpsertWithWhereUniqueWithoutFollowerInput[]
  createMany?: Prisma.UserFollowerCreateManyFollowerInputEnvelope
  set?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  disconnect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  delete?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  connect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  update?: Prisma.UserFollowerUpdateWithWhereUniqueWithoutFollowerInput | Prisma.UserFollowerUpdateWithWhereUniqueWithoutFollowerInput[]
  updateMany?: Prisma.UserFollowerUpdateManyWithWhereWithoutFollowerInput | Prisma.UserFollowerUpdateManyWithWhereWithoutFollowerInput[]
  deleteMany?: Prisma.UserFollowerScalarWhereInput | Prisma.UserFollowerScalarWhereInput[]
}

export type UserFollowerUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserFollowerCreateWithoutUserInput, Prisma.UserFollowerUncheckedCreateWithoutUserInput> | Prisma.UserFollowerCreateWithoutUserInput[] | Prisma.UserFollowerUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserFollowerCreateOrConnectWithoutUserInput | Prisma.UserFollowerCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserFollowerUpsertWithWhereUniqueWithoutUserInput | Prisma.UserFollowerUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserFollowerCreateManyUserInputEnvelope
  set?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  disconnect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  delete?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  connect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  update?: Prisma.UserFollowerUpdateWithWhereUniqueWithoutUserInput | Prisma.UserFollowerUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserFollowerUpdateManyWithWhereWithoutUserInput | Prisma.UserFollowerUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserFollowerScalarWhereInput | Prisma.UserFollowerScalarWhereInput[]
}

export type UserFollowerUncheckedUpdateManyWithoutFollowerNestedInput = {
  create?: Prisma.XOR<Prisma.UserFollowerCreateWithoutFollowerInput, Prisma.UserFollowerUncheckedCreateWithoutFollowerInput> | Prisma.UserFollowerCreateWithoutFollowerInput[] | Prisma.UserFollowerUncheckedCreateWithoutFollowerInput[]
  connectOrCreate?: Prisma.UserFollowerCreateOrConnectWithoutFollowerInput | Prisma.UserFollowerCreateOrConnectWithoutFollowerInput[]
  upsert?: Prisma.UserFollowerUpsertWithWhereUniqueWithoutFollowerInput | Prisma.UserFollowerUpsertWithWhereUniqueWithoutFollowerInput[]
  createMany?: Prisma.UserFollowerCreateManyFollowerInputEnvelope
  set?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  disconnect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  delete?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  connect?: Prisma.UserFollowerWhereUniqueInput | Prisma.UserFollowerWhereUniqueInput[]
  update?: Prisma.UserFollowerUpdateWithWhereUniqueWithoutFollowerInput | Prisma.UserFollowerUpdateWithWhereUniqueWithoutFollowerInput[]
  updateMany?: Prisma.UserFollowerUpdateManyWithWhereWithoutFollowerInput | Prisma.UserFollowerUpdateManyWithWhereWithoutFollowerInput[]
  deleteMany?: Prisma.UserFollowerScalarWhereInput | Prisma.UserFollowerScalarWhereInput[]
}

export type UserFollowerCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  follower: Prisma.UserCreateNestedOneWithoutFollowingsInput
}

export type UserFollowerUncheckedCreateWithoutUserInput = {
  follower_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserFollowerCreateOrConnectWithoutUserInput = {
  where: Prisma.UserFollowerWhereUniqueInput
  create: Prisma.XOR<Prisma.UserFollowerCreateWithoutUserInput, Prisma.UserFollowerUncheckedCreateWithoutUserInput>
}

export type UserFollowerCreateManyUserInputEnvelope = {
  data: Prisma.UserFollowerCreateManyUserInput | Prisma.UserFollowerCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserFollowerCreateWithoutFollowerInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFollowersInput
}

export type UserFollowerUncheckedCreateWithoutFollowerInput = {
  user_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserFollowerCreateOrConnectWithoutFollowerInput = {
  where: Prisma.UserFollowerWhereUniqueInput
  create: Prisma.XOR<Prisma.UserFollowerCreateWithoutFollowerInput, Prisma.UserFollowerUncheckedCreateWithoutFollowerInput>
}

export type UserFollowerCreateManyFollowerInputEnvelope = {
  data: Prisma.UserFollowerCreateManyFollowerInput | Prisma.UserFollowerCreateManyFollowerInput[]
  skipDuplicates?: boolean
}

export type UserFollowerUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserFollowerWhereUniqueInput
  update: Prisma.XOR<Prisma.UserFollowerUpdateWithoutUserInput, Prisma.UserFollowerUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserFollowerCreateWithoutUserInput, Prisma.UserFollowerUncheckedCreateWithoutUserInput>
}

export type UserFollowerUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserFollowerWhereUniqueInput
  data: Prisma.XOR<Prisma.UserFollowerUpdateWithoutUserInput, Prisma.UserFollowerUncheckedUpdateWithoutUserInput>
}

export type UserFollowerUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserFollowerScalarWhereInput
  data: Prisma.XOR<Prisma.UserFollowerUpdateManyMutationInput, Prisma.UserFollowerUncheckedUpdateManyWithoutUserInput>
}

export type UserFollowerScalarWhereInput = {
  AND?: Prisma.UserFollowerScalarWhereInput | Prisma.UserFollowerScalarWhereInput[]
  OR?: Prisma.UserFollowerScalarWhereInput[]
  NOT?: Prisma.UserFollowerScalarWhereInput | Prisma.UserFollowerScalarWhereInput[]
  user_id?: Prisma.StringFilter<"UserFollower"> | string
  follower_id?: Prisma.StringFilter<"UserFollower"> | string
  createdAt?: Prisma.DateTimeFilter<"UserFollower"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserFollower"> | Date | string
}

export type UserFollowerUpsertWithWhereUniqueWithoutFollowerInput = {
  where: Prisma.UserFollowerWhereUniqueInput
  update: Prisma.XOR<Prisma.UserFollowerUpdateWithoutFollowerInput, Prisma.UserFollowerUncheckedUpdateWithoutFollowerInput>
  create: Prisma.XOR<Prisma.UserFollowerCreateWithoutFollowerInput, Prisma.UserFollowerUncheckedCreateWithoutFollowerInput>
}

export type UserFollowerUpdateWithWhereUniqueWithoutFollowerInput = {
  where: Prisma.UserFollowerWhereUniqueInput
  data: Prisma.XOR<Prisma.UserFollowerUpdateWithoutFollowerInput, Prisma.UserFollowerUncheckedUpdateWithoutFollowerInput>
}

export type UserFollowerUpdateManyWithWhereWithoutFollowerInput = {
  where: Prisma.UserFollowerScalarWhereInput
  data: Prisma.XOR<Prisma.UserFollowerUpdateManyMutationInput, Prisma.UserFollowerUncheckedUpdateManyWithoutFollowerInput>
}

export type UserFollowerCreateManyUserInput = {
  follower_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserFollowerCreateManyFollowerInput = {
  user_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserFollowerUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  follower?: Prisma.UserUpdateOneRequiredWithoutFollowingsNestedInput
}

export type UserFollowerUncheckedUpdateWithoutUserInput = {
  follower_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserFollowerUncheckedUpdateManyWithoutUserInput = {
  follower_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserFollowerUpdateWithoutFollowerInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFollowersNestedInput
}

export type UserFollowerUncheckedUpdateWithoutFollowerInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserFollowerUncheckedUpdateManyWithoutFollowerInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserFollowerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  user_id?: boolean
  follower_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userFollower"]>

export type UserFollowerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  user_id?: boolean
  follower_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userFollower"]>

export type UserFollowerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  user_id?: boolean
  follower_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userFollower"]>

export type UserFollowerSelectScalar = {
  user_id?: boolean
  follower_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserFollowerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"user_id" | "follower_id" | "createdAt" | "updatedAt", ExtArgs["result"]["userFollower"]>
export type UserFollowerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserFollowerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserFollowerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  follower?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserFollowerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserFollower"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    follower: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    user_id: string
    follower_id: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userFollower"]>
  composites: {}
}

export type UserFollowerGetPayload<S extends boolean | null | undefined | UserFollowerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload, S>

export type UserFollowerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserFollowerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserFollowerCountAggregateInputType | true
  }

export interface UserFollowerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFollower'], meta: { name: 'UserFollower' } }
  /**
   * Find zero or one UserFollower that matches the filter.
   * @param {UserFollowerFindUniqueArgs} args - Arguments to find a UserFollower
   * @example
   * // Get one UserFollower
   * const userFollower = await prisma.userFollower.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserFollowerFindUniqueArgs>(args: Prisma.SelectSubset<T, UserFollowerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserFollowerClient<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserFollower that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserFollowerFindUniqueOrThrowArgs} args - Arguments to find a UserFollower
   * @example
   * // Get one UserFollower
   * const userFollower = await prisma.userFollower.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserFollowerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserFollowerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserFollowerClient<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserFollower that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFollowerFindFirstArgs} args - Arguments to find a UserFollower
   * @example
   * // Get one UserFollower
   * const userFollower = await prisma.userFollower.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserFollowerFindFirstArgs>(args?: Prisma.SelectSubset<T, UserFollowerFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserFollowerClient<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserFollower that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFollowerFindFirstOrThrowArgs} args - Arguments to find a UserFollower
   * @example
   * // Get one UserFollower
   * const userFollower = await prisma.userFollower.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserFollowerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserFollowerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserFollowerClient<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserFollowers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFollowerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserFollowers
   * const userFollowers = await prisma.userFollower.findMany()
   * 
   * // Get first 10 UserFollowers
   * const userFollowers = await prisma.userFollower.findMany({ take: 10 })
   * 
   * // Only select the `user_id`
   * const userFollowerWithUser_idOnly = await prisma.userFollower.findMany({ select: { user_id: true } })
   * 
   */
  findMany<T extends UserFollowerFindManyArgs>(args?: Prisma.SelectSubset<T, UserFollowerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserFollower.
   * @param {UserFollowerCreateArgs} args - Arguments to create a UserFollower.
   * @example
   * // Create one UserFollower
   * const UserFollower = await prisma.userFollower.create({
   *   data: {
   *     // ... data to create a UserFollower
   *   }
   * })
   * 
   */
  create<T extends UserFollowerCreateArgs>(args: Prisma.SelectSubset<T, UserFollowerCreateArgs<ExtArgs>>): Prisma.Prisma__UserFollowerClient<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserFollowers.
   * @param {UserFollowerCreateManyArgs} args - Arguments to create many UserFollowers.
   * @example
   * // Create many UserFollowers
   * const userFollower = await prisma.userFollower.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserFollowerCreateManyArgs>(args?: Prisma.SelectSubset<T, UserFollowerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserFollowers and returns the data saved in the database.
   * @param {UserFollowerCreateManyAndReturnArgs} args - Arguments to create many UserFollowers.
   * @example
   * // Create many UserFollowers
   * const userFollower = await prisma.userFollower.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserFollowers and only return the `user_id`
   * const userFollowerWithUser_idOnly = await prisma.userFollower.createManyAndReturn({
   *   select: { user_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserFollowerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserFollowerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserFollower.
   * @param {UserFollowerDeleteArgs} args - Arguments to delete one UserFollower.
   * @example
   * // Delete one UserFollower
   * const UserFollower = await prisma.userFollower.delete({
   *   where: {
   *     // ... filter to delete one UserFollower
   *   }
   * })
   * 
   */
  delete<T extends UserFollowerDeleteArgs>(args: Prisma.SelectSubset<T, UserFollowerDeleteArgs<ExtArgs>>): Prisma.Prisma__UserFollowerClient<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserFollower.
   * @param {UserFollowerUpdateArgs} args - Arguments to update one UserFollower.
   * @example
   * // Update one UserFollower
   * const userFollower = await prisma.userFollower.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserFollowerUpdateArgs>(args: Prisma.SelectSubset<T, UserFollowerUpdateArgs<ExtArgs>>): Prisma.Prisma__UserFollowerClient<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserFollowers.
   * @param {UserFollowerDeleteManyArgs} args - Arguments to filter UserFollowers to delete.
   * @example
   * // Delete a few UserFollowers
   * const { count } = await prisma.userFollower.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserFollowerDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserFollowerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserFollowers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFollowerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserFollowers
   * const userFollower = await prisma.userFollower.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserFollowerUpdateManyArgs>(args: Prisma.SelectSubset<T, UserFollowerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserFollowers and returns the data updated in the database.
   * @param {UserFollowerUpdateManyAndReturnArgs} args - Arguments to update many UserFollowers.
   * @example
   * // Update many UserFollowers
   * const userFollower = await prisma.userFollower.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserFollowers and only return the `user_id`
   * const userFollowerWithUser_idOnly = await prisma.userFollower.updateManyAndReturn({
   *   select: { user_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserFollowerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserFollowerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserFollower.
   * @param {UserFollowerUpsertArgs} args - Arguments to update or create a UserFollower.
   * @example
   * // Update or create a UserFollower
   * const userFollower = await prisma.userFollower.upsert({
   *   create: {
   *     // ... data to create a UserFollower
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserFollower we want to update
   *   }
   * })
   */
  upsert<T extends UserFollowerUpsertArgs>(args: Prisma.SelectSubset<T, UserFollowerUpsertArgs<ExtArgs>>): Prisma.Prisma__UserFollowerClient<runtime.Types.Result.GetResult<Prisma.$UserFollowerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserFollowers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFollowerCountArgs} args - Arguments to filter UserFollowers to count.
   * @example
   * // Count the number of UserFollowers
   * const count = await prisma.userFollower.count({
   *   where: {
   *     // ... the filter for the UserFollowers we want to count
   *   }
   * })
  **/
  count<T extends UserFollowerCountArgs>(
    args?: Prisma.Subset<T, UserFollowerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserFollowerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserFollower.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFollowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserFollowerAggregateArgs>(args: Prisma.Subset<T, UserFollowerAggregateArgs>): Prisma.PrismaPromise<GetUserFollowerAggregateType<T>>

  /**
   * Group by UserFollower.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserFollowerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserFollowerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserFollowerGroupByArgs['orderBy'] }
      : { orderBy?: UserFollowerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserFollowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFollowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserFollower model
 */
readonly fields: UserFollowerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserFollower.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserFollowerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  follower<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserFollower model
 */
export interface UserFollowerFieldRefs {
  readonly user_id: Prisma.FieldRef<"UserFollower", 'String'>
  readonly follower_id: Prisma.FieldRef<"UserFollower", 'String'>
  readonly createdAt: Prisma.FieldRef<"UserFollower", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserFollower", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserFollower findUnique
 */
export type UserFollowerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * Filter, which UserFollower to fetch.
   */
  where: Prisma.UserFollowerWhereUniqueInput
}

/**
 * UserFollower findUniqueOrThrow
 */
export type UserFollowerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * Filter, which UserFollower to fetch.
   */
  where: Prisma.UserFollowerWhereUniqueInput
}

/**
 * UserFollower findFirst
 */
export type UserFollowerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * Filter, which UserFollower to fetch.
   */
  where?: Prisma.UserFollowerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserFollowers to fetch.
   */
  orderBy?: Prisma.UserFollowerOrderByWithRelationInput | Prisma.UserFollowerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserFollowers.
   */
  cursor?: Prisma.UserFollowerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserFollowers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserFollowers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserFollowers.
   */
  distinct?: Prisma.UserFollowerScalarFieldEnum | Prisma.UserFollowerScalarFieldEnum[]
}

/**
 * UserFollower findFirstOrThrow
 */
export type UserFollowerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * Filter, which UserFollower to fetch.
   */
  where?: Prisma.UserFollowerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserFollowers to fetch.
   */
  orderBy?: Prisma.UserFollowerOrderByWithRelationInput | Prisma.UserFollowerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserFollowers.
   */
  cursor?: Prisma.UserFollowerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserFollowers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserFollowers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserFollowers.
   */
  distinct?: Prisma.UserFollowerScalarFieldEnum | Prisma.UserFollowerScalarFieldEnum[]
}

/**
 * UserFollower findMany
 */
export type UserFollowerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * Filter, which UserFollowers to fetch.
   */
  where?: Prisma.UserFollowerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserFollowers to fetch.
   */
  orderBy?: Prisma.UserFollowerOrderByWithRelationInput | Prisma.UserFollowerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserFollowers.
   */
  cursor?: Prisma.UserFollowerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserFollowers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserFollowers.
   */
  skip?: number
  distinct?: Prisma.UserFollowerScalarFieldEnum | Prisma.UserFollowerScalarFieldEnum[]
}

/**
 * UserFollower create
 */
export type UserFollowerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * The data needed to create a UserFollower.
   */
  data: Prisma.XOR<Prisma.UserFollowerCreateInput, Prisma.UserFollowerUncheckedCreateInput>
}

/**
 * UserFollower createMany
 */
export type UserFollowerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserFollowers.
   */
  data: Prisma.UserFollowerCreateManyInput | Prisma.UserFollowerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserFollower createManyAndReturn
 */
export type UserFollowerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * The data used to create many UserFollowers.
   */
  data: Prisma.UserFollowerCreateManyInput | Prisma.UserFollowerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserFollower update
 */
export type UserFollowerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * The data needed to update a UserFollower.
   */
  data: Prisma.XOR<Prisma.UserFollowerUpdateInput, Prisma.UserFollowerUncheckedUpdateInput>
  /**
   * Choose, which UserFollower to update.
   */
  where: Prisma.UserFollowerWhereUniqueInput
}

/**
 * UserFollower updateMany
 */
export type UserFollowerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserFollowers.
   */
  data: Prisma.XOR<Prisma.UserFollowerUpdateManyMutationInput, Prisma.UserFollowerUncheckedUpdateManyInput>
  /**
   * Filter which UserFollowers to update
   */
  where?: Prisma.UserFollowerWhereInput
  /**
   * Limit how many UserFollowers to update.
   */
  limit?: number
}

/**
 * UserFollower updateManyAndReturn
 */
export type UserFollowerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * The data used to update UserFollowers.
   */
  data: Prisma.XOR<Prisma.UserFollowerUpdateManyMutationInput, Prisma.UserFollowerUncheckedUpdateManyInput>
  /**
   * Filter which UserFollowers to update
   */
  where?: Prisma.UserFollowerWhereInput
  /**
   * Limit how many UserFollowers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserFollower upsert
 */
export type UserFollowerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * The filter to search for the UserFollower to update in case it exists.
   */
  where: Prisma.UserFollowerWhereUniqueInput
  /**
   * In case the UserFollower found by the `where` argument doesn't exist, create a new UserFollower with this data.
   */
  create: Prisma.XOR<Prisma.UserFollowerCreateInput, Prisma.UserFollowerUncheckedCreateInput>
  /**
   * In case the UserFollower was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserFollowerUpdateInput, Prisma.UserFollowerUncheckedUpdateInput>
}

/**
 * UserFollower delete
 */
export type UserFollowerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
  /**
   * Filter which UserFollower to delete.
   */
  where: Prisma.UserFollowerWhereUniqueInput
}

/**
 * UserFollower deleteMany
 */
export type UserFollowerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserFollowers to delete
   */
  where?: Prisma.UserFollowerWhereInput
  /**
   * Limit how many UserFollowers to delete.
   */
  limit?: number
}

/**
 * UserFollower without action
 */
export type UserFollowerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserFollower
   */
  select?: Prisma.UserFollowerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserFollower
   */
  omit?: Prisma.UserFollowerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserFollowerInclude<ExtArgs> | null
}
