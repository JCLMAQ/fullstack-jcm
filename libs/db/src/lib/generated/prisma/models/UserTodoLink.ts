
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserTodoLink` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserTodoLink
 * 
 */
export type UserTodoLinkModel = runtime.Types.Result.DefaultSelection<Prisma.$UserTodoLinkPayload>

export type AggregateUserTodoLink = {
  _count: UserTodoLinkCountAggregateOutputType | null
  _min: UserTodoLinkMinAggregateOutputType | null
  _max: UserTodoLinkMaxAggregateOutputType | null
}

export type UserTodoLinkMinAggregateOutputType = {
  userId: string | null
  todoId: string | null
  isAuthor: boolean | null
  isAssigned: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  comment: string | null
}

export type UserTodoLinkMaxAggregateOutputType = {
  userId: string | null
  todoId: string | null
  isAuthor: boolean | null
  isAssigned: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  comment: string | null
}

export type UserTodoLinkCountAggregateOutputType = {
  userId: number
  todoId: number
  isAuthor: number
  isAssigned: number
  createdAt: number
  updatedAt: number
  comment: number
  _all: number
}


export type UserTodoLinkMinAggregateInputType = {
  userId?: true
  todoId?: true
  isAuthor?: true
  isAssigned?: true
  createdAt?: true
  updatedAt?: true
  comment?: true
}

export type UserTodoLinkMaxAggregateInputType = {
  userId?: true
  todoId?: true
  isAuthor?: true
  isAssigned?: true
  createdAt?: true
  updatedAt?: true
  comment?: true
}

export type UserTodoLinkCountAggregateInputType = {
  userId?: true
  todoId?: true
  isAuthor?: true
  isAssigned?: true
  createdAt?: true
  updatedAt?: true
  comment?: true
  _all?: true
}

export type UserTodoLinkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserTodoLink to aggregate.
   */
  where?: Prisma.UserTodoLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTodoLinks to fetch.
   */
  orderBy?: Prisma.UserTodoLinkOrderByWithRelationInput | Prisma.UserTodoLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserTodoLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTodoLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTodoLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserTodoLinks
  **/
  _count?: true | UserTodoLinkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserTodoLinkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserTodoLinkMaxAggregateInputType
}

export type GetUserTodoLinkAggregateType<T extends UserTodoLinkAggregateArgs> = {
      [P in keyof T & keyof AggregateUserTodoLink]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserTodoLink[P]>
    : Prisma.GetScalarType<T[P], AggregateUserTodoLink[P]>
}




export type UserTodoLinkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserTodoLinkWhereInput
  orderBy?: Prisma.UserTodoLinkOrderByWithAggregationInput | Prisma.UserTodoLinkOrderByWithAggregationInput[]
  by: Prisma.UserTodoLinkScalarFieldEnum[] | Prisma.UserTodoLinkScalarFieldEnum
  having?: Prisma.UserTodoLinkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserTodoLinkCountAggregateInputType | true
  _min?: UserTodoLinkMinAggregateInputType
  _max?: UserTodoLinkMaxAggregateInputType
}

export type UserTodoLinkGroupByOutputType = {
  userId: string
  todoId: string
  isAuthor: boolean
  isAssigned: boolean
  createdAt: Date
  updatedAt: Date
  comment: string
  _count: UserTodoLinkCountAggregateOutputType | null
  _min: UserTodoLinkMinAggregateOutputType | null
  _max: UserTodoLinkMaxAggregateOutputType | null
}

type GetUserTodoLinkGroupByPayload<T extends UserTodoLinkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserTodoLinkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserTodoLinkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserTodoLinkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserTodoLinkGroupByOutputType[P]>
      }
    >
  >



export type UserTodoLinkWhereInput = {
  AND?: Prisma.UserTodoLinkWhereInput | Prisma.UserTodoLinkWhereInput[]
  OR?: Prisma.UserTodoLinkWhereInput[]
  NOT?: Prisma.UserTodoLinkWhereInput | Prisma.UserTodoLinkWhereInput[]
  userId?: Prisma.StringFilter<"UserTodoLink"> | string
  todoId?: Prisma.StringFilter<"UserTodoLink"> | string
  isAuthor?: Prisma.BoolFilter<"UserTodoLink"> | boolean
  isAssigned?: Prisma.BoolFilter<"UserTodoLink"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserTodoLink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserTodoLink"> | Date | string
  comment?: Prisma.StringFilter<"UserTodoLink"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  todo?: Prisma.XOR<Prisma.TodoScalarRelationFilter, Prisma.TodoWhereInput>
}

export type UserTodoLinkOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  todoId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  todo?: Prisma.TodoOrderByWithRelationInput
}

export type UserTodoLinkWhereUniqueInput = Prisma.AtLeast<{
  userId_todoId?: Prisma.UserTodoLinkUserIdTodoIdCompoundUniqueInput
  AND?: Prisma.UserTodoLinkWhereInput | Prisma.UserTodoLinkWhereInput[]
  OR?: Prisma.UserTodoLinkWhereInput[]
  NOT?: Prisma.UserTodoLinkWhereInput | Prisma.UserTodoLinkWhereInput[]
  userId?: Prisma.StringFilter<"UserTodoLink"> | string
  todoId?: Prisma.StringFilter<"UserTodoLink"> | string
  isAuthor?: Prisma.BoolFilter<"UserTodoLink"> | boolean
  isAssigned?: Prisma.BoolFilter<"UserTodoLink"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserTodoLink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserTodoLink"> | Date | string
  comment?: Prisma.StringFilter<"UserTodoLink"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  todo?: Prisma.XOR<Prisma.TodoScalarRelationFilter, Prisma.TodoWhereInput>
}, "userId_todoId">

export type UserTodoLinkOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  todoId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  _count?: Prisma.UserTodoLinkCountOrderByAggregateInput
  _max?: Prisma.UserTodoLinkMaxOrderByAggregateInput
  _min?: Prisma.UserTodoLinkMinOrderByAggregateInput
}

export type UserTodoLinkScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserTodoLinkScalarWhereWithAggregatesInput | Prisma.UserTodoLinkScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserTodoLinkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserTodoLinkScalarWhereWithAggregatesInput | Prisma.UserTodoLinkScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserTodoLink"> | string
  todoId?: Prisma.StringWithAggregatesFilter<"UserTodoLink"> | string
  isAuthor?: Prisma.BoolWithAggregatesFilter<"UserTodoLink"> | boolean
  isAssigned?: Prisma.BoolWithAggregatesFilter<"UserTodoLink"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserTodoLink"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserTodoLink"> | Date | string
  comment?: Prisma.StringWithAggregatesFilter<"UserTodoLink"> | string
}

export type UserTodoLinkCreateInput = {
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
  user: Prisma.UserCreateNestedOneWithoutTodoInput
  todo: Prisma.TodoCreateNestedOneWithoutUsersInput
}

export type UserTodoLinkUncheckedCreateInput = {
  userId: string
  todoId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTodoLinkUpdateInput = {
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutTodoNestedInput
  todo?: Prisma.TodoUpdateOneRequiredWithoutUsersNestedInput
}

export type UserTodoLinkUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  todoId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTodoLinkCreateManyInput = {
  userId: string
  todoId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTodoLinkUpdateManyMutationInput = {
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTodoLinkUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  todoId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTodoLinkListRelationFilter = {
  every?: Prisma.UserTodoLinkWhereInput
  some?: Prisma.UserTodoLinkWhereInput
  none?: Prisma.UserTodoLinkWhereInput
}

export type UserTodoLinkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserTodoLinkUserIdTodoIdCompoundUniqueInput = {
  userId: string
  todoId: string
}

export type UserTodoLinkCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  todoId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type UserTodoLinkMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  todoId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type UserTodoLinkMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  todoId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type UserTodoLinkCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutUserInput, Prisma.UserTodoLinkUncheckedCreateWithoutUserInput> | Prisma.UserTodoLinkCreateWithoutUserInput[] | Prisma.UserTodoLinkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserTodoLinkCreateOrConnectWithoutUserInput | Prisma.UserTodoLinkCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserTodoLinkCreateManyUserInputEnvelope
  connect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
}

export type UserTodoLinkUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutUserInput, Prisma.UserTodoLinkUncheckedCreateWithoutUserInput> | Prisma.UserTodoLinkCreateWithoutUserInput[] | Prisma.UserTodoLinkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserTodoLinkCreateOrConnectWithoutUserInput | Prisma.UserTodoLinkCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserTodoLinkCreateManyUserInputEnvelope
  connect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
}

export type UserTodoLinkUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutUserInput, Prisma.UserTodoLinkUncheckedCreateWithoutUserInput> | Prisma.UserTodoLinkCreateWithoutUserInput[] | Prisma.UserTodoLinkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserTodoLinkCreateOrConnectWithoutUserInput | Prisma.UserTodoLinkCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserTodoLinkUpsertWithWhereUniqueWithoutUserInput | Prisma.UserTodoLinkUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserTodoLinkCreateManyUserInputEnvelope
  set?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  disconnect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  delete?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  connect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  update?: Prisma.UserTodoLinkUpdateWithWhereUniqueWithoutUserInput | Prisma.UserTodoLinkUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserTodoLinkUpdateManyWithWhereWithoutUserInput | Prisma.UserTodoLinkUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserTodoLinkScalarWhereInput | Prisma.UserTodoLinkScalarWhereInput[]
}

export type UserTodoLinkUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutUserInput, Prisma.UserTodoLinkUncheckedCreateWithoutUserInput> | Prisma.UserTodoLinkCreateWithoutUserInput[] | Prisma.UserTodoLinkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserTodoLinkCreateOrConnectWithoutUserInput | Prisma.UserTodoLinkCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserTodoLinkUpsertWithWhereUniqueWithoutUserInput | Prisma.UserTodoLinkUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserTodoLinkCreateManyUserInputEnvelope
  set?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  disconnect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  delete?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  connect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  update?: Prisma.UserTodoLinkUpdateWithWhereUniqueWithoutUserInput | Prisma.UserTodoLinkUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserTodoLinkUpdateManyWithWhereWithoutUserInput | Prisma.UserTodoLinkUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserTodoLinkScalarWhereInput | Prisma.UserTodoLinkScalarWhereInput[]
}

export type UserTodoLinkCreateNestedManyWithoutTodoInput = {
  create?: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutTodoInput, Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput> | Prisma.UserTodoLinkCreateWithoutTodoInput[] | Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput[]
  connectOrCreate?: Prisma.UserTodoLinkCreateOrConnectWithoutTodoInput | Prisma.UserTodoLinkCreateOrConnectWithoutTodoInput[]
  createMany?: Prisma.UserTodoLinkCreateManyTodoInputEnvelope
  connect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
}

export type UserTodoLinkUncheckedCreateNestedManyWithoutTodoInput = {
  create?: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutTodoInput, Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput> | Prisma.UserTodoLinkCreateWithoutTodoInput[] | Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput[]
  connectOrCreate?: Prisma.UserTodoLinkCreateOrConnectWithoutTodoInput | Prisma.UserTodoLinkCreateOrConnectWithoutTodoInput[]
  createMany?: Prisma.UserTodoLinkCreateManyTodoInputEnvelope
  connect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
}

export type UserTodoLinkUpdateManyWithoutTodoNestedInput = {
  create?: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutTodoInput, Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput> | Prisma.UserTodoLinkCreateWithoutTodoInput[] | Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput[]
  connectOrCreate?: Prisma.UserTodoLinkCreateOrConnectWithoutTodoInput | Prisma.UserTodoLinkCreateOrConnectWithoutTodoInput[]
  upsert?: Prisma.UserTodoLinkUpsertWithWhereUniqueWithoutTodoInput | Prisma.UserTodoLinkUpsertWithWhereUniqueWithoutTodoInput[]
  createMany?: Prisma.UserTodoLinkCreateManyTodoInputEnvelope
  set?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  disconnect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  delete?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  connect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  update?: Prisma.UserTodoLinkUpdateWithWhereUniqueWithoutTodoInput | Prisma.UserTodoLinkUpdateWithWhereUniqueWithoutTodoInput[]
  updateMany?: Prisma.UserTodoLinkUpdateManyWithWhereWithoutTodoInput | Prisma.UserTodoLinkUpdateManyWithWhereWithoutTodoInput[]
  deleteMany?: Prisma.UserTodoLinkScalarWhereInput | Prisma.UserTodoLinkScalarWhereInput[]
}

export type UserTodoLinkUncheckedUpdateManyWithoutTodoNestedInput = {
  create?: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutTodoInput, Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput> | Prisma.UserTodoLinkCreateWithoutTodoInput[] | Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput[]
  connectOrCreate?: Prisma.UserTodoLinkCreateOrConnectWithoutTodoInput | Prisma.UserTodoLinkCreateOrConnectWithoutTodoInput[]
  upsert?: Prisma.UserTodoLinkUpsertWithWhereUniqueWithoutTodoInput | Prisma.UserTodoLinkUpsertWithWhereUniqueWithoutTodoInput[]
  createMany?: Prisma.UserTodoLinkCreateManyTodoInputEnvelope
  set?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  disconnect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  delete?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  connect?: Prisma.UserTodoLinkWhereUniqueInput | Prisma.UserTodoLinkWhereUniqueInput[]
  update?: Prisma.UserTodoLinkUpdateWithWhereUniqueWithoutTodoInput | Prisma.UserTodoLinkUpdateWithWhereUniqueWithoutTodoInput[]
  updateMany?: Prisma.UserTodoLinkUpdateManyWithWhereWithoutTodoInput | Prisma.UserTodoLinkUpdateManyWithWhereWithoutTodoInput[]
  deleteMany?: Prisma.UserTodoLinkScalarWhereInput | Prisma.UserTodoLinkScalarWhereInput[]
}

export type UserTodoLinkCreateWithoutUserInput = {
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
  todo: Prisma.TodoCreateNestedOneWithoutUsersInput
}

export type UserTodoLinkUncheckedCreateWithoutUserInput = {
  todoId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTodoLinkCreateOrConnectWithoutUserInput = {
  where: Prisma.UserTodoLinkWhereUniqueInput
  create: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutUserInput, Prisma.UserTodoLinkUncheckedCreateWithoutUserInput>
}

export type UserTodoLinkCreateManyUserInputEnvelope = {
  data: Prisma.UserTodoLinkCreateManyUserInput | Prisma.UserTodoLinkCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserTodoLinkUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserTodoLinkWhereUniqueInput
  update: Prisma.XOR<Prisma.UserTodoLinkUpdateWithoutUserInput, Prisma.UserTodoLinkUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutUserInput, Prisma.UserTodoLinkUncheckedCreateWithoutUserInput>
}

export type UserTodoLinkUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserTodoLinkWhereUniqueInput
  data: Prisma.XOR<Prisma.UserTodoLinkUpdateWithoutUserInput, Prisma.UserTodoLinkUncheckedUpdateWithoutUserInput>
}

export type UserTodoLinkUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserTodoLinkScalarWhereInput
  data: Prisma.XOR<Prisma.UserTodoLinkUpdateManyMutationInput, Prisma.UserTodoLinkUncheckedUpdateManyWithoutUserInput>
}

export type UserTodoLinkScalarWhereInput = {
  AND?: Prisma.UserTodoLinkScalarWhereInput | Prisma.UserTodoLinkScalarWhereInput[]
  OR?: Prisma.UserTodoLinkScalarWhereInput[]
  NOT?: Prisma.UserTodoLinkScalarWhereInput | Prisma.UserTodoLinkScalarWhereInput[]
  userId?: Prisma.StringFilter<"UserTodoLink"> | string
  todoId?: Prisma.StringFilter<"UserTodoLink"> | string
  isAuthor?: Prisma.BoolFilter<"UserTodoLink"> | boolean
  isAssigned?: Prisma.BoolFilter<"UserTodoLink"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserTodoLink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserTodoLink"> | Date | string
  comment?: Prisma.StringFilter<"UserTodoLink"> | string
}

export type UserTodoLinkCreateWithoutTodoInput = {
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
  user: Prisma.UserCreateNestedOneWithoutTodoInput
}

export type UserTodoLinkUncheckedCreateWithoutTodoInput = {
  userId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTodoLinkCreateOrConnectWithoutTodoInput = {
  where: Prisma.UserTodoLinkWhereUniqueInput
  create: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutTodoInput, Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput>
}

export type UserTodoLinkCreateManyTodoInputEnvelope = {
  data: Prisma.UserTodoLinkCreateManyTodoInput | Prisma.UserTodoLinkCreateManyTodoInput[]
  skipDuplicates?: boolean
}

export type UserTodoLinkUpsertWithWhereUniqueWithoutTodoInput = {
  where: Prisma.UserTodoLinkWhereUniqueInput
  update: Prisma.XOR<Prisma.UserTodoLinkUpdateWithoutTodoInput, Prisma.UserTodoLinkUncheckedUpdateWithoutTodoInput>
  create: Prisma.XOR<Prisma.UserTodoLinkCreateWithoutTodoInput, Prisma.UserTodoLinkUncheckedCreateWithoutTodoInput>
}

export type UserTodoLinkUpdateWithWhereUniqueWithoutTodoInput = {
  where: Prisma.UserTodoLinkWhereUniqueInput
  data: Prisma.XOR<Prisma.UserTodoLinkUpdateWithoutTodoInput, Prisma.UserTodoLinkUncheckedUpdateWithoutTodoInput>
}

export type UserTodoLinkUpdateManyWithWhereWithoutTodoInput = {
  where: Prisma.UserTodoLinkScalarWhereInput
  data: Prisma.XOR<Prisma.UserTodoLinkUpdateManyMutationInput, Prisma.UserTodoLinkUncheckedUpdateManyWithoutTodoInput>
}

export type UserTodoLinkCreateManyUserInput = {
  todoId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTodoLinkUpdateWithoutUserInput = {
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  todo?: Prisma.TodoUpdateOneRequiredWithoutUsersNestedInput
}

export type UserTodoLinkUncheckedUpdateWithoutUserInput = {
  todoId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTodoLinkUncheckedUpdateManyWithoutUserInput = {
  todoId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTodoLinkCreateManyTodoInput = {
  userId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTodoLinkUpdateWithoutTodoInput = {
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutTodoNestedInput
}

export type UserTodoLinkUncheckedUpdateWithoutTodoInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTodoLinkUncheckedUpdateManyWithoutTodoInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}



export type UserTodoLinkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  todoId?: boolean
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comment?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  todo?: boolean | Prisma.TodoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userTodoLink"]>

export type UserTodoLinkSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  todoId?: boolean
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comment?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  todo?: boolean | Prisma.TodoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userTodoLink"]>

export type UserTodoLinkSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  todoId?: boolean
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comment?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  todo?: boolean | Prisma.TodoDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userTodoLink"]>

export type UserTodoLinkSelectScalar = {
  userId?: boolean
  todoId?: boolean
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comment?: boolean
}

export type UserTodoLinkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "todoId" | "isAuthor" | "isAssigned" | "createdAt" | "updatedAt" | "comment", ExtArgs["result"]["userTodoLink"]>
export type UserTodoLinkInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  todo?: boolean | Prisma.TodoDefaultArgs<ExtArgs>
}
export type UserTodoLinkIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  todo?: boolean | Prisma.TodoDefaultArgs<ExtArgs>
}
export type UserTodoLinkIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  todo?: boolean | Prisma.TodoDefaultArgs<ExtArgs>
}

export type $UserTodoLinkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserTodoLink"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    todo: Prisma.$TodoPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    todoId: string
    isAuthor: boolean
    isAssigned: boolean
    createdAt: Date
    updatedAt: Date
    comment: string
  }, ExtArgs["result"]["userTodoLink"]>
  composites: {}
}

export type UserTodoLinkGetPayload<S extends boolean | null | undefined | UserTodoLinkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload, S>

export type UserTodoLinkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserTodoLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserTodoLinkCountAggregateInputType | true
  }

export interface UserTodoLinkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTodoLink'], meta: { name: 'UserTodoLink' } }
  /**
   * Find zero or one UserTodoLink that matches the filter.
   * @param {UserTodoLinkFindUniqueArgs} args - Arguments to find a UserTodoLink
   * @example
   * // Get one UserTodoLink
   * const userTodoLink = await prisma.userTodoLink.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserTodoLinkFindUniqueArgs>(args: Prisma.SelectSubset<T, UserTodoLinkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserTodoLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserTodoLink that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserTodoLinkFindUniqueOrThrowArgs} args - Arguments to find a UserTodoLink
   * @example
   * // Get one UserTodoLink
   * const userTodoLink = await prisma.userTodoLink.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserTodoLinkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserTodoLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserTodoLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserTodoLink that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTodoLinkFindFirstArgs} args - Arguments to find a UserTodoLink
   * @example
   * // Get one UserTodoLink
   * const userTodoLink = await prisma.userTodoLink.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserTodoLinkFindFirstArgs>(args?: Prisma.SelectSubset<T, UserTodoLinkFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserTodoLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserTodoLink that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTodoLinkFindFirstOrThrowArgs} args - Arguments to find a UserTodoLink
   * @example
   * // Get one UserTodoLink
   * const userTodoLink = await prisma.userTodoLink.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserTodoLinkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserTodoLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserTodoLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserTodoLinks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTodoLinkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserTodoLinks
   * const userTodoLinks = await prisma.userTodoLink.findMany()
   * 
   * // Get first 10 UserTodoLinks
   * const userTodoLinks = await prisma.userTodoLink.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userTodoLinkWithUserIdOnly = await prisma.userTodoLink.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserTodoLinkFindManyArgs>(args?: Prisma.SelectSubset<T, UserTodoLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserTodoLink.
   * @param {UserTodoLinkCreateArgs} args - Arguments to create a UserTodoLink.
   * @example
   * // Create one UserTodoLink
   * const UserTodoLink = await prisma.userTodoLink.create({
   *   data: {
   *     // ... data to create a UserTodoLink
   *   }
   * })
   * 
   */
  create<T extends UserTodoLinkCreateArgs>(args: Prisma.SelectSubset<T, UserTodoLinkCreateArgs<ExtArgs>>): Prisma.Prisma__UserTodoLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserTodoLinks.
   * @param {UserTodoLinkCreateManyArgs} args - Arguments to create many UserTodoLinks.
   * @example
   * // Create many UserTodoLinks
   * const userTodoLink = await prisma.userTodoLink.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserTodoLinkCreateManyArgs>(args?: Prisma.SelectSubset<T, UserTodoLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserTodoLinks and returns the data saved in the database.
   * @param {UserTodoLinkCreateManyAndReturnArgs} args - Arguments to create many UserTodoLinks.
   * @example
   * // Create many UserTodoLinks
   * const userTodoLink = await prisma.userTodoLink.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserTodoLinks and only return the `userId`
   * const userTodoLinkWithUserIdOnly = await prisma.userTodoLink.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserTodoLinkCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserTodoLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserTodoLink.
   * @param {UserTodoLinkDeleteArgs} args - Arguments to delete one UserTodoLink.
   * @example
   * // Delete one UserTodoLink
   * const UserTodoLink = await prisma.userTodoLink.delete({
   *   where: {
   *     // ... filter to delete one UserTodoLink
   *   }
   * })
   * 
   */
  delete<T extends UserTodoLinkDeleteArgs>(args: Prisma.SelectSubset<T, UserTodoLinkDeleteArgs<ExtArgs>>): Prisma.Prisma__UserTodoLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserTodoLink.
   * @param {UserTodoLinkUpdateArgs} args - Arguments to update one UserTodoLink.
   * @example
   * // Update one UserTodoLink
   * const userTodoLink = await prisma.userTodoLink.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserTodoLinkUpdateArgs>(args: Prisma.SelectSubset<T, UserTodoLinkUpdateArgs<ExtArgs>>): Prisma.Prisma__UserTodoLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserTodoLinks.
   * @param {UserTodoLinkDeleteManyArgs} args - Arguments to filter UserTodoLinks to delete.
   * @example
   * // Delete a few UserTodoLinks
   * const { count } = await prisma.userTodoLink.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserTodoLinkDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserTodoLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserTodoLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTodoLinkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserTodoLinks
   * const userTodoLink = await prisma.userTodoLink.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserTodoLinkUpdateManyArgs>(args: Prisma.SelectSubset<T, UserTodoLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserTodoLinks and returns the data updated in the database.
   * @param {UserTodoLinkUpdateManyAndReturnArgs} args - Arguments to update many UserTodoLinks.
   * @example
   * // Update many UserTodoLinks
   * const userTodoLink = await prisma.userTodoLink.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserTodoLinks and only return the `userId`
   * const userTodoLinkWithUserIdOnly = await prisma.userTodoLink.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserTodoLinkUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserTodoLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserTodoLink.
   * @param {UserTodoLinkUpsertArgs} args - Arguments to update or create a UserTodoLink.
   * @example
   * // Update or create a UserTodoLink
   * const userTodoLink = await prisma.userTodoLink.upsert({
   *   create: {
   *     // ... data to create a UserTodoLink
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserTodoLink we want to update
   *   }
   * })
   */
  upsert<T extends UserTodoLinkUpsertArgs>(args: Prisma.SelectSubset<T, UserTodoLinkUpsertArgs<ExtArgs>>): Prisma.Prisma__UserTodoLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTodoLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserTodoLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTodoLinkCountArgs} args - Arguments to filter UserTodoLinks to count.
   * @example
   * // Count the number of UserTodoLinks
   * const count = await prisma.userTodoLink.count({
   *   where: {
   *     // ... the filter for the UserTodoLinks we want to count
   *   }
   * })
  **/
  count<T extends UserTodoLinkCountArgs>(
    args?: Prisma.Subset<T, UserTodoLinkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserTodoLinkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserTodoLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTodoLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserTodoLinkAggregateArgs>(args: Prisma.Subset<T, UserTodoLinkAggregateArgs>): Prisma.PrismaPromise<GetUserTodoLinkAggregateType<T>>

  /**
   * Group by UserTodoLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTodoLinkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserTodoLinkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserTodoLinkGroupByArgs['orderBy'] }
      : { orderBy?: UserTodoLinkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserTodoLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTodoLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserTodoLink model
 */
readonly fields: UserTodoLinkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserTodoLink.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserTodoLinkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  todo<T extends Prisma.TodoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TodoDefaultArgs<ExtArgs>>): Prisma.Prisma__TodoClient<runtime.Types.Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserTodoLink model
 */
export interface UserTodoLinkFieldRefs {
  readonly userId: Prisma.FieldRef<"UserTodoLink", 'String'>
  readonly todoId: Prisma.FieldRef<"UserTodoLink", 'String'>
  readonly isAuthor: Prisma.FieldRef<"UserTodoLink", 'Boolean'>
  readonly isAssigned: Prisma.FieldRef<"UserTodoLink", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"UserTodoLink", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserTodoLink", 'DateTime'>
  readonly comment: Prisma.FieldRef<"UserTodoLink", 'String'>
}
    

// Custom InputTypes
/**
 * UserTodoLink findUnique
 */
export type UserTodoLinkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTodoLink to fetch.
   */
  where: Prisma.UserTodoLinkWhereUniqueInput
}

/**
 * UserTodoLink findUniqueOrThrow
 */
export type UserTodoLinkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTodoLink to fetch.
   */
  where: Prisma.UserTodoLinkWhereUniqueInput
}

/**
 * UserTodoLink findFirst
 */
export type UserTodoLinkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTodoLink to fetch.
   */
  where?: Prisma.UserTodoLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTodoLinks to fetch.
   */
  orderBy?: Prisma.UserTodoLinkOrderByWithRelationInput | Prisma.UserTodoLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserTodoLinks.
   */
  cursor?: Prisma.UserTodoLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTodoLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTodoLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserTodoLinks.
   */
  distinct?: Prisma.UserTodoLinkScalarFieldEnum | Prisma.UserTodoLinkScalarFieldEnum[]
}

/**
 * UserTodoLink findFirstOrThrow
 */
export type UserTodoLinkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTodoLink to fetch.
   */
  where?: Prisma.UserTodoLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTodoLinks to fetch.
   */
  orderBy?: Prisma.UserTodoLinkOrderByWithRelationInput | Prisma.UserTodoLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserTodoLinks.
   */
  cursor?: Prisma.UserTodoLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTodoLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTodoLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserTodoLinks.
   */
  distinct?: Prisma.UserTodoLinkScalarFieldEnum | Prisma.UserTodoLinkScalarFieldEnum[]
}

/**
 * UserTodoLink findMany
 */
export type UserTodoLinkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTodoLinks to fetch.
   */
  where?: Prisma.UserTodoLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTodoLinks to fetch.
   */
  orderBy?: Prisma.UserTodoLinkOrderByWithRelationInput | Prisma.UserTodoLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserTodoLinks.
   */
  cursor?: Prisma.UserTodoLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTodoLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTodoLinks.
   */
  skip?: number
  distinct?: Prisma.UserTodoLinkScalarFieldEnum | Prisma.UserTodoLinkScalarFieldEnum[]
}

/**
 * UserTodoLink create
 */
export type UserTodoLinkCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * The data needed to create a UserTodoLink.
   */
  data: Prisma.XOR<Prisma.UserTodoLinkCreateInput, Prisma.UserTodoLinkUncheckedCreateInput>
}

/**
 * UserTodoLink createMany
 */
export type UserTodoLinkCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserTodoLinks.
   */
  data: Prisma.UserTodoLinkCreateManyInput | Prisma.UserTodoLinkCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserTodoLink createManyAndReturn
 */
export type UserTodoLinkCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * The data used to create many UserTodoLinks.
   */
  data: Prisma.UserTodoLinkCreateManyInput | Prisma.UserTodoLinkCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserTodoLink update
 */
export type UserTodoLinkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * The data needed to update a UserTodoLink.
   */
  data: Prisma.XOR<Prisma.UserTodoLinkUpdateInput, Prisma.UserTodoLinkUncheckedUpdateInput>
  /**
   * Choose, which UserTodoLink to update.
   */
  where: Prisma.UserTodoLinkWhereUniqueInput
}

/**
 * UserTodoLink updateMany
 */
export type UserTodoLinkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserTodoLinks.
   */
  data: Prisma.XOR<Prisma.UserTodoLinkUpdateManyMutationInput, Prisma.UserTodoLinkUncheckedUpdateManyInput>
  /**
   * Filter which UserTodoLinks to update
   */
  where?: Prisma.UserTodoLinkWhereInput
  /**
   * Limit how many UserTodoLinks to update.
   */
  limit?: number
}

/**
 * UserTodoLink updateManyAndReturn
 */
export type UserTodoLinkUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * The data used to update UserTodoLinks.
   */
  data: Prisma.XOR<Prisma.UserTodoLinkUpdateManyMutationInput, Prisma.UserTodoLinkUncheckedUpdateManyInput>
  /**
   * Filter which UserTodoLinks to update
   */
  where?: Prisma.UserTodoLinkWhereInput
  /**
   * Limit how many UserTodoLinks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserTodoLink upsert
 */
export type UserTodoLinkUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * The filter to search for the UserTodoLink to update in case it exists.
   */
  where: Prisma.UserTodoLinkWhereUniqueInput
  /**
   * In case the UserTodoLink found by the `where` argument doesn't exist, create a new UserTodoLink with this data.
   */
  create: Prisma.XOR<Prisma.UserTodoLinkCreateInput, Prisma.UserTodoLinkUncheckedCreateInput>
  /**
   * In case the UserTodoLink was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserTodoLinkUpdateInput, Prisma.UserTodoLinkUncheckedUpdateInput>
}

/**
 * UserTodoLink delete
 */
export type UserTodoLinkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
  /**
   * Filter which UserTodoLink to delete.
   */
  where: Prisma.UserTodoLinkWhereUniqueInput
}

/**
 * UserTodoLink deleteMany
 */
export type UserTodoLinkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserTodoLinks to delete
   */
  where?: Prisma.UserTodoLinkWhereInput
  /**
   * Limit how many UserTodoLinks to delete.
   */
  limit?: number
}

/**
 * UserTodoLink without action
 */
export type UserTodoLinkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTodoLink
   */
  select?: Prisma.UserTodoLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTodoLink
   */
  omit?: Prisma.UserTodoLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTodoLinkInclude<ExtArgs> | null
}
