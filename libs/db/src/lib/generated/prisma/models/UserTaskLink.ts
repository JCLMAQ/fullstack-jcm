
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserTaskLink` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserTaskLink
 * 
 */
export type UserTaskLinkModel = runtime.Types.Result.DefaultSelection<Prisma.$UserTaskLinkPayload>

export type AggregateUserTaskLink = {
  _count: UserTaskLinkCountAggregateOutputType | null
  _min: UserTaskLinkMinAggregateOutputType | null
  _max: UserTaskLinkMaxAggregateOutputType | null
}

export type UserTaskLinkMinAggregateOutputType = {
  userId: string | null
  taskId: string | null
  isAuthor: boolean | null
  isAssigned: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  comment: string | null
}

export type UserTaskLinkMaxAggregateOutputType = {
  userId: string | null
  taskId: string | null
  isAuthor: boolean | null
  isAssigned: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  comment: string | null
}

export type UserTaskLinkCountAggregateOutputType = {
  userId: number
  taskId: number
  isAuthor: number
  isAssigned: number
  createdAt: number
  updatedAt: number
  comment: number
  _all: number
}


export type UserTaskLinkMinAggregateInputType = {
  userId?: true
  taskId?: true
  isAuthor?: true
  isAssigned?: true
  createdAt?: true
  updatedAt?: true
  comment?: true
}

export type UserTaskLinkMaxAggregateInputType = {
  userId?: true
  taskId?: true
  isAuthor?: true
  isAssigned?: true
  createdAt?: true
  updatedAt?: true
  comment?: true
}

export type UserTaskLinkCountAggregateInputType = {
  userId?: true
  taskId?: true
  isAuthor?: true
  isAssigned?: true
  createdAt?: true
  updatedAt?: true
  comment?: true
  _all?: true
}

export type UserTaskLinkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserTaskLink to aggregate.
   */
  where?: Prisma.UserTaskLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTaskLinks to fetch.
   */
  orderBy?: Prisma.UserTaskLinkOrderByWithRelationInput | Prisma.UserTaskLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserTaskLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTaskLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTaskLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserTaskLinks
  **/
  _count?: true | UserTaskLinkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserTaskLinkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserTaskLinkMaxAggregateInputType
}

export type GetUserTaskLinkAggregateType<T extends UserTaskLinkAggregateArgs> = {
      [P in keyof T & keyof AggregateUserTaskLink]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserTaskLink[P]>
    : Prisma.GetScalarType<T[P], AggregateUserTaskLink[P]>
}




export type UserTaskLinkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserTaskLinkWhereInput
  orderBy?: Prisma.UserTaskLinkOrderByWithAggregationInput | Prisma.UserTaskLinkOrderByWithAggregationInput[]
  by: Prisma.UserTaskLinkScalarFieldEnum[] | Prisma.UserTaskLinkScalarFieldEnum
  having?: Prisma.UserTaskLinkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserTaskLinkCountAggregateInputType | true
  _min?: UserTaskLinkMinAggregateInputType
  _max?: UserTaskLinkMaxAggregateInputType
}

export type UserTaskLinkGroupByOutputType = {
  userId: string
  taskId: string
  isAuthor: boolean
  isAssigned: boolean
  createdAt: Date
  updatedAt: Date
  comment: string
  _count: UserTaskLinkCountAggregateOutputType | null
  _min: UserTaskLinkMinAggregateOutputType | null
  _max: UserTaskLinkMaxAggregateOutputType | null
}

type GetUserTaskLinkGroupByPayload<T extends UserTaskLinkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserTaskLinkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserTaskLinkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserTaskLinkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserTaskLinkGroupByOutputType[P]>
      }
    >
  >



export type UserTaskLinkWhereInput = {
  AND?: Prisma.UserTaskLinkWhereInput | Prisma.UserTaskLinkWhereInput[]
  OR?: Prisma.UserTaskLinkWhereInput[]
  NOT?: Prisma.UserTaskLinkWhereInput | Prisma.UserTaskLinkWhereInput[]
  userId?: Prisma.StringFilter<"UserTaskLink"> | string
  taskId?: Prisma.StringFilter<"UserTaskLink"> | string
  isAuthor?: Prisma.BoolFilter<"UserTaskLink"> | boolean
  isAssigned?: Prisma.BoolFilter<"UserTaskLink"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserTaskLink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserTaskLink"> | Date | string
  comment?: Prisma.StringFilter<"UserTaskLink"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  task?: Prisma.XOR<Prisma.TaskScalarRelationFilter, Prisma.TaskWhereInput>
}

export type UserTaskLinkOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  task?: Prisma.TaskOrderByWithRelationInput
}

export type UserTaskLinkWhereUniqueInput = Prisma.AtLeast<{
  userId_taskId?: Prisma.UserTaskLinkUserIdTaskIdCompoundUniqueInput
  AND?: Prisma.UserTaskLinkWhereInput | Prisma.UserTaskLinkWhereInput[]
  OR?: Prisma.UserTaskLinkWhereInput[]
  NOT?: Prisma.UserTaskLinkWhereInput | Prisma.UserTaskLinkWhereInput[]
  userId?: Prisma.StringFilter<"UserTaskLink"> | string
  taskId?: Prisma.StringFilter<"UserTaskLink"> | string
  isAuthor?: Prisma.BoolFilter<"UserTaskLink"> | boolean
  isAssigned?: Prisma.BoolFilter<"UserTaskLink"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserTaskLink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserTaskLink"> | Date | string
  comment?: Prisma.StringFilter<"UserTaskLink"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  task?: Prisma.XOR<Prisma.TaskScalarRelationFilter, Prisma.TaskWhereInput>
}, "userId_taskId">

export type UserTaskLinkOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
  _count?: Prisma.UserTaskLinkCountOrderByAggregateInput
  _max?: Prisma.UserTaskLinkMaxOrderByAggregateInput
  _min?: Prisma.UserTaskLinkMinOrderByAggregateInput
}

export type UserTaskLinkScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserTaskLinkScalarWhereWithAggregatesInput | Prisma.UserTaskLinkScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserTaskLinkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserTaskLinkScalarWhereWithAggregatesInput | Prisma.UserTaskLinkScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UserTaskLink"> | string
  taskId?: Prisma.StringWithAggregatesFilter<"UserTaskLink"> | string
  isAuthor?: Prisma.BoolWithAggregatesFilter<"UserTaskLink"> | boolean
  isAssigned?: Prisma.BoolWithAggregatesFilter<"UserTaskLink"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserTaskLink"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserTaskLink"> | Date | string
  comment?: Prisma.StringWithAggregatesFilter<"UserTaskLink"> | string
}

export type UserTaskLinkCreateInput = {
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
  user: Prisma.UserCreateNestedOneWithoutTasksInput
  task: Prisma.TaskCreateNestedOneWithoutUsersInput
}

export type UserTaskLinkUncheckedCreateInput = {
  userId: string
  taskId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTaskLinkUpdateInput = {
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutTasksNestedInput
  task?: Prisma.TaskUpdateOneRequiredWithoutUsersNestedInput
}

export type UserTaskLinkUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTaskLinkCreateManyInput = {
  userId: string
  taskId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTaskLinkUpdateManyMutationInput = {
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTaskLinkUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTaskLinkListRelationFilter = {
  every?: Prisma.UserTaskLinkWhereInput
  some?: Prisma.UserTaskLinkWhereInput
  none?: Prisma.UserTaskLinkWhereInput
}

export type UserTaskLinkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserTaskLinkUserIdTaskIdCompoundUniqueInput = {
  userId: string
  taskId: string
}

export type UserTaskLinkCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type UserTaskLinkMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type UserTaskLinkMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  taskId?: Prisma.SortOrder
  isAuthor?: Prisma.SortOrder
  isAssigned?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  comment?: Prisma.SortOrder
}

export type UserTaskLinkCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutUserInput, Prisma.UserTaskLinkUncheckedCreateWithoutUserInput> | Prisma.UserTaskLinkCreateWithoutUserInput[] | Prisma.UserTaskLinkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserTaskLinkCreateOrConnectWithoutUserInput | Prisma.UserTaskLinkCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserTaskLinkCreateManyUserInputEnvelope
  connect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
}

export type UserTaskLinkUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutUserInput, Prisma.UserTaskLinkUncheckedCreateWithoutUserInput> | Prisma.UserTaskLinkCreateWithoutUserInput[] | Prisma.UserTaskLinkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserTaskLinkCreateOrConnectWithoutUserInput | Prisma.UserTaskLinkCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserTaskLinkCreateManyUserInputEnvelope
  connect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
}

export type UserTaskLinkUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutUserInput, Prisma.UserTaskLinkUncheckedCreateWithoutUserInput> | Prisma.UserTaskLinkCreateWithoutUserInput[] | Prisma.UserTaskLinkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserTaskLinkCreateOrConnectWithoutUserInput | Prisma.UserTaskLinkCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserTaskLinkUpsertWithWhereUniqueWithoutUserInput | Prisma.UserTaskLinkUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserTaskLinkCreateManyUserInputEnvelope
  set?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  disconnect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  delete?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  connect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  update?: Prisma.UserTaskLinkUpdateWithWhereUniqueWithoutUserInput | Prisma.UserTaskLinkUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserTaskLinkUpdateManyWithWhereWithoutUserInput | Prisma.UserTaskLinkUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserTaskLinkScalarWhereInput | Prisma.UserTaskLinkScalarWhereInput[]
}

export type UserTaskLinkUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutUserInput, Prisma.UserTaskLinkUncheckedCreateWithoutUserInput> | Prisma.UserTaskLinkCreateWithoutUserInput[] | Prisma.UserTaskLinkUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserTaskLinkCreateOrConnectWithoutUserInput | Prisma.UserTaskLinkCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserTaskLinkUpsertWithWhereUniqueWithoutUserInput | Prisma.UserTaskLinkUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserTaskLinkCreateManyUserInputEnvelope
  set?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  disconnect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  delete?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  connect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  update?: Prisma.UserTaskLinkUpdateWithWhereUniqueWithoutUserInput | Prisma.UserTaskLinkUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserTaskLinkUpdateManyWithWhereWithoutUserInput | Prisma.UserTaskLinkUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserTaskLinkScalarWhereInput | Prisma.UserTaskLinkScalarWhereInput[]
}

export type UserTaskLinkCreateNestedManyWithoutTaskInput = {
  create?: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutTaskInput, Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput> | Prisma.UserTaskLinkCreateWithoutTaskInput[] | Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput[]
  connectOrCreate?: Prisma.UserTaskLinkCreateOrConnectWithoutTaskInput | Prisma.UserTaskLinkCreateOrConnectWithoutTaskInput[]
  createMany?: Prisma.UserTaskLinkCreateManyTaskInputEnvelope
  connect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
}

export type UserTaskLinkUncheckedCreateNestedManyWithoutTaskInput = {
  create?: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutTaskInput, Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput> | Prisma.UserTaskLinkCreateWithoutTaskInput[] | Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput[]
  connectOrCreate?: Prisma.UserTaskLinkCreateOrConnectWithoutTaskInput | Prisma.UserTaskLinkCreateOrConnectWithoutTaskInput[]
  createMany?: Prisma.UserTaskLinkCreateManyTaskInputEnvelope
  connect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
}

export type UserTaskLinkUpdateManyWithoutTaskNestedInput = {
  create?: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutTaskInput, Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput> | Prisma.UserTaskLinkCreateWithoutTaskInput[] | Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput[]
  connectOrCreate?: Prisma.UserTaskLinkCreateOrConnectWithoutTaskInput | Prisma.UserTaskLinkCreateOrConnectWithoutTaskInput[]
  upsert?: Prisma.UserTaskLinkUpsertWithWhereUniqueWithoutTaskInput | Prisma.UserTaskLinkUpsertWithWhereUniqueWithoutTaskInput[]
  createMany?: Prisma.UserTaskLinkCreateManyTaskInputEnvelope
  set?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  disconnect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  delete?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  connect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  update?: Prisma.UserTaskLinkUpdateWithWhereUniqueWithoutTaskInput | Prisma.UserTaskLinkUpdateWithWhereUniqueWithoutTaskInput[]
  updateMany?: Prisma.UserTaskLinkUpdateManyWithWhereWithoutTaskInput | Prisma.UserTaskLinkUpdateManyWithWhereWithoutTaskInput[]
  deleteMany?: Prisma.UserTaskLinkScalarWhereInput | Prisma.UserTaskLinkScalarWhereInput[]
}

export type UserTaskLinkUncheckedUpdateManyWithoutTaskNestedInput = {
  create?: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutTaskInput, Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput> | Prisma.UserTaskLinkCreateWithoutTaskInput[] | Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput[]
  connectOrCreate?: Prisma.UserTaskLinkCreateOrConnectWithoutTaskInput | Prisma.UserTaskLinkCreateOrConnectWithoutTaskInput[]
  upsert?: Prisma.UserTaskLinkUpsertWithWhereUniqueWithoutTaskInput | Prisma.UserTaskLinkUpsertWithWhereUniqueWithoutTaskInput[]
  createMany?: Prisma.UserTaskLinkCreateManyTaskInputEnvelope
  set?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  disconnect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  delete?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  connect?: Prisma.UserTaskLinkWhereUniqueInput | Prisma.UserTaskLinkWhereUniqueInput[]
  update?: Prisma.UserTaskLinkUpdateWithWhereUniqueWithoutTaskInput | Prisma.UserTaskLinkUpdateWithWhereUniqueWithoutTaskInput[]
  updateMany?: Prisma.UserTaskLinkUpdateManyWithWhereWithoutTaskInput | Prisma.UserTaskLinkUpdateManyWithWhereWithoutTaskInput[]
  deleteMany?: Prisma.UserTaskLinkScalarWhereInput | Prisma.UserTaskLinkScalarWhereInput[]
}

export type UserTaskLinkCreateWithoutUserInput = {
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
  task: Prisma.TaskCreateNestedOneWithoutUsersInput
}

export type UserTaskLinkUncheckedCreateWithoutUserInput = {
  taskId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTaskLinkCreateOrConnectWithoutUserInput = {
  where: Prisma.UserTaskLinkWhereUniqueInput
  create: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutUserInput, Prisma.UserTaskLinkUncheckedCreateWithoutUserInput>
}

export type UserTaskLinkCreateManyUserInputEnvelope = {
  data: Prisma.UserTaskLinkCreateManyUserInput | Prisma.UserTaskLinkCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserTaskLinkUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserTaskLinkWhereUniqueInput
  update: Prisma.XOR<Prisma.UserTaskLinkUpdateWithoutUserInput, Prisma.UserTaskLinkUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutUserInput, Prisma.UserTaskLinkUncheckedCreateWithoutUserInput>
}

export type UserTaskLinkUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserTaskLinkWhereUniqueInput
  data: Prisma.XOR<Prisma.UserTaskLinkUpdateWithoutUserInput, Prisma.UserTaskLinkUncheckedUpdateWithoutUserInput>
}

export type UserTaskLinkUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserTaskLinkScalarWhereInput
  data: Prisma.XOR<Prisma.UserTaskLinkUpdateManyMutationInput, Prisma.UserTaskLinkUncheckedUpdateManyWithoutUserInput>
}

export type UserTaskLinkScalarWhereInput = {
  AND?: Prisma.UserTaskLinkScalarWhereInput | Prisma.UserTaskLinkScalarWhereInput[]
  OR?: Prisma.UserTaskLinkScalarWhereInput[]
  NOT?: Prisma.UserTaskLinkScalarWhereInput | Prisma.UserTaskLinkScalarWhereInput[]
  userId?: Prisma.StringFilter<"UserTaskLink"> | string
  taskId?: Prisma.StringFilter<"UserTaskLink"> | string
  isAuthor?: Prisma.BoolFilter<"UserTaskLink"> | boolean
  isAssigned?: Prisma.BoolFilter<"UserTaskLink"> | boolean
  createdAt?: Prisma.DateTimeFilter<"UserTaskLink"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserTaskLink"> | Date | string
  comment?: Prisma.StringFilter<"UserTaskLink"> | string
}

export type UserTaskLinkCreateWithoutTaskInput = {
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
  user: Prisma.UserCreateNestedOneWithoutTasksInput
}

export type UserTaskLinkUncheckedCreateWithoutTaskInput = {
  userId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTaskLinkCreateOrConnectWithoutTaskInput = {
  where: Prisma.UserTaskLinkWhereUniqueInput
  create: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutTaskInput, Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput>
}

export type UserTaskLinkCreateManyTaskInputEnvelope = {
  data: Prisma.UserTaskLinkCreateManyTaskInput | Prisma.UserTaskLinkCreateManyTaskInput[]
  skipDuplicates?: boolean
}

export type UserTaskLinkUpsertWithWhereUniqueWithoutTaskInput = {
  where: Prisma.UserTaskLinkWhereUniqueInput
  update: Prisma.XOR<Prisma.UserTaskLinkUpdateWithoutTaskInput, Prisma.UserTaskLinkUncheckedUpdateWithoutTaskInput>
  create: Prisma.XOR<Prisma.UserTaskLinkCreateWithoutTaskInput, Prisma.UserTaskLinkUncheckedCreateWithoutTaskInput>
}

export type UserTaskLinkUpdateWithWhereUniqueWithoutTaskInput = {
  where: Prisma.UserTaskLinkWhereUniqueInput
  data: Prisma.XOR<Prisma.UserTaskLinkUpdateWithoutTaskInput, Prisma.UserTaskLinkUncheckedUpdateWithoutTaskInput>
}

export type UserTaskLinkUpdateManyWithWhereWithoutTaskInput = {
  where: Prisma.UserTaskLinkScalarWhereInput
  data: Prisma.XOR<Prisma.UserTaskLinkUpdateManyMutationInput, Prisma.UserTaskLinkUncheckedUpdateManyWithoutTaskInput>
}

export type UserTaskLinkCreateManyUserInput = {
  taskId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTaskLinkUpdateWithoutUserInput = {
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  task?: Prisma.TaskUpdateOneRequiredWithoutUsersNestedInput
}

export type UserTaskLinkUncheckedUpdateWithoutUserInput = {
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTaskLinkUncheckedUpdateManyWithoutUserInput = {
  taskId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTaskLinkCreateManyTaskInput = {
  userId: string
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  comment: string
}

export type UserTaskLinkUpdateWithoutTaskInput = {
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutTasksNestedInput
}

export type UserTaskLinkUncheckedUpdateWithoutTaskInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}

export type UserTaskLinkUncheckedUpdateManyWithoutTaskInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isAuthor?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isAssigned?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  comment?: Prisma.StringFieldUpdateOperationsInput | string
}



export type UserTaskLinkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  taskId?: boolean
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comment?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userTaskLink"]>

export type UserTaskLinkSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  taskId?: boolean
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comment?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userTaskLink"]>

export type UserTaskLinkSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  taskId?: boolean
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comment?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userTaskLink"]>

export type UserTaskLinkSelectScalar = {
  userId?: boolean
  taskId?: boolean
  isAuthor?: boolean
  isAssigned?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  comment?: boolean
}

export type UserTaskLinkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "taskId" | "isAuthor" | "isAssigned" | "createdAt" | "updatedAt" | "comment", ExtArgs["result"]["userTaskLink"]>
export type UserTaskLinkInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}
export type UserTaskLinkIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}
export type UserTaskLinkIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  task?: boolean | Prisma.TaskDefaultArgs<ExtArgs>
}

export type $UserTaskLinkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserTaskLink"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    task: Prisma.$TaskPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    taskId: string
    isAuthor: boolean
    isAssigned: boolean
    createdAt: Date
    updatedAt: Date
    comment: string
  }, ExtArgs["result"]["userTaskLink"]>
  composites: {}
}

export type UserTaskLinkGetPayload<S extends boolean | null | undefined | UserTaskLinkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload, S>

export type UserTaskLinkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserTaskLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserTaskLinkCountAggregateInputType | true
  }

export interface UserTaskLinkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTaskLink'], meta: { name: 'UserTaskLink' } }
  /**
   * Find zero or one UserTaskLink that matches the filter.
   * @param {UserTaskLinkFindUniqueArgs} args - Arguments to find a UserTaskLink
   * @example
   * // Get one UserTaskLink
   * const userTaskLink = await prisma.userTaskLink.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserTaskLinkFindUniqueArgs>(args: Prisma.SelectSubset<T, UserTaskLinkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserTaskLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserTaskLink that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserTaskLinkFindUniqueOrThrowArgs} args - Arguments to find a UserTaskLink
   * @example
   * // Get one UserTaskLink
   * const userTaskLink = await prisma.userTaskLink.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserTaskLinkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserTaskLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserTaskLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserTaskLink that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTaskLinkFindFirstArgs} args - Arguments to find a UserTaskLink
   * @example
   * // Get one UserTaskLink
   * const userTaskLink = await prisma.userTaskLink.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserTaskLinkFindFirstArgs>(args?: Prisma.SelectSubset<T, UserTaskLinkFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserTaskLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserTaskLink that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTaskLinkFindFirstOrThrowArgs} args - Arguments to find a UserTaskLink
   * @example
   * // Get one UserTaskLink
   * const userTaskLink = await prisma.userTaskLink.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserTaskLinkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserTaskLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserTaskLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserTaskLinks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTaskLinkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserTaskLinks
   * const userTaskLinks = await prisma.userTaskLink.findMany()
   * 
   * // Get first 10 UserTaskLinks
   * const userTaskLinks = await prisma.userTaskLink.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const userTaskLinkWithUserIdOnly = await prisma.userTaskLink.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UserTaskLinkFindManyArgs>(args?: Prisma.SelectSubset<T, UserTaskLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserTaskLink.
   * @param {UserTaskLinkCreateArgs} args - Arguments to create a UserTaskLink.
   * @example
   * // Create one UserTaskLink
   * const UserTaskLink = await prisma.userTaskLink.create({
   *   data: {
   *     // ... data to create a UserTaskLink
   *   }
   * })
   * 
   */
  create<T extends UserTaskLinkCreateArgs>(args: Prisma.SelectSubset<T, UserTaskLinkCreateArgs<ExtArgs>>): Prisma.Prisma__UserTaskLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserTaskLinks.
   * @param {UserTaskLinkCreateManyArgs} args - Arguments to create many UserTaskLinks.
   * @example
   * // Create many UserTaskLinks
   * const userTaskLink = await prisma.userTaskLink.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserTaskLinkCreateManyArgs>(args?: Prisma.SelectSubset<T, UserTaskLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserTaskLinks and returns the data saved in the database.
   * @param {UserTaskLinkCreateManyAndReturnArgs} args - Arguments to create many UserTaskLinks.
   * @example
   * // Create many UserTaskLinks
   * const userTaskLink = await prisma.userTaskLink.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserTaskLinks and only return the `userId`
   * const userTaskLinkWithUserIdOnly = await prisma.userTaskLink.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserTaskLinkCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserTaskLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserTaskLink.
   * @param {UserTaskLinkDeleteArgs} args - Arguments to delete one UserTaskLink.
   * @example
   * // Delete one UserTaskLink
   * const UserTaskLink = await prisma.userTaskLink.delete({
   *   where: {
   *     // ... filter to delete one UserTaskLink
   *   }
   * })
   * 
   */
  delete<T extends UserTaskLinkDeleteArgs>(args: Prisma.SelectSubset<T, UserTaskLinkDeleteArgs<ExtArgs>>): Prisma.Prisma__UserTaskLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserTaskLink.
   * @param {UserTaskLinkUpdateArgs} args - Arguments to update one UserTaskLink.
   * @example
   * // Update one UserTaskLink
   * const userTaskLink = await prisma.userTaskLink.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserTaskLinkUpdateArgs>(args: Prisma.SelectSubset<T, UserTaskLinkUpdateArgs<ExtArgs>>): Prisma.Prisma__UserTaskLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserTaskLinks.
   * @param {UserTaskLinkDeleteManyArgs} args - Arguments to filter UserTaskLinks to delete.
   * @example
   * // Delete a few UserTaskLinks
   * const { count } = await prisma.userTaskLink.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserTaskLinkDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserTaskLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserTaskLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTaskLinkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserTaskLinks
   * const userTaskLink = await prisma.userTaskLink.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserTaskLinkUpdateManyArgs>(args: Prisma.SelectSubset<T, UserTaskLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserTaskLinks and returns the data updated in the database.
   * @param {UserTaskLinkUpdateManyAndReturnArgs} args - Arguments to update many UserTaskLinks.
   * @example
   * // Update many UserTaskLinks
   * const userTaskLink = await prisma.userTaskLink.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserTaskLinks and only return the `userId`
   * const userTaskLinkWithUserIdOnly = await prisma.userTaskLink.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserTaskLinkUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserTaskLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserTaskLink.
   * @param {UserTaskLinkUpsertArgs} args - Arguments to update or create a UserTaskLink.
   * @example
   * // Update or create a UserTaskLink
   * const userTaskLink = await prisma.userTaskLink.upsert({
   *   create: {
   *     // ... data to create a UserTaskLink
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserTaskLink we want to update
   *   }
   * })
   */
  upsert<T extends UserTaskLinkUpsertArgs>(args: Prisma.SelectSubset<T, UserTaskLinkUpsertArgs<ExtArgs>>): Prisma.Prisma__UserTaskLinkClient<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserTaskLinks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTaskLinkCountArgs} args - Arguments to filter UserTaskLinks to count.
   * @example
   * // Count the number of UserTaskLinks
   * const count = await prisma.userTaskLink.count({
   *   where: {
   *     // ... the filter for the UserTaskLinks we want to count
   *   }
   * })
  **/
  count<T extends UserTaskLinkCountArgs>(
    args?: Prisma.Subset<T, UserTaskLinkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserTaskLinkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserTaskLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTaskLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserTaskLinkAggregateArgs>(args: Prisma.Subset<T, UserTaskLinkAggregateArgs>): Prisma.PrismaPromise<GetUserTaskLinkAggregateType<T>>

  /**
   * Group by UserTaskLink.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTaskLinkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserTaskLinkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserTaskLinkGroupByArgs['orderBy'] }
      : { orderBy?: UserTaskLinkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserTaskLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTaskLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserTaskLink model
 */
readonly fields: UserTaskLinkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserTaskLink.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserTaskLinkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  task<T extends Prisma.TaskDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TaskDefaultArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserTaskLink model
 */
export interface UserTaskLinkFieldRefs {
  readonly userId: Prisma.FieldRef<"UserTaskLink", 'String'>
  readonly taskId: Prisma.FieldRef<"UserTaskLink", 'String'>
  readonly isAuthor: Prisma.FieldRef<"UserTaskLink", 'Boolean'>
  readonly isAssigned: Prisma.FieldRef<"UserTaskLink", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"UserTaskLink", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserTaskLink", 'DateTime'>
  readonly comment: Prisma.FieldRef<"UserTaskLink", 'String'>
}
    

// Custom InputTypes
/**
 * UserTaskLink findUnique
 */
export type UserTaskLinkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTaskLink to fetch.
   */
  where: Prisma.UserTaskLinkWhereUniqueInput
}

/**
 * UserTaskLink findUniqueOrThrow
 */
export type UserTaskLinkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTaskLink to fetch.
   */
  where: Prisma.UserTaskLinkWhereUniqueInput
}

/**
 * UserTaskLink findFirst
 */
export type UserTaskLinkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTaskLink to fetch.
   */
  where?: Prisma.UserTaskLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTaskLinks to fetch.
   */
  orderBy?: Prisma.UserTaskLinkOrderByWithRelationInput | Prisma.UserTaskLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserTaskLinks.
   */
  cursor?: Prisma.UserTaskLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTaskLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTaskLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserTaskLinks.
   */
  distinct?: Prisma.UserTaskLinkScalarFieldEnum | Prisma.UserTaskLinkScalarFieldEnum[]
}

/**
 * UserTaskLink findFirstOrThrow
 */
export type UserTaskLinkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTaskLink to fetch.
   */
  where?: Prisma.UserTaskLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTaskLinks to fetch.
   */
  orderBy?: Prisma.UserTaskLinkOrderByWithRelationInput | Prisma.UserTaskLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserTaskLinks.
   */
  cursor?: Prisma.UserTaskLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTaskLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTaskLinks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserTaskLinks.
   */
  distinct?: Prisma.UserTaskLinkScalarFieldEnum | Prisma.UserTaskLinkScalarFieldEnum[]
}

/**
 * UserTaskLink findMany
 */
export type UserTaskLinkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * Filter, which UserTaskLinks to fetch.
   */
  where?: Prisma.UserTaskLinkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTaskLinks to fetch.
   */
  orderBy?: Prisma.UserTaskLinkOrderByWithRelationInput | Prisma.UserTaskLinkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserTaskLinks.
   */
  cursor?: Prisma.UserTaskLinkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTaskLinks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTaskLinks.
   */
  skip?: number
  distinct?: Prisma.UserTaskLinkScalarFieldEnum | Prisma.UserTaskLinkScalarFieldEnum[]
}

/**
 * UserTaskLink create
 */
export type UserTaskLinkCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * The data needed to create a UserTaskLink.
   */
  data: Prisma.XOR<Prisma.UserTaskLinkCreateInput, Prisma.UserTaskLinkUncheckedCreateInput>
}

/**
 * UserTaskLink createMany
 */
export type UserTaskLinkCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserTaskLinks.
   */
  data: Prisma.UserTaskLinkCreateManyInput | Prisma.UserTaskLinkCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserTaskLink createManyAndReturn
 */
export type UserTaskLinkCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * The data used to create many UserTaskLinks.
   */
  data: Prisma.UserTaskLinkCreateManyInput | Prisma.UserTaskLinkCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserTaskLink update
 */
export type UserTaskLinkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * The data needed to update a UserTaskLink.
   */
  data: Prisma.XOR<Prisma.UserTaskLinkUpdateInput, Prisma.UserTaskLinkUncheckedUpdateInput>
  /**
   * Choose, which UserTaskLink to update.
   */
  where: Prisma.UserTaskLinkWhereUniqueInput
}

/**
 * UserTaskLink updateMany
 */
export type UserTaskLinkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserTaskLinks.
   */
  data: Prisma.XOR<Prisma.UserTaskLinkUpdateManyMutationInput, Prisma.UserTaskLinkUncheckedUpdateManyInput>
  /**
   * Filter which UserTaskLinks to update
   */
  where?: Prisma.UserTaskLinkWhereInput
  /**
   * Limit how many UserTaskLinks to update.
   */
  limit?: number
}

/**
 * UserTaskLink updateManyAndReturn
 */
export type UserTaskLinkUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * The data used to update UserTaskLinks.
   */
  data: Prisma.XOR<Prisma.UserTaskLinkUpdateManyMutationInput, Prisma.UserTaskLinkUncheckedUpdateManyInput>
  /**
   * Filter which UserTaskLinks to update
   */
  where?: Prisma.UserTaskLinkWhereInput
  /**
   * Limit how many UserTaskLinks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserTaskLink upsert
 */
export type UserTaskLinkUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * The filter to search for the UserTaskLink to update in case it exists.
   */
  where: Prisma.UserTaskLinkWhereUniqueInput
  /**
   * In case the UserTaskLink found by the `where` argument doesn't exist, create a new UserTaskLink with this data.
   */
  create: Prisma.XOR<Prisma.UserTaskLinkCreateInput, Prisma.UserTaskLinkUncheckedCreateInput>
  /**
   * In case the UserTaskLink was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserTaskLinkUpdateInput, Prisma.UserTaskLinkUncheckedUpdateInput>
}

/**
 * UserTaskLink delete
 */
export type UserTaskLinkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  /**
   * Filter which UserTaskLink to delete.
   */
  where: Prisma.UserTaskLinkWhereUniqueInput
}

/**
 * UserTaskLink deleteMany
 */
export type UserTaskLinkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserTaskLinks to delete
   */
  where?: Prisma.UserTaskLinkWhereInput
  /**
   * Limit how many UserTaskLinks to delete.
   */
  limit?: number
}

/**
 * UserTaskLink without action
 */
export type UserTaskLinkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
}
