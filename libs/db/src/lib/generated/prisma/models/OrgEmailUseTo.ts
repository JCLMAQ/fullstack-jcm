
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `OrgEmailUseTo` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model OrgEmailUseTo
 * 
 */
export type OrgEmailUseToModel = runtime.Types.Result.DefaultSelection<Prisma.$OrgEmailUseToPayload>

export type AggregateOrgEmailUseTo = {
  _count: OrgEmailUseToCountAggregateOutputType | null
  _avg: OrgEmailUseToAvgAggregateOutputType | null
  _sum: OrgEmailUseToSumAggregateOutputType | null
  _min: OrgEmailUseToMinAggregateOutputType | null
  _max: OrgEmailUseToMaxAggregateOutputType | null
}

export type OrgEmailUseToAvgAggregateOutputType = {
  id: number | null
  isDeleted: number | null
  emailOrgId: number | null
}

export type OrgEmailUseToSumAggregateOutputType = {
  id: number | null
  isDeleted: number | null
  emailOrgId: number | null
}

export type OrgEmailUseToMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  useTo: string | null
  isActiv: boolean | null
  emailOrgId: number | null
}

export type OrgEmailUseToMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  useTo: string | null
  isActiv: boolean | null
  emailOrgId: number | null
}

export type OrgEmailUseToCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  published: number
  isPublic: number
  isDeleted: number
  isDeletedDT: number
  useTo: number
  isActiv: number
  emailOrgId: number
  _all: number
}


export type OrgEmailUseToAvgAggregateInputType = {
  id?: true
  isDeleted?: true
  emailOrgId?: true
}

export type OrgEmailUseToSumAggregateInputType = {
  id?: true
  isDeleted?: true
  emailOrgId?: true
}

export type OrgEmailUseToMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  useTo?: true
  isActiv?: true
  emailOrgId?: true
}

export type OrgEmailUseToMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  useTo?: true
  isActiv?: true
  emailOrgId?: true
}

export type OrgEmailUseToCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  useTo?: true
  isActiv?: true
  emailOrgId?: true
  _all?: true
}

export type OrgEmailUseToAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrgEmailUseTo to aggregate.
   */
  where?: Prisma.OrgEmailUseToWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgEmailUseTos to fetch.
   */
  orderBy?: Prisma.OrgEmailUseToOrderByWithRelationInput | Prisma.OrgEmailUseToOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrgEmailUseToWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgEmailUseTos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgEmailUseTos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OrgEmailUseTos
  **/
  _count?: true | OrgEmailUseToCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OrgEmailUseToAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OrgEmailUseToSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrgEmailUseToMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrgEmailUseToMaxAggregateInputType
}

export type GetOrgEmailUseToAggregateType<T extends OrgEmailUseToAggregateArgs> = {
      [P in keyof T & keyof AggregateOrgEmailUseTo]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrgEmailUseTo[P]>
    : Prisma.GetScalarType<T[P], AggregateOrgEmailUseTo[P]>
}




export type OrgEmailUseToGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrgEmailUseToWhereInput
  orderBy?: Prisma.OrgEmailUseToOrderByWithAggregationInput | Prisma.OrgEmailUseToOrderByWithAggregationInput[]
  by: Prisma.OrgEmailUseToScalarFieldEnum[] | Prisma.OrgEmailUseToScalarFieldEnum
  having?: Prisma.OrgEmailUseToScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrgEmailUseToCountAggregateInputType | true
  _avg?: OrgEmailUseToAvgAggregateInputType
  _sum?: OrgEmailUseToSumAggregateInputType
  _min?: OrgEmailUseToMinAggregateInputType
  _max?: OrgEmailUseToMaxAggregateInputType
}

export type OrgEmailUseToGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  published: boolean
  isPublic: boolean
  isDeleted: number
  isDeletedDT: Date | null
  useTo: string
  isActiv: boolean
  emailOrgId: number
  _count: OrgEmailUseToCountAggregateOutputType | null
  _avg: OrgEmailUseToAvgAggregateOutputType | null
  _sum: OrgEmailUseToSumAggregateOutputType | null
  _min: OrgEmailUseToMinAggregateOutputType | null
  _max: OrgEmailUseToMaxAggregateOutputType | null
}

type GetOrgEmailUseToGroupByPayload<T extends OrgEmailUseToGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrgEmailUseToGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrgEmailUseToGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrgEmailUseToGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrgEmailUseToGroupByOutputType[P]>
      }
    >
  >



export type OrgEmailUseToWhereInput = {
  AND?: Prisma.OrgEmailUseToWhereInput | Prisma.OrgEmailUseToWhereInput[]
  OR?: Prisma.OrgEmailUseToWhereInput[]
  NOT?: Prisma.OrgEmailUseToWhereInput | Prisma.OrgEmailUseToWhereInput[]
  id?: Prisma.IntFilter<"OrgEmailUseTo"> | number
  createdAt?: Prisma.DateTimeFilter<"OrgEmailUseTo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgEmailUseTo"> | Date | string
  published?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgEmailUseTo"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgEmailUseTo"> | Date | string | null
  useTo?: Prisma.StringFilter<"OrgEmailUseTo"> | string
  isActiv?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  emailOrgId?: Prisma.IntFilter<"OrgEmailUseTo"> | number
  emailOrg?: Prisma.XOR<Prisma.OrgEmailScalarRelationFilter, Prisma.OrgEmailWhereInput>
}

export type OrgEmailUseToOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  useTo?: Prisma.SortOrder
  isActiv?: Prisma.SortOrder
  emailOrgId?: Prisma.SortOrder
  emailOrg?: Prisma.OrgEmailOrderByWithRelationInput
}

export type OrgEmailUseToWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.OrgEmailUseToWhereInput | Prisma.OrgEmailUseToWhereInput[]
  OR?: Prisma.OrgEmailUseToWhereInput[]
  NOT?: Prisma.OrgEmailUseToWhereInput | Prisma.OrgEmailUseToWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"OrgEmailUseTo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgEmailUseTo"> | Date | string
  published?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgEmailUseTo"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgEmailUseTo"> | Date | string | null
  useTo?: Prisma.StringFilter<"OrgEmailUseTo"> | string
  isActiv?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  emailOrgId?: Prisma.IntFilter<"OrgEmailUseTo"> | number
  emailOrg?: Prisma.XOR<Prisma.OrgEmailScalarRelationFilter, Prisma.OrgEmailWhereInput>
}, "id">

export type OrgEmailUseToOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  useTo?: Prisma.SortOrder
  isActiv?: Prisma.SortOrder
  emailOrgId?: Prisma.SortOrder
  _count?: Prisma.OrgEmailUseToCountOrderByAggregateInput
  _avg?: Prisma.OrgEmailUseToAvgOrderByAggregateInput
  _max?: Prisma.OrgEmailUseToMaxOrderByAggregateInput
  _min?: Prisma.OrgEmailUseToMinOrderByAggregateInput
  _sum?: Prisma.OrgEmailUseToSumOrderByAggregateInput
}

export type OrgEmailUseToScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrgEmailUseToScalarWhereWithAggregatesInput | Prisma.OrgEmailUseToScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrgEmailUseToScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrgEmailUseToScalarWhereWithAggregatesInput | Prisma.OrgEmailUseToScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"OrgEmailUseTo"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"OrgEmailUseTo"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"OrgEmailUseTo"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"OrgEmailUseTo"> | boolean
  isPublic?: Prisma.BoolWithAggregatesFilter<"OrgEmailUseTo"> | boolean
  isDeleted?: Prisma.IntWithAggregatesFilter<"OrgEmailUseTo"> | number
  isDeletedDT?: Prisma.DateTimeNullableWithAggregatesFilter<"OrgEmailUseTo"> | Date | string | null
  useTo?: Prisma.StringWithAggregatesFilter<"OrgEmailUseTo"> | string
  isActiv?: Prisma.BoolWithAggregatesFilter<"OrgEmailUseTo"> | boolean
  emailOrgId?: Prisma.IntWithAggregatesFilter<"OrgEmailUseTo"> | number
}

export type OrgEmailUseToCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  useTo: string
  isActiv: boolean
  emailOrg: Prisma.OrgEmailCreateNestedOneWithoutOrgEmailUseTosInput
}

export type OrgEmailUseToUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  useTo: string
  isActiv: boolean
  emailOrgId: number
}

export type OrgEmailUseToUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  useTo?: Prisma.StringFieldUpdateOperationsInput | string
  isActiv?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailOrg?: Prisma.OrgEmailUpdateOneRequiredWithoutOrgEmailUseTosNestedInput
}

export type OrgEmailUseToUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  useTo?: Prisma.StringFieldUpdateOperationsInput | string
  isActiv?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailOrgId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrgEmailUseToCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  useTo: string
  isActiv: boolean
  emailOrgId: number
}

export type OrgEmailUseToUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  useTo?: Prisma.StringFieldUpdateOperationsInput | string
  isActiv?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type OrgEmailUseToUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  useTo?: Prisma.StringFieldUpdateOperationsInput | string
  isActiv?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailOrgId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrgEmailUseToListRelationFilter = {
  every?: Prisma.OrgEmailUseToWhereInput
  some?: Prisma.OrgEmailUseToWhereInput
  none?: Prisma.OrgEmailUseToWhereInput
}

export type OrgEmailUseToOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OrgEmailUseToCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  useTo?: Prisma.SortOrder
  isActiv?: Prisma.SortOrder
  emailOrgId?: Prisma.SortOrder
}

export type OrgEmailUseToAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  emailOrgId?: Prisma.SortOrder
}

export type OrgEmailUseToMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  useTo?: Prisma.SortOrder
  isActiv?: Prisma.SortOrder
  emailOrgId?: Prisma.SortOrder
}

export type OrgEmailUseToMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  useTo?: Prisma.SortOrder
  isActiv?: Prisma.SortOrder
  emailOrgId?: Prisma.SortOrder
}

export type OrgEmailUseToSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  emailOrgId?: Prisma.SortOrder
}

export type OrgEmailUseToCreateNestedManyWithoutEmailOrgInput = {
  create?: Prisma.XOR<Prisma.OrgEmailUseToCreateWithoutEmailOrgInput, Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput> | Prisma.OrgEmailUseToCreateWithoutEmailOrgInput[] | Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput[]
  connectOrCreate?: Prisma.OrgEmailUseToCreateOrConnectWithoutEmailOrgInput | Prisma.OrgEmailUseToCreateOrConnectWithoutEmailOrgInput[]
  createMany?: Prisma.OrgEmailUseToCreateManyEmailOrgInputEnvelope
  connect?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
}

export type OrgEmailUseToUncheckedCreateNestedManyWithoutEmailOrgInput = {
  create?: Prisma.XOR<Prisma.OrgEmailUseToCreateWithoutEmailOrgInput, Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput> | Prisma.OrgEmailUseToCreateWithoutEmailOrgInput[] | Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput[]
  connectOrCreate?: Prisma.OrgEmailUseToCreateOrConnectWithoutEmailOrgInput | Prisma.OrgEmailUseToCreateOrConnectWithoutEmailOrgInput[]
  createMany?: Prisma.OrgEmailUseToCreateManyEmailOrgInputEnvelope
  connect?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
}

export type OrgEmailUseToUpdateManyWithoutEmailOrgNestedInput = {
  create?: Prisma.XOR<Prisma.OrgEmailUseToCreateWithoutEmailOrgInput, Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput> | Prisma.OrgEmailUseToCreateWithoutEmailOrgInput[] | Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput[]
  connectOrCreate?: Prisma.OrgEmailUseToCreateOrConnectWithoutEmailOrgInput | Prisma.OrgEmailUseToCreateOrConnectWithoutEmailOrgInput[]
  upsert?: Prisma.OrgEmailUseToUpsertWithWhereUniqueWithoutEmailOrgInput | Prisma.OrgEmailUseToUpsertWithWhereUniqueWithoutEmailOrgInput[]
  createMany?: Prisma.OrgEmailUseToCreateManyEmailOrgInputEnvelope
  set?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
  disconnect?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
  delete?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
  connect?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
  update?: Prisma.OrgEmailUseToUpdateWithWhereUniqueWithoutEmailOrgInput | Prisma.OrgEmailUseToUpdateWithWhereUniqueWithoutEmailOrgInput[]
  updateMany?: Prisma.OrgEmailUseToUpdateManyWithWhereWithoutEmailOrgInput | Prisma.OrgEmailUseToUpdateManyWithWhereWithoutEmailOrgInput[]
  deleteMany?: Prisma.OrgEmailUseToScalarWhereInput | Prisma.OrgEmailUseToScalarWhereInput[]
}

export type OrgEmailUseToUncheckedUpdateManyWithoutEmailOrgNestedInput = {
  create?: Prisma.XOR<Prisma.OrgEmailUseToCreateWithoutEmailOrgInput, Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput> | Prisma.OrgEmailUseToCreateWithoutEmailOrgInput[] | Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput[]
  connectOrCreate?: Prisma.OrgEmailUseToCreateOrConnectWithoutEmailOrgInput | Prisma.OrgEmailUseToCreateOrConnectWithoutEmailOrgInput[]
  upsert?: Prisma.OrgEmailUseToUpsertWithWhereUniqueWithoutEmailOrgInput | Prisma.OrgEmailUseToUpsertWithWhereUniqueWithoutEmailOrgInput[]
  createMany?: Prisma.OrgEmailUseToCreateManyEmailOrgInputEnvelope
  set?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
  disconnect?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
  delete?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
  connect?: Prisma.OrgEmailUseToWhereUniqueInput | Prisma.OrgEmailUseToWhereUniqueInput[]
  update?: Prisma.OrgEmailUseToUpdateWithWhereUniqueWithoutEmailOrgInput | Prisma.OrgEmailUseToUpdateWithWhereUniqueWithoutEmailOrgInput[]
  updateMany?: Prisma.OrgEmailUseToUpdateManyWithWhereWithoutEmailOrgInput | Prisma.OrgEmailUseToUpdateManyWithWhereWithoutEmailOrgInput[]
  deleteMany?: Prisma.OrgEmailUseToScalarWhereInput | Prisma.OrgEmailUseToScalarWhereInput[]
}

export type OrgEmailUseToCreateWithoutEmailOrgInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  useTo: string
  isActiv: boolean
}

export type OrgEmailUseToUncheckedCreateWithoutEmailOrgInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  useTo: string
  isActiv: boolean
}

export type OrgEmailUseToCreateOrConnectWithoutEmailOrgInput = {
  where: Prisma.OrgEmailUseToWhereUniqueInput
  create: Prisma.XOR<Prisma.OrgEmailUseToCreateWithoutEmailOrgInput, Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput>
}

export type OrgEmailUseToCreateManyEmailOrgInputEnvelope = {
  data: Prisma.OrgEmailUseToCreateManyEmailOrgInput | Prisma.OrgEmailUseToCreateManyEmailOrgInput[]
  skipDuplicates?: boolean
}

export type OrgEmailUseToUpsertWithWhereUniqueWithoutEmailOrgInput = {
  where: Prisma.OrgEmailUseToWhereUniqueInput
  update: Prisma.XOR<Prisma.OrgEmailUseToUpdateWithoutEmailOrgInput, Prisma.OrgEmailUseToUncheckedUpdateWithoutEmailOrgInput>
  create: Prisma.XOR<Prisma.OrgEmailUseToCreateWithoutEmailOrgInput, Prisma.OrgEmailUseToUncheckedCreateWithoutEmailOrgInput>
}

export type OrgEmailUseToUpdateWithWhereUniqueWithoutEmailOrgInput = {
  where: Prisma.OrgEmailUseToWhereUniqueInput
  data: Prisma.XOR<Prisma.OrgEmailUseToUpdateWithoutEmailOrgInput, Prisma.OrgEmailUseToUncheckedUpdateWithoutEmailOrgInput>
}

export type OrgEmailUseToUpdateManyWithWhereWithoutEmailOrgInput = {
  where: Prisma.OrgEmailUseToScalarWhereInput
  data: Prisma.XOR<Prisma.OrgEmailUseToUpdateManyMutationInput, Prisma.OrgEmailUseToUncheckedUpdateManyWithoutEmailOrgInput>
}

export type OrgEmailUseToScalarWhereInput = {
  AND?: Prisma.OrgEmailUseToScalarWhereInput | Prisma.OrgEmailUseToScalarWhereInput[]
  OR?: Prisma.OrgEmailUseToScalarWhereInput[]
  NOT?: Prisma.OrgEmailUseToScalarWhereInput | Prisma.OrgEmailUseToScalarWhereInput[]
  id?: Prisma.IntFilter<"OrgEmailUseTo"> | number
  createdAt?: Prisma.DateTimeFilter<"OrgEmailUseTo"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgEmailUseTo"> | Date | string
  published?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgEmailUseTo"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgEmailUseTo"> | Date | string | null
  useTo?: Prisma.StringFilter<"OrgEmailUseTo"> | string
  isActiv?: Prisma.BoolFilter<"OrgEmailUseTo"> | boolean
  emailOrgId?: Prisma.IntFilter<"OrgEmailUseTo"> | number
}

export type OrgEmailUseToCreateManyEmailOrgInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  useTo: string
  isActiv: boolean
}

export type OrgEmailUseToUpdateWithoutEmailOrgInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  useTo?: Prisma.StringFieldUpdateOperationsInput | string
  isActiv?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type OrgEmailUseToUncheckedUpdateWithoutEmailOrgInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  useTo?: Prisma.StringFieldUpdateOperationsInput | string
  isActiv?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type OrgEmailUseToUncheckedUpdateManyWithoutEmailOrgInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  useTo?: Prisma.StringFieldUpdateOperationsInput | string
  isActiv?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type OrgEmailUseToSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  useTo?: boolean
  isActiv?: boolean
  emailOrgId?: boolean
  emailOrg?: boolean | Prisma.OrgEmailDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orgEmailUseTo"]>

export type OrgEmailUseToSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  useTo?: boolean
  isActiv?: boolean
  emailOrgId?: boolean
  emailOrg?: boolean | Prisma.OrgEmailDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orgEmailUseTo"]>

export type OrgEmailUseToSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  useTo?: boolean
  isActiv?: boolean
  emailOrgId?: boolean
  emailOrg?: boolean | Prisma.OrgEmailDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orgEmailUseTo"]>

export type OrgEmailUseToSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  useTo?: boolean
  isActiv?: boolean
  emailOrgId?: boolean
}

export type OrgEmailUseToOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "published" | "isPublic" | "isDeleted" | "isDeletedDT" | "useTo" | "isActiv" | "emailOrgId", ExtArgs["result"]["orgEmailUseTo"]>
export type OrgEmailUseToInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  emailOrg?: boolean | Prisma.OrgEmailDefaultArgs<ExtArgs>
}
export type OrgEmailUseToIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  emailOrg?: boolean | Prisma.OrgEmailDefaultArgs<ExtArgs>
}
export type OrgEmailUseToIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  emailOrg?: boolean | Prisma.OrgEmailDefaultArgs<ExtArgs>
}

export type $OrgEmailUseToPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OrgEmailUseTo"
  objects: {
    emailOrg: Prisma.$OrgEmailPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    published: boolean
    isPublic: boolean
    isDeleted: number
    isDeletedDT: Date | null
    useTo: string
    isActiv: boolean
    emailOrgId: number
  }, ExtArgs["result"]["orgEmailUseTo"]>
  composites: {}
}

export type OrgEmailUseToGetPayload<S extends boolean | null | undefined | OrgEmailUseToDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload, S>

export type OrgEmailUseToCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrgEmailUseToFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrgEmailUseToCountAggregateInputType | true
  }

export interface OrgEmailUseToDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrgEmailUseTo'], meta: { name: 'OrgEmailUseTo' } }
  /**
   * Find zero or one OrgEmailUseTo that matches the filter.
   * @param {OrgEmailUseToFindUniqueArgs} args - Arguments to find a OrgEmailUseTo
   * @example
   * // Get one OrgEmailUseTo
   * const orgEmailUseTo = await prisma.orgEmailUseTo.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrgEmailUseToFindUniqueArgs>(args: Prisma.SelectSubset<T, OrgEmailUseToFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrgEmailUseToClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OrgEmailUseTo that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrgEmailUseToFindUniqueOrThrowArgs} args - Arguments to find a OrgEmailUseTo
   * @example
   * // Get one OrgEmailUseTo
   * const orgEmailUseTo = await prisma.orgEmailUseTo.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrgEmailUseToFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrgEmailUseToFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrgEmailUseToClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrgEmailUseTo that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailUseToFindFirstArgs} args - Arguments to find a OrgEmailUseTo
   * @example
   * // Get one OrgEmailUseTo
   * const orgEmailUseTo = await prisma.orgEmailUseTo.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrgEmailUseToFindFirstArgs>(args?: Prisma.SelectSubset<T, OrgEmailUseToFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrgEmailUseToClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrgEmailUseTo that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailUseToFindFirstOrThrowArgs} args - Arguments to find a OrgEmailUseTo
   * @example
   * // Get one OrgEmailUseTo
   * const orgEmailUseTo = await prisma.orgEmailUseTo.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrgEmailUseToFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrgEmailUseToFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrgEmailUseToClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrgEmailUseTos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailUseToFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrgEmailUseTos
   * const orgEmailUseTos = await prisma.orgEmailUseTo.findMany()
   * 
   * // Get first 10 OrgEmailUseTos
   * const orgEmailUseTos = await prisma.orgEmailUseTo.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const orgEmailUseToWithIdOnly = await prisma.orgEmailUseTo.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrgEmailUseToFindManyArgs>(args?: Prisma.SelectSubset<T, OrgEmailUseToFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OrgEmailUseTo.
   * @param {OrgEmailUseToCreateArgs} args - Arguments to create a OrgEmailUseTo.
   * @example
   * // Create one OrgEmailUseTo
   * const OrgEmailUseTo = await prisma.orgEmailUseTo.create({
   *   data: {
   *     // ... data to create a OrgEmailUseTo
   *   }
   * })
   * 
   */
  create<T extends OrgEmailUseToCreateArgs>(args: Prisma.SelectSubset<T, OrgEmailUseToCreateArgs<ExtArgs>>): Prisma.Prisma__OrgEmailUseToClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OrgEmailUseTos.
   * @param {OrgEmailUseToCreateManyArgs} args - Arguments to create many OrgEmailUseTos.
   * @example
   * // Create many OrgEmailUseTos
   * const orgEmailUseTo = await prisma.orgEmailUseTo.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrgEmailUseToCreateManyArgs>(args?: Prisma.SelectSubset<T, OrgEmailUseToCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OrgEmailUseTos and returns the data saved in the database.
   * @param {OrgEmailUseToCreateManyAndReturnArgs} args - Arguments to create many OrgEmailUseTos.
   * @example
   * // Create many OrgEmailUseTos
   * const orgEmailUseTo = await prisma.orgEmailUseTo.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OrgEmailUseTos and only return the `id`
   * const orgEmailUseToWithIdOnly = await prisma.orgEmailUseTo.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrgEmailUseToCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrgEmailUseToCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OrgEmailUseTo.
   * @param {OrgEmailUseToDeleteArgs} args - Arguments to delete one OrgEmailUseTo.
   * @example
   * // Delete one OrgEmailUseTo
   * const OrgEmailUseTo = await prisma.orgEmailUseTo.delete({
   *   where: {
   *     // ... filter to delete one OrgEmailUseTo
   *   }
   * })
   * 
   */
  delete<T extends OrgEmailUseToDeleteArgs>(args: Prisma.SelectSubset<T, OrgEmailUseToDeleteArgs<ExtArgs>>): Prisma.Prisma__OrgEmailUseToClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OrgEmailUseTo.
   * @param {OrgEmailUseToUpdateArgs} args - Arguments to update one OrgEmailUseTo.
   * @example
   * // Update one OrgEmailUseTo
   * const orgEmailUseTo = await prisma.orgEmailUseTo.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrgEmailUseToUpdateArgs>(args: Prisma.SelectSubset<T, OrgEmailUseToUpdateArgs<ExtArgs>>): Prisma.Prisma__OrgEmailUseToClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OrgEmailUseTos.
   * @param {OrgEmailUseToDeleteManyArgs} args - Arguments to filter OrgEmailUseTos to delete.
   * @example
   * // Delete a few OrgEmailUseTos
   * const { count } = await prisma.orgEmailUseTo.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrgEmailUseToDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrgEmailUseToDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrgEmailUseTos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailUseToUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrgEmailUseTos
   * const orgEmailUseTo = await prisma.orgEmailUseTo.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrgEmailUseToUpdateManyArgs>(args: Prisma.SelectSubset<T, OrgEmailUseToUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrgEmailUseTos and returns the data updated in the database.
   * @param {OrgEmailUseToUpdateManyAndReturnArgs} args - Arguments to update many OrgEmailUseTos.
   * @example
   * // Update many OrgEmailUseTos
   * const orgEmailUseTo = await prisma.orgEmailUseTo.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OrgEmailUseTos and only return the `id`
   * const orgEmailUseToWithIdOnly = await prisma.orgEmailUseTo.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrgEmailUseToUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrgEmailUseToUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OrgEmailUseTo.
   * @param {OrgEmailUseToUpsertArgs} args - Arguments to update or create a OrgEmailUseTo.
   * @example
   * // Update or create a OrgEmailUseTo
   * const orgEmailUseTo = await prisma.orgEmailUseTo.upsert({
   *   create: {
   *     // ... data to create a OrgEmailUseTo
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrgEmailUseTo we want to update
   *   }
   * })
   */
  upsert<T extends OrgEmailUseToUpsertArgs>(args: Prisma.SelectSubset<T, OrgEmailUseToUpsertArgs<ExtArgs>>): Prisma.Prisma__OrgEmailUseToClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OrgEmailUseTos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailUseToCountArgs} args - Arguments to filter OrgEmailUseTos to count.
   * @example
   * // Count the number of OrgEmailUseTos
   * const count = await prisma.orgEmailUseTo.count({
   *   where: {
   *     // ... the filter for the OrgEmailUseTos we want to count
   *   }
   * })
  **/
  count<T extends OrgEmailUseToCountArgs>(
    args?: Prisma.Subset<T, OrgEmailUseToCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrgEmailUseToCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OrgEmailUseTo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailUseToAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrgEmailUseToAggregateArgs>(args: Prisma.Subset<T, OrgEmailUseToAggregateArgs>): Prisma.PrismaPromise<GetOrgEmailUseToAggregateType<T>>

  /**
   * Group by OrgEmailUseTo.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailUseToGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrgEmailUseToGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrgEmailUseToGroupByArgs['orderBy'] }
      : { orderBy?: OrgEmailUseToGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrgEmailUseToGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrgEmailUseToGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OrgEmailUseTo model
 */
readonly fields: OrgEmailUseToFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrgEmailUseTo.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrgEmailUseToClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  emailOrg<T extends Prisma.OrgEmailDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrgEmailDefaultArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OrgEmailUseTo model
 */
export interface OrgEmailUseToFieldRefs {
  readonly id: Prisma.FieldRef<"OrgEmailUseTo", 'Int'>
  readonly createdAt: Prisma.FieldRef<"OrgEmailUseTo", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"OrgEmailUseTo", 'DateTime'>
  readonly published: Prisma.FieldRef<"OrgEmailUseTo", 'Boolean'>
  readonly isPublic: Prisma.FieldRef<"OrgEmailUseTo", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"OrgEmailUseTo", 'Int'>
  readonly isDeletedDT: Prisma.FieldRef<"OrgEmailUseTo", 'DateTime'>
  readonly useTo: Prisma.FieldRef<"OrgEmailUseTo", 'String'>
  readonly isActiv: Prisma.FieldRef<"OrgEmailUseTo", 'Boolean'>
  readonly emailOrgId: Prisma.FieldRef<"OrgEmailUseTo", 'Int'>
}
    

// Custom InputTypes
/**
 * OrgEmailUseTo findUnique
 */
export type OrgEmailUseToFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmailUseTo to fetch.
   */
  where: Prisma.OrgEmailUseToWhereUniqueInput
}

/**
 * OrgEmailUseTo findUniqueOrThrow
 */
export type OrgEmailUseToFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmailUseTo to fetch.
   */
  where: Prisma.OrgEmailUseToWhereUniqueInput
}

/**
 * OrgEmailUseTo findFirst
 */
export type OrgEmailUseToFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmailUseTo to fetch.
   */
  where?: Prisma.OrgEmailUseToWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgEmailUseTos to fetch.
   */
  orderBy?: Prisma.OrgEmailUseToOrderByWithRelationInput | Prisma.OrgEmailUseToOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrgEmailUseTos.
   */
  cursor?: Prisma.OrgEmailUseToWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgEmailUseTos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgEmailUseTos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrgEmailUseTos.
   */
  distinct?: Prisma.OrgEmailUseToScalarFieldEnum | Prisma.OrgEmailUseToScalarFieldEnum[]
}

/**
 * OrgEmailUseTo findFirstOrThrow
 */
export type OrgEmailUseToFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmailUseTo to fetch.
   */
  where?: Prisma.OrgEmailUseToWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgEmailUseTos to fetch.
   */
  orderBy?: Prisma.OrgEmailUseToOrderByWithRelationInput | Prisma.OrgEmailUseToOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrgEmailUseTos.
   */
  cursor?: Prisma.OrgEmailUseToWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgEmailUseTos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgEmailUseTos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrgEmailUseTos.
   */
  distinct?: Prisma.OrgEmailUseToScalarFieldEnum | Prisma.OrgEmailUseToScalarFieldEnum[]
}

/**
 * OrgEmailUseTo findMany
 */
export type OrgEmailUseToFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmailUseTos to fetch.
   */
  where?: Prisma.OrgEmailUseToWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgEmailUseTos to fetch.
   */
  orderBy?: Prisma.OrgEmailUseToOrderByWithRelationInput | Prisma.OrgEmailUseToOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OrgEmailUseTos.
   */
  cursor?: Prisma.OrgEmailUseToWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgEmailUseTos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgEmailUseTos.
   */
  skip?: number
  distinct?: Prisma.OrgEmailUseToScalarFieldEnum | Prisma.OrgEmailUseToScalarFieldEnum[]
}

/**
 * OrgEmailUseTo create
 */
export type OrgEmailUseToCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * The data needed to create a OrgEmailUseTo.
   */
  data: Prisma.XOR<Prisma.OrgEmailUseToCreateInput, Prisma.OrgEmailUseToUncheckedCreateInput>
}

/**
 * OrgEmailUseTo createMany
 */
export type OrgEmailUseToCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OrgEmailUseTos.
   */
  data: Prisma.OrgEmailUseToCreateManyInput | Prisma.OrgEmailUseToCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * OrgEmailUseTo createManyAndReturn
 */
export type OrgEmailUseToCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * The data used to create many OrgEmailUseTos.
   */
  data: Prisma.OrgEmailUseToCreateManyInput | Prisma.OrgEmailUseToCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OrgEmailUseTo update
 */
export type OrgEmailUseToUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * The data needed to update a OrgEmailUseTo.
   */
  data: Prisma.XOR<Prisma.OrgEmailUseToUpdateInput, Prisma.OrgEmailUseToUncheckedUpdateInput>
  /**
   * Choose, which OrgEmailUseTo to update.
   */
  where: Prisma.OrgEmailUseToWhereUniqueInput
}

/**
 * OrgEmailUseTo updateMany
 */
export type OrgEmailUseToUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OrgEmailUseTos.
   */
  data: Prisma.XOR<Prisma.OrgEmailUseToUpdateManyMutationInput, Prisma.OrgEmailUseToUncheckedUpdateManyInput>
  /**
   * Filter which OrgEmailUseTos to update
   */
  where?: Prisma.OrgEmailUseToWhereInput
  /**
   * Limit how many OrgEmailUseTos to update.
   */
  limit?: number
}

/**
 * OrgEmailUseTo updateManyAndReturn
 */
export type OrgEmailUseToUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * The data used to update OrgEmailUseTos.
   */
  data: Prisma.XOR<Prisma.OrgEmailUseToUpdateManyMutationInput, Prisma.OrgEmailUseToUncheckedUpdateManyInput>
  /**
   * Filter which OrgEmailUseTos to update
   */
  where?: Prisma.OrgEmailUseToWhereInput
  /**
   * Limit how many OrgEmailUseTos to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OrgEmailUseTo upsert
 */
export type OrgEmailUseToUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * The filter to search for the OrgEmailUseTo to update in case it exists.
   */
  where: Prisma.OrgEmailUseToWhereUniqueInput
  /**
   * In case the OrgEmailUseTo found by the `where` argument doesn't exist, create a new OrgEmailUseTo with this data.
   */
  create: Prisma.XOR<Prisma.OrgEmailUseToCreateInput, Prisma.OrgEmailUseToUncheckedCreateInput>
  /**
   * In case the OrgEmailUseTo was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrgEmailUseToUpdateInput, Prisma.OrgEmailUseToUncheckedUpdateInput>
}

/**
 * OrgEmailUseTo delete
 */
export type OrgEmailUseToDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  /**
   * Filter which OrgEmailUseTo to delete.
   */
  where: Prisma.OrgEmailUseToWhereUniqueInput
}

/**
 * OrgEmailUseTo deleteMany
 */
export type OrgEmailUseToDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrgEmailUseTos to delete
   */
  where?: Prisma.OrgEmailUseToWhereInput
  /**
   * Limit how many OrgEmailUseTos to delete.
   */
  limit?: number
}

/**
 * OrgEmailUseTo without action
 */
export type OrgEmailUseToDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
}
