
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Scope` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Scope
 * 
 */
export type ScopeModel = runtime.Types.Result.DefaultSelection<Prisma.$ScopePayload>

export type AggregateScope = {
  _count: ScopeCountAggregateOutputType | null
  _avg: ScopeAvgAggregateOutputType | null
  _sum: ScopeSumAggregateOutputType | null
  _min: ScopeMinAggregateOutputType | null
  _max: ScopeMaxAggregateOutputType | null
}

export type ScopeAvgAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type ScopeSumAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type ScopeMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  scope: string | null
}

export type ScopeMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  scope: string | null
}

export type ScopeCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  published: number
  isPublic: number
  isDeleted: number
  isDeletedDT: number
  scope: number
  _all: number
}


export type ScopeAvgAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type ScopeSumAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type ScopeMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  scope?: true
}

export type ScopeMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  scope?: true
}

export type ScopeCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  scope?: true
  _all?: true
}

export type ScopeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Scope to aggregate.
   */
  where?: Prisma.ScopeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scopes to fetch.
   */
  orderBy?: Prisma.ScopeOrderByWithRelationInput | Prisma.ScopeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ScopeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scopes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scopes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Scopes
  **/
  _count?: true | ScopeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ScopeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ScopeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ScopeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ScopeMaxAggregateInputType
}

export type GetScopeAggregateType<T extends ScopeAggregateArgs> = {
      [P in keyof T & keyof AggregateScope]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateScope[P]>
    : Prisma.GetScalarType<T[P], AggregateScope[P]>
}




export type ScopeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ScopeWhereInput
  orderBy?: Prisma.ScopeOrderByWithAggregationInput | Prisma.ScopeOrderByWithAggregationInput[]
  by: Prisma.ScopeScalarFieldEnum[] | Prisma.ScopeScalarFieldEnum
  having?: Prisma.ScopeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ScopeCountAggregateInputType | true
  _avg?: ScopeAvgAggregateInputType
  _sum?: ScopeSumAggregateInputType
  _min?: ScopeMinAggregateInputType
  _max?: ScopeMaxAggregateInputType
}

export type ScopeGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  published: boolean
  isPublic: boolean
  isDeleted: number
  isDeletedDT: Date | null
  scope: string
  _count: ScopeCountAggregateOutputType | null
  _avg: ScopeAvgAggregateOutputType | null
  _sum: ScopeSumAggregateOutputType | null
  _min: ScopeMinAggregateOutputType | null
  _max: ScopeMaxAggregateOutputType | null
}

type GetScopeGroupByPayload<T extends ScopeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ScopeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ScopeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ScopeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ScopeGroupByOutputType[P]>
      }
    >
  >



export type ScopeWhereInput = {
  AND?: Prisma.ScopeWhereInput | Prisma.ScopeWhereInput[]
  OR?: Prisma.ScopeWhereInput[]
  NOT?: Prisma.ScopeWhereInput | Prisma.ScopeWhereInput[]
  id?: Prisma.IntFilter<"Scope"> | number
  createdAt?: Prisma.DateTimeFilter<"Scope"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Scope"> | Date | string
  published?: Prisma.BoolFilter<"Scope"> | boolean
  isPublic?: Prisma.BoolFilter<"Scope"> | boolean
  isDeleted?: Prisma.IntFilter<"Scope"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"Scope"> | Date | string | null
  scope?: Prisma.StringFilter<"Scope"> | string
  ApiKey?: Prisma.ApiKeyListRelationFilter
}

export type ScopeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  scope?: Prisma.SortOrder
  ApiKey?: Prisma.ApiKeyOrderByRelationAggregateInput
}

export type ScopeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ScopeWhereInput | Prisma.ScopeWhereInput[]
  OR?: Prisma.ScopeWhereInput[]
  NOT?: Prisma.ScopeWhereInput | Prisma.ScopeWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Scope"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Scope"> | Date | string
  published?: Prisma.BoolFilter<"Scope"> | boolean
  isPublic?: Prisma.BoolFilter<"Scope"> | boolean
  isDeleted?: Prisma.IntFilter<"Scope"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"Scope"> | Date | string | null
  scope?: Prisma.StringFilter<"Scope"> | string
  ApiKey?: Prisma.ApiKeyListRelationFilter
}, "id">

export type ScopeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  scope?: Prisma.SortOrder
  _count?: Prisma.ScopeCountOrderByAggregateInput
  _avg?: Prisma.ScopeAvgOrderByAggregateInput
  _max?: Prisma.ScopeMaxOrderByAggregateInput
  _min?: Prisma.ScopeMinOrderByAggregateInput
  _sum?: Prisma.ScopeSumOrderByAggregateInput
}

export type ScopeScalarWhereWithAggregatesInput = {
  AND?: Prisma.ScopeScalarWhereWithAggregatesInput | Prisma.ScopeScalarWhereWithAggregatesInput[]
  OR?: Prisma.ScopeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ScopeScalarWhereWithAggregatesInput | Prisma.ScopeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Scope"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Scope"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Scope"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"Scope"> | boolean
  isPublic?: Prisma.BoolWithAggregatesFilter<"Scope"> | boolean
  isDeleted?: Prisma.IntWithAggregatesFilter<"Scope"> | number
  isDeletedDT?: Prisma.DateTimeNullableWithAggregatesFilter<"Scope"> | Date | string | null
  scope?: Prisma.StringWithAggregatesFilter<"Scope"> | string
}

export type ScopeCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  scope: string
  ApiKey?: Prisma.ApiKeyCreateNestedManyWithoutScopesInput
}

export type ScopeUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  scope: string
  ApiKey?: Prisma.ApiKeyUncheckedCreateNestedManyWithoutScopesInput
}

export type ScopeUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  scope?: Prisma.StringFieldUpdateOperationsInput | string
  ApiKey?: Prisma.ApiKeyUpdateManyWithoutScopesNestedInput
}

export type ScopeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  scope?: Prisma.StringFieldUpdateOperationsInput | string
  ApiKey?: Prisma.ApiKeyUncheckedUpdateManyWithoutScopesNestedInput
}

export type ScopeCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  scope: string
}

export type ScopeUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  scope?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ScopeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  scope?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ScopeListRelationFilter = {
  every?: Prisma.ScopeWhereInput
  some?: Prisma.ScopeWhereInput
  none?: Prisma.ScopeWhereInput
}

export type ScopeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ScopeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  scope?: Prisma.SortOrder
}

export type ScopeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type ScopeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  scope?: Prisma.SortOrder
}

export type ScopeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  scope?: Prisma.SortOrder
}

export type ScopeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type ScopeCreateNestedManyWithoutApiKeyInput = {
  create?: Prisma.XOR<Prisma.ScopeCreateWithoutApiKeyInput, Prisma.ScopeUncheckedCreateWithoutApiKeyInput> | Prisma.ScopeCreateWithoutApiKeyInput[] | Prisma.ScopeUncheckedCreateWithoutApiKeyInput[]
  connectOrCreate?: Prisma.ScopeCreateOrConnectWithoutApiKeyInput | Prisma.ScopeCreateOrConnectWithoutApiKeyInput[]
  connect?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
}

export type ScopeUncheckedCreateNestedManyWithoutApiKeyInput = {
  create?: Prisma.XOR<Prisma.ScopeCreateWithoutApiKeyInput, Prisma.ScopeUncheckedCreateWithoutApiKeyInput> | Prisma.ScopeCreateWithoutApiKeyInput[] | Prisma.ScopeUncheckedCreateWithoutApiKeyInput[]
  connectOrCreate?: Prisma.ScopeCreateOrConnectWithoutApiKeyInput | Prisma.ScopeCreateOrConnectWithoutApiKeyInput[]
  connect?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
}

export type ScopeUpdateManyWithoutApiKeyNestedInput = {
  create?: Prisma.XOR<Prisma.ScopeCreateWithoutApiKeyInput, Prisma.ScopeUncheckedCreateWithoutApiKeyInput> | Prisma.ScopeCreateWithoutApiKeyInput[] | Prisma.ScopeUncheckedCreateWithoutApiKeyInput[]
  connectOrCreate?: Prisma.ScopeCreateOrConnectWithoutApiKeyInput | Prisma.ScopeCreateOrConnectWithoutApiKeyInput[]
  upsert?: Prisma.ScopeUpsertWithWhereUniqueWithoutApiKeyInput | Prisma.ScopeUpsertWithWhereUniqueWithoutApiKeyInput[]
  set?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
  disconnect?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
  delete?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
  connect?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
  update?: Prisma.ScopeUpdateWithWhereUniqueWithoutApiKeyInput | Prisma.ScopeUpdateWithWhereUniqueWithoutApiKeyInput[]
  updateMany?: Prisma.ScopeUpdateManyWithWhereWithoutApiKeyInput | Prisma.ScopeUpdateManyWithWhereWithoutApiKeyInput[]
  deleteMany?: Prisma.ScopeScalarWhereInput | Prisma.ScopeScalarWhereInput[]
}

export type ScopeUncheckedUpdateManyWithoutApiKeyNestedInput = {
  create?: Prisma.XOR<Prisma.ScopeCreateWithoutApiKeyInput, Prisma.ScopeUncheckedCreateWithoutApiKeyInput> | Prisma.ScopeCreateWithoutApiKeyInput[] | Prisma.ScopeUncheckedCreateWithoutApiKeyInput[]
  connectOrCreate?: Prisma.ScopeCreateOrConnectWithoutApiKeyInput | Prisma.ScopeCreateOrConnectWithoutApiKeyInput[]
  upsert?: Prisma.ScopeUpsertWithWhereUniqueWithoutApiKeyInput | Prisma.ScopeUpsertWithWhereUniqueWithoutApiKeyInput[]
  set?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
  disconnect?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
  delete?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
  connect?: Prisma.ScopeWhereUniqueInput | Prisma.ScopeWhereUniqueInput[]
  update?: Prisma.ScopeUpdateWithWhereUniqueWithoutApiKeyInput | Prisma.ScopeUpdateWithWhereUniqueWithoutApiKeyInput[]
  updateMany?: Prisma.ScopeUpdateManyWithWhereWithoutApiKeyInput | Prisma.ScopeUpdateManyWithWhereWithoutApiKeyInput[]
  deleteMany?: Prisma.ScopeScalarWhereInput | Prisma.ScopeScalarWhereInput[]
}

export type ScopeCreateWithoutApiKeyInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  scope: string
}

export type ScopeUncheckedCreateWithoutApiKeyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  scope: string
}

export type ScopeCreateOrConnectWithoutApiKeyInput = {
  where: Prisma.ScopeWhereUniqueInput
  create: Prisma.XOR<Prisma.ScopeCreateWithoutApiKeyInput, Prisma.ScopeUncheckedCreateWithoutApiKeyInput>
}

export type ScopeUpsertWithWhereUniqueWithoutApiKeyInput = {
  where: Prisma.ScopeWhereUniqueInput
  update: Prisma.XOR<Prisma.ScopeUpdateWithoutApiKeyInput, Prisma.ScopeUncheckedUpdateWithoutApiKeyInput>
  create: Prisma.XOR<Prisma.ScopeCreateWithoutApiKeyInput, Prisma.ScopeUncheckedCreateWithoutApiKeyInput>
}

export type ScopeUpdateWithWhereUniqueWithoutApiKeyInput = {
  where: Prisma.ScopeWhereUniqueInput
  data: Prisma.XOR<Prisma.ScopeUpdateWithoutApiKeyInput, Prisma.ScopeUncheckedUpdateWithoutApiKeyInput>
}

export type ScopeUpdateManyWithWhereWithoutApiKeyInput = {
  where: Prisma.ScopeScalarWhereInput
  data: Prisma.XOR<Prisma.ScopeUpdateManyMutationInput, Prisma.ScopeUncheckedUpdateManyWithoutApiKeyInput>
}

export type ScopeScalarWhereInput = {
  AND?: Prisma.ScopeScalarWhereInput | Prisma.ScopeScalarWhereInput[]
  OR?: Prisma.ScopeScalarWhereInput[]
  NOT?: Prisma.ScopeScalarWhereInput | Prisma.ScopeScalarWhereInput[]
  id?: Prisma.IntFilter<"Scope"> | number
  createdAt?: Prisma.DateTimeFilter<"Scope"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Scope"> | Date | string
  published?: Prisma.BoolFilter<"Scope"> | boolean
  isPublic?: Prisma.BoolFilter<"Scope"> | boolean
  isDeleted?: Prisma.IntFilter<"Scope"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"Scope"> | Date | string | null
  scope?: Prisma.StringFilter<"Scope"> | string
}

export type ScopeUpdateWithoutApiKeyInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  scope?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ScopeUncheckedUpdateWithoutApiKeyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  scope?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ScopeUncheckedUpdateManyWithoutApiKeyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  scope?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type ScopeCountOutputType
 */

export type ScopeCountOutputType = {
  ApiKey: number
}

export type ScopeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ApiKey?: boolean | ScopeCountOutputTypeCountApiKeyArgs
}

/**
 * ScopeCountOutputType without action
 */
export type ScopeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ScopeCountOutputType
   */
  select?: Prisma.ScopeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ScopeCountOutputType without action
 */
export type ScopeCountOutputTypeCountApiKeyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ApiKeyWhereInput
}


export type ScopeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  scope?: boolean
  ApiKey?: boolean | Prisma.Scope$ApiKeyArgs<ExtArgs>
  _count?: boolean | Prisma.ScopeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["scope"]>

export type ScopeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  scope?: boolean
}, ExtArgs["result"]["scope"]>

export type ScopeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  scope?: boolean
}, ExtArgs["result"]["scope"]>

export type ScopeSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  scope?: boolean
}

export type ScopeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "published" | "isPublic" | "isDeleted" | "isDeletedDT" | "scope", ExtArgs["result"]["scope"]>
export type ScopeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ApiKey?: boolean | Prisma.Scope$ApiKeyArgs<ExtArgs>
  _count?: boolean | Prisma.ScopeCountOutputTypeDefaultArgs<ExtArgs>
}
export type ScopeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ScopeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ScopePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Scope"
  objects: {
    ApiKey: Prisma.$ApiKeyPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    published: boolean
    isPublic: boolean
    isDeleted: number
    isDeletedDT: Date | null
    scope: string
  }, ExtArgs["result"]["scope"]>
  composites: {}
}

export type ScopeGetPayload<S extends boolean | null | undefined | ScopeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ScopePayload, S>

export type ScopeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ScopeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ScopeCountAggregateInputType | true
  }

export interface ScopeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Scope'], meta: { name: 'Scope' } }
  /**
   * Find zero or one Scope that matches the filter.
   * @param {ScopeFindUniqueArgs} args - Arguments to find a Scope
   * @example
   * // Get one Scope
   * const scope = await prisma.scope.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ScopeFindUniqueArgs>(args: Prisma.SelectSubset<T, ScopeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ScopeClient<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Scope that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ScopeFindUniqueOrThrowArgs} args - Arguments to find a Scope
   * @example
   * // Get one Scope
   * const scope = await prisma.scope.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ScopeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ScopeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScopeClient<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Scope that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScopeFindFirstArgs} args - Arguments to find a Scope
   * @example
   * // Get one Scope
   * const scope = await prisma.scope.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ScopeFindFirstArgs>(args?: Prisma.SelectSubset<T, ScopeFindFirstArgs<ExtArgs>>): Prisma.Prisma__ScopeClient<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Scope that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScopeFindFirstOrThrowArgs} args - Arguments to find a Scope
   * @example
   * // Get one Scope
   * const scope = await prisma.scope.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ScopeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ScopeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ScopeClient<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Scopes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScopeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Scopes
   * const scopes = await prisma.scope.findMany()
   * 
   * // Get first 10 Scopes
   * const scopes = await prisma.scope.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const scopeWithIdOnly = await prisma.scope.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ScopeFindManyArgs>(args?: Prisma.SelectSubset<T, ScopeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Scope.
   * @param {ScopeCreateArgs} args - Arguments to create a Scope.
   * @example
   * // Create one Scope
   * const Scope = await prisma.scope.create({
   *   data: {
   *     // ... data to create a Scope
   *   }
   * })
   * 
   */
  create<T extends ScopeCreateArgs>(args: Prisma.SelectSubset<T, ScopeCreateArgs<ExtArgs>>): Prisma.Prisma__ScopeClient<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Scopes.
   * @param {ScopeCreateManyArgs} args - Arguments to create many Scopes.
   * @example
   * // Create many Scopes
   * const scope = await prisma.scope.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ScopeCreateManyArgs>(args?: Prisma.SelectSubset<T, ScopeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Scopes and returns the data saved in the database.
   * @param {ScopeCreateManyAndReturnArgs} args - Arguments to create many Scopes.
   * @example
   * // Create many Scopes
   * const scope = await prisma.scope.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Scopes and only return the `id`
   * const scopeWithIdOnly = await prisma.scope.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ScopeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ScopeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Scope.
   * @param {ScopeDeleteArgs} args - Arguments to delete one Scope.
   * @example
   * // Delete one Scope
   * const Scope = await prisma.scope.delete({
   *   where: {
   *     // ... filter to delete one Scope
   *   }
   * })
   * 
   */
  delete<T extends ScopeDeleteArgs>(args: Prisma.SelectSubset<T, ScopeDeleteArgs<ExtArgs>>): Prisma.Prisma__ScopeClient<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Scope.
   * @param {ScopeUpdateArgs} args - Arguments to update one Scope.
   * @example
   * // Update one Scope
   * const scope = await prisma.scope.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ScopeUpdateArgs>(args: Prisma.SelectSubset<T, ScopeUpdateArgs<ExtArgs>>): Prisma.Prisma__ScopeClient<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Scopes.
   * @param {ScopeDeleteManyArgs} args - Arguments to filter Scopes to delete.
   * @example
   * // Delete a few Scopes
   * const { count } = await prisma.scope.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ScopeDeleteManyArgs>(args?: Prisma.SelectSubset<T, ScopeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Scopes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScopeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Scopes
   * const scope = await prisma.scope.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ScopeUpdateManyArgs>(args: Prisma.SelectSubset<T, ScopeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Scopes and returns the data updated in the database.
   * @param {ScopeUpdateManyAndReturnArgs} args - Arguments to update many Scopes.
   * @example
   * // Update many Scopes
   * const scope = await prisma.scope.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Scopes and only return the `id`
   * const scopeWithIdOnly = await prisma.scope.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ScopeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ScopeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Scope.
   * @param {ScopeUpsertArgs} args - Arguments to update or create a Scope.
   * @example
   * // Update or create a Scope
   * const scope = await prisma.scope.upsert({
   *   create: {
   *     // ... data to create a Scope
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Scope we want to update
   *   }
   * })
   */
  upsert<T extends ScopeUpsertArgs>(args: Prisma.SelectSubset<T, ScopeUpsertArgs<ExtArgs>>): Prisma.Prisma__ScopeClient<runtime.Types.Result.GetResult<Prisma.$ScopePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Scopes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScopeCountArgs} args - Arguments to filter Scopes to count.
   * @example
   * // Count the number of Scopes
   * const count = await prisma.scope.count({
   *   where: {
   *     // ... the filter for the Scopes we want to count
   *   }
   * })
  **/
  count<T extends ScopeCountArgs>(
    args?: Prisma.Subset<T, ScopeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ScopeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Scope.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScopeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ScopeAggregateArgs>(args: Prisma.Subset<T, ScopeAggregateArgs>): Prisma.PrismaPromise<GetScopeAggregateType<T>>

  /**
   * Group by Scope.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ScopeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ScopeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ScopeGroupByArgs['orderBy'] }
      : { orderBy?: ScopeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ScopeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScopeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Scope model
 */
readonly fields: ScopeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Scope.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ScopeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ApiKey<T extends Prisma.Scope$ApiKeyArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Scope$ApiKeyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Scope model
 */
export interface ScopeFieldRefs {
  readonly id: Prisma.FieldRef<"Scope", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Scope", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Scope", 'DateTime'>
  readonly published: Prisma.FieldRef<"Scope", 'Boolean'>
  readonly isPublic: Prisma.FieldRef<"Scope", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"Scope", 'Int'>
  readonly isDeletedDT: Prisma.FieldRef<"Scope", 'DateTime'>
  readonly scope: Prisma.FieldRef<"Scope", 'String'>
}
    

// Custom InputTypes
/**
 * Scope findUnique
 */
export type ScopeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * Filter, which Scope to fetch.
   */
  where: Prisma.ScopeWhereUniqueInput
}

/**
 * Scope findUniqueOrThrow
 */
export type ScopeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * Filter, which Scope to fetch.
   */
  where: Prisma.ScopeWhereUniqueInput
}

/**
 * Scope findFirst
 */
export type ScopeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * Filter, which Scope to fetch.
   */
  where?: Prisma.ScopeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scopes to fetch.
   */
  orderBy?: Prisma.ScopeOrderByWithRelationInput | Prisma.ScopeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Scopes.
   */
  cursor?: Prisma.ScopeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scopes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scopes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Scopes.
   */
  distinct?: Prisma.ScopeScalarFieldEnum | Prisma.ScopeScalarFieldEnum[]
}

/**
 * Scope findFirstOrThrow
 */
export type ScopeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * Filter, which Scope to fetch.
   */
  where?: Prisma.ScopeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scopes to fetch.
   */
  orderBy?: Prisma.ScopeOrderByWithRelationInput | Prisma.ScopeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Scopes.
   */
  cursor?: Prisma.ScopeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scopes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scopes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Scopes.
   */
  distinct?: Prisma.ScopeScalarFieldEnum | Prisma.ScopeScalarFieldEnum[]
}

/**
 * Scope findMany
 */
export type ScopeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * Filter, which Scopes to fetch.
   */
  where?: Prisma.ScopeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Scopes to fetch.
   */
  orderBy?: Prisma.ScopeOrderByWithRelationInput | Prisma.ScopeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Scopes.
   */
  cursor?: Prisma.ScopeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Scopes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Scopes.
   */
  skip?: number
  distinct?: Prisma.ScopeScalarFieldEnum | Prisma.ScopeScalarFieldEnum[]
}

/**
 * Scope create
 */
export type ScopeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * The data needed to create a Scope.
   */
  data: Prisma.XOR<Prisma.ScopeCreateInput, Prisma.ScopeUncheckedCreateInput>
}

/**
 * Scope createMany
 */
export type ScopeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Scopes.
   */
  data: Prisma.ScopeCreateManyInput | Prisma.ScopeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Scope createManyAndReturn
 */
export type ScopeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * The data used to create many Scopes.
   */
  data: Prisma.ScopeCreateManyInput | Prisma.ScopeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Scope update
 */
export type ScopeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * The data needed to update a Scope.
   */
  data: Prisma.XOR<Prisma.ScopeUpdateInput, Prisma.ScopeUncheckedUpdateInput>
  /**
   * Choose, which Scope to update.
   */
  where: Prisma.ScopeWhereUniqueInput
}

/**
 * Scope updateMany
 */
export type ScopeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Scopes.
   */
  data: Prisma.XOR<Prisma.ScopeUpdateManyMutationInput, Prisma.ScopeUncheckedUpdateManyInput>
  /**
   * Filter which Scopes to update
   */
  where?: Prisma.ScopeWhereInput
  /**
   * Limit how many Scopes to update.
   */
  limit?: number
}

/**
 * Scope updateManyAndReturn
 */
export type ScopeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * The data used to update Scopes.
   */
  data: Prisma.XOR<Prisma.ScopeUpdateManyMutationInput, Prisma.ScopeUncheckedUpdateManyInput>
  /**
   * Filter which Scopes to update
   */
  where?: Prisma.ScopeWhereInput
  /**
   * Limit how many Scopes to update.
   */
  limit?: number
}

/**
 * Scope upsert
 */
export type ScopeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * The filter to search for the Scope to update in case it exists.
   */
  where: Prisma.ScopeWhereUniqueInput
  /**
   * In case the Scope found by the `where` argument doesn't exist, create a new Scope with this data.
   */
  create: Prisma.XOR<Prisma.ScopeCreateInput, Prisma.ScopeUncheckedCreateInput>
  /**
   * In case the Scope was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ScopeUpdateInput, Prisma.ScopeUncheckedUpdateInput>
}

/**
 * Scope delete
 */
export type ScopeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
  /**
   * Filter which Scope to delete.
   */
  where: Prisma.ScopeWhereUniqueInput
}

/**
 * Scope deleteMany
 */
export type ScopeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Scopes to delete
   */
  where?: Prisma.ScopeWhereInput
  /**
   * Limit how many Scopes to delete.
   */
  limit?: number
}

/**
 * Scope.ApiKey
 */
export type Scope$ApiKeyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ApiKey
   */
  select?: Prisma.ApiKeySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ApiKey
   */
  omit?: Prisma.ApiKeyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ApiKeyInclude<ExtArgs> | null
  where?: Prisma.ApiKeyWhereInput
  orderBy?: Prisma.ApiKeyOrderByWithRelationInput | Prisma.ApiKeyOrderByWithRelationInput[]
  cursor?: Prisma.ApiKeyWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ApiKeyScalarFieldEnum | Prisma.ApiKeyScalarFieldEnum[]
}

/**
 * Scope without action
 */
export type ScopeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Scope
   */
  select?: Prisma.ScopeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Scope
   */
  omit?: Prisma.ScopeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ScopeInclude<ExtArgs> | null
}
