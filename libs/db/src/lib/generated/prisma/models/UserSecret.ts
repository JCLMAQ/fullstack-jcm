
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserSecret` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model UserSecret
 * 
 */
export type UserSecretModel = runtime.Types.Result.DefaultSelection<Prisma.$UserSecretPayload>

export type AggregateUserSecret = {
  _count: UserSecretCountAggregateOutputType | null
  _avg: UserSecretAvgAggregateOutputType | null
  _sum: UserSecretSumAggregateOutputType | null
  _min: UserSecretMinAggregateOutputType | null
  _max: UserSecretMaxAggregateOutputType | null
}

export type UserSecretAvgAggregateOutputType = {
  id: number | null
}

export type UserSecretSumAggregateOutputType = {
  id: number | null
}

export type UserSecretMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  pwdHash: string | null
  salt: string | null
  isAdmin: boolean | null
}

export type UserSecretMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  pwdHash: string | null
  salt: string | null
  isAdmin: boolean | null
}

export type UserSecretCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  userId: number
  pwdHash: number
  salt: number
  isAdmin: number
  _all: number
}


export type UserSecretAvgAggregateInputType = {
  id?: true
}

export type UserSecretSumAggregateInputType = {
  id?: true
}

export type UserSecretMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  pwdHash?: true
  salt?: true
  isAdmin?: true
}

export type UserSecretMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  pwdHash?: true
  salt?: true
  isAdmin?: true
}

export type UserSecretCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  pwdHash?: true
  salt?: true
  isAdmin?: true
  _all?: true
}

export type UserSecretAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserSecret to aggregate.
   */
  where?: Prisma.UserSecretWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSecrets to fetch.
   */
  orderBy?: Prisma.UserSecretOrderByWithRelationInput | Prisma.UserSecretOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserSecretWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSecrets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSecrets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserSecrets
  **/
  _count?: true | UserSecretCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserSecretAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserSecretSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserSecretMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserSecretMaxAggregateInputType
}

export type GetUserSecretAggregateType<T extends UserSecretAggregateArgs> = {
      [P in keyof T & keyof AggregateUserSecret]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserSecret[P]>
    : Prisma.GetScalarType<T[P], AggregateUserSecret[P]>
}




export type UserSecretGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserSecretWhereInput
  orderBy?: Prisma.UserSecretOrderByWithAggregationInput | Prisma.UserSecretOrderByWithAggregationInput[]
  by: Prisma.UserSecretScalarFieldEnum[] | Prisma.UserSecretScalarFieldEnum
  having?: Prisma.UserSecretScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserSecretCountAggregateInputType | true
  _avg?: UserSecretAvgAggregateInputType
  _sum?: UserSecretSumAggregateInputType
  _min?: UserSecretMinAggregateInputType
  _max?: UserSecretMaxAggregateInputType
}

export type UserSecretGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  userId: string
  pwdHash: string | null
  salt: string | null
  isAdmin: boolean | null
  _count: UserSecretCountAggregateOutputType | null
  _avg: UserSecretAvgAggregateOutputType | null
  _sum: UserSecretSumAggregateOutputType | null
  _min: UserSecretMinAggregateOutputType | null
  _max: UserSecretMaxAggregateOutputType | null
}

type GetUserSecretGroupByPayload<T extends UserSecretGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserSecretGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserSecretGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserSecretGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserSecretGroupByOutputType[P]>
      }
    >
  >



export type UserSecretWhereInput = {
  AND?: Prisma.UserSecretWhereInput | Prisma.UserSecretWhereInput[]
  OR?: Prisma.UserSecretWhereInput[]
  NOT?: Prisma.UserSecretWhereInput | Prisma.UserSecretWhereInput[]
  id?: Prisma.IntFilter<"UserSecret"> | number
  createdAt?: Prisma.DateTimeFilter<"UserSecret"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserSecret"> | Date | string
  userId?: Prisma.StringFilter<"UserSecret"> | string
  pwdHash?: Prisma.StringNullableFilter<"UserSecret"> | string | null
  salt?: Prisma.StringNullableFilter<"UserSecret"> | string | null
  isAdmin?: Prisma.BoolNullableFilter<"UserSecret"> | boolean | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type UserSecretOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  pwdHash?: Prisma.SortOrderInput | Prisma.SortOrder
  salt?: Prisma.SortOrderInput | Prisma.SortOrder
  isAdmin?: Prisma.SortOrderInput | Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type UserSecretWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId?: string
  AND?: Prisma.UserSecretWhereInput | Prisma.UserSecretWhereInput[]
  OR?: Prisma.UserSecretWhereInput[]
  NOT?: Prisma.UserSecretWhereInput | Prisma.UserSecretWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"UserSecret"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserSecret"> | Date | string
  pwdHash?: Prisma.StringNullableFilter<"UserSecret"> | string | null
  salt?: Prisma.StringNullableFilter<"UserSecret"> | string | null
  isAdmin?: Prisma.BoolNullableFilter<"UserSecret"> | boolean | null
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type UserSecretOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  pwdHash?: Prisma.SortOrderInput | Prisma.SortOrder
  salt?: Prisma.SortOrderInput | Prisma.SortOrder
  isAdmin?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.UserSecretCountOrderByAggregateInput
  _avg?: Prisma.UserSecretAvgOrderByAggregateInput
  _max?: Prisma.UserSecretMaxOrderByAggregateInput
  _min?: Prisma.UserSecretMinOrderByAggregateInput
  _sum?: Prisma.UserSecretSumOrderByAggregateInput
}

export type UserSecretScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserSecretScalarWhereWithAggregatesInput | Prisma.UserSecretScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserSecretScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserSecretScalarWhereWithAggregatesInput | Prisma.UserSecretScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UserSecret"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserSecret"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserSecret"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"UserSecret"> | string
  pwdHash?: Prisma.StringNullableWithAggregatesFilter<"UserSecret"> | string | null
  salt?: Prisma.StringNullableWithAggregatesFilter<"UserSecret"> | string | null
  isAdmin?: Prisma.BoolNullableWithAggregatesFilter<"UserSecret"> | boolean | null
}

export type UserSecretCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  pwdHash?: string | null
  salt?: string | null
  isAdmin?: boolean | null
  user: Prisma.UserCreateNestedOneWithoutUserSecretInput
}

export type UserSecretUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  pwdHash?: string | null
  salt?: string | null
  isAdmin?: boolean | null
}

export type UserSecretUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pwdHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isAdmin?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  user?: Prisma.UserUpdateOneRequiredWithoutUserSecretNestedInput
}

export type UserSecretUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  pwdHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isAdmin?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type UserSecretCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  pwdHash?: string | null
  salt?: string | null
  isAdmin?: boolean | null
}

export type UserSecretUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pwdHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isAdmin?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type UserSecretUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  pwdHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isAdmin?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type UserSecretNullableScalarRelationFilter = {
  is?: Prisma.UserSecretWhereInput | null
  isNot?: Prisma.UserSecretWhereInput | null
}

export type UserSecretCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  pwdHash?: Prisma.SortOrder
  salt?: Prisma.SortOrder
  isAdmin?: Prisma.SortOrder
}

export type UserSecretAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type UserSecretMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  pwdHash?: Prisma.SortOrder
  salt?: Prisma.SortOrder
  isAdmin?: Prisma.SortOrder
}

export type UserSecretMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  pwdHash?: Prisma.SortOrder
  salt?: Prisma.SortOrder
  isAdmin?: Prisma.SortOrder
}

export type UserSecretSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type UserSecretCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserSecretCreateWithoutUserInput, Prisma.UserSecretUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserSecretCreateOrConnectWithoutUserInput
  connect?: Prisma.UserSecretWhereUniqueInput
}

export type UserSecretUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserSecretCreateWithoutUserInput, Prisma.UserSecretUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserSecretCreateOrConnectWithoutUserInput
  connect?: Prisma.UserSecretWhereUniqueInput
}

export type UserSecretUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserSecretCreateWithoutUserInput, Prisma.UserSecretUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserSecretCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserSecretUpsertWithoutUserInput
  disconnect?: Prisma.UserSecretWhereInput | boolean
  delete?: Prisma.UserSecretWhereInput | boolean
  connect?: Prisma.UserSecretWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserSecretUpdateToOneWithWhereWithoutUserInput, Prisma.UserSecretUpdateWithoutUserInput>, Prisma.UserSecretUncheckedUpdateWithoutUserInput>
}

export type UserSecretUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserSecretCreateWithoutUserInput, Prisma.UserSecretUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserSecretCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserSecretUpsertWithoutUserInput
  disconnect?: Prisma.UserSecretWhereInput | boolean
  delete?: Prisma.UserSecretWhereInput | boolean
  connect?: Prisma.UserSecretWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserSecretUpdateToOneWithWhereWithoutUserInput, Prisma.UserSecretUpdateWithoutUserInput>, Prisma.UserSecretUncheckedUpdateWithoutUserInput>
}

export type UserSecretCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  pwdHash?: string | null
  salt?: string | null
  isAdmin?: boolean | null
}

export type UserSecretUncheckedCreateWithoutUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  pwdHash?: string | null
  salt?: string | null
  isAdmin?: boolean | null
}

export type UserSecretCreateOrConnectWithoutUserInput = {
  where: Prisma.UserSecretWhereUniqueInput
  create: Prisma.XOR<Prisma.UserSecretCreateWithoutUserInput, Prisma.UserSecretUncheckedCreateWithoutUserInput>
}

export type UserSecretUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserSecretUpdateWithoutUserInput, Prisma.UserSecretUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserSecretCreateWithoutUserInput, Prisma.UserSecretUncheckedCreateWithoutUserInput>
  where?: Prisma.UserSecretWhereInput
}

export type UserSecretUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserSecretWhereInput
  data: Prisma.XOR<Prisma.UserSecretUpdateWithoutUserInput, Prisma.UserSecretUncheckedUpdateWithoutUserInput>
}

export type UserSecretUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pwdHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isAdmin?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type UserSecretUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  pwdHash?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  salt?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isAdmin?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}



export type UserSecretSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  pwdHash?: boolean
  salt?: boolean
  isAdmin?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSecret"]>

export type UserSecretSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  pwdHash?: boolean
  salt?: boolean
  isAdmin?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSecret"]>

export type UserSecretSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  pwdHash?: boolean
  salt?: boolean
  isAdmin?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userSecret"]>

export type UserSecretSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  pwdHash?: boolean
  salt?: boolean
  isAdmin?: boolean
}

export type UserSecretOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "userId" | "pwdHash" | "salt" | "isAdmin", ExtArgs["result"]["userSecret"]>
export type UserSecretInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserSecretIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type UserSecretIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $UserSecretPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserSecret"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    userId: string
    pwdHash: string | null
    salt: string | null
    isAdmin: boolean | null
  }, ExtArgs["result"]["userSecret"]>
  composites: {}
}

export type UserSecretGetPayload<S extends boolean | null | undefined | UserSecretDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserSecretPayload, S>

export type UserSecretCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserSecretFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserSecretCountAggregateInputType | true
  }

export interface UserSecretDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSecret'], meta: { name: 'UserSecret' } }
  /**
   * Find zero or one UserSecret that matches the filter.
   * @param {UserSecretFindUniqueArgs} args - Arguments to find a UserSecret
   * @example
   * // Get one UserSecret
   * const userSecret = await prisma.userSecret.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserSecretFindUniqueArgs>(args: Prisma.SelectSubset<T, UserSecretFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserSecretClient<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserSecret that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserSecretFindUniqueOrThrowArgs} args - Arguments to find a UserSecret
   * @example
   * // Get one UserSecret
   * const userSecret = await prisma.userSecret.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserSecretFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserSecretFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserSecretClient<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserSecret that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSecretFindFirstArgs} args - Arguments to find a UserSecret
   * @example
   * // Get one UserSecret
   * const userSecret = await prisma.userSecret.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserSecretFindFirstArgs>(args?: Prisma.SelectSubset<T, UserSecretFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserSecretClient<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserSecret that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSecretFindFirstOrThrowArgs} args - Arguments to find a UserSecret
   * @example
   * // Get one UserSecret
   * const userSecret = await prisma.userSecret.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserSecretFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserSecretFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserSecretClient<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserSecrets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSecretFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserSecrets
   * const userSecrets = await prisma.userSecret.findMany()
   * 
   * // Get first 10 UserSecrets
   * const userSecrets = await prisma.userSecret.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userSecretWithIdOnly = await prisma.userSecret.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserSecretFindManyArgs>(args?: Prisma.SelectSubset<T, UserSecretFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserSecret.
   * @param {UserSecretCreateArgs} args - Arguments to create a UserSecret.
   * @example
   * // Create one UserSecret
   * const UserSecret = await prisma.userSecret.create({
   *   data: {
   *     // ... data to create a UserSecret
   *   }
   * })
   * 
   */
  create<T extends UserSecretCreateArgs>(args: Prisma.SelectSubset<T, UserSecretCreateArgs<ExtArgs>>): Prisma.Prisma__UserSecretClient<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserSecrets.
   * @param {UserSecretCreateManyArgs} args - Arguments to create many UserSecrets.
   * @example
   * // Create many UserSecrets
   * const userSecret = await prisma.userSecret.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserSecretCreateManyArgs>(args?: Prisma.SelectSubset<T, UserSecretCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserSecrets and returns the data saved in the database.
   * @param {UserSecretCreateManyAndReturnArgs} args - Arguments to create many UserSecrets.
   * @example
   * // Create many UserSecrets
   * const userSecret = await prisma.userSecret.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserSecrets and only return the `id`
   * const userSecretWithIdOnly = await prisma.userSecret.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserSecretCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserSecretCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserSecret.
   * @param {UserSecretDeleteArgs} args - Arguments to delete one UserSecret.
   * @example
   * // Delete one UserSecret
   * const UserSecret = await prisma.userSecret.delete({
   *   where: {
   *     // ... filter to delete one UserSecret
   *   }
   * })
   * 
   */
  delete<T extends UserSecretDeleteArgs>(args: Prisma.SelectSubset<T, UserSecretDeleteArgs<ExtArgs>>): Prisma.Prisma__UserSecretClient<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserSecret.
   * @param {UserSecretUpdateArgs} args - Arguments to update one UserSecret.
   * @example
   * // Update one UserSecret
   * const userSecret = await prisma.userSecret.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserSecretUpdateArgs>(args: Prisma.SelectSubset<T, UserSecretUpdateArgs<ExtArgs>>): Prisma.Prisma__UserSecretClient<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserSecrets.
   * @param {UserSecretDeleteManyArgs} args - Arguments to filter UserSecrets to delete.
   * @example
   * // Delete a few UserSecrets
   * const { count } = await prisma.userSecret.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserSecretDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserSecretDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserSecrets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSecretUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserSecrets
   * const userSecret = await prisma.userSecret.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserSecretUpdateManyArgs>(args: Prisma.SelectSubset<T, UserSecretUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserSecrets and returns the data updated in the database.
   * @param {UserSecretUpdateManyAndReturnArgs} args - Arguments to update many UserSecrets.
   * @example
   * // Update many UserSecrets
   * const userSecret = await prisma.userSecret.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserSecrets and only return the `id`
   * const userSecretWithIdOnly = await prisma.userSecret.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserSecretUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserSecretUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserSecret.
   * @param {UserSecretUpsertArgs} args - Arguments to update or create a UserSecret.
   * @example
   * // Update or create a UserSecret
   * const userSecret = await prisma.userSecret.upsert({
   *   create: {
   *     // ... data to create a UserSecret
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserSecret we want to update
   *   }
   * })
   */
  upsert<T extends UserSecretUpsertArgs>(args: Prisma.SelectSubset<T, UserSecretUpsertArgs<ExtArgs>>): Prisma.Prisma__UserSecretClient<runtime.Types.Result.GetResult<Prisma.$UserSecretPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserSecrets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSecretCountArgs} args - Arguments to filter UserSecrets to count.
   * @example
   * // Count the number of UserSecrets
   * const count = await prisma.userSecret.count({
   *   where: {
   *     // ... the filter for the UserSecrets we want to count
   *   }
   * })
  **/
  count<T extends UserSecretCountArgs>(
    args?: Prisma.Subset<T, UserSecretCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserSecretCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserSecret.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSecretAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserSecretAggregateArgs>(args: Prisma.Subset<T, UserSecretAggregateArgs>): Prisma.PrismaPromise<GetUserSecretAggregateType<T>>

  /**
   * Group by UserSecret.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserSecretGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserSecretGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserSecretGroupByArgs['orderBy'] }
      : { orderBy?: UserSecretGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserSecretGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSecretGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserSecret model
 */
readonly fields: UserSecretFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserSecret.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserSecretClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserSecret model
 */
export interface UserSecretFieldRefs {
  readonly id: Prisma.FieldRef<"UserSecret", 'Int'>
  readonly createdAt: Prisma.FieldRef<"UserSecret", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserSecret", 'DateTime'>
  readonly userId: Prisma.FieldRef<"UserSecret", 'String'>
  readonly pwdHash: Prisma.FieldRef<"UserSecret", 'String'>
  readonly salt: Prisma.FieldRef<"UserSecret", 'String'>
  readonly isAdmin: Prisma.FieldRef<"UserSecret", 'Boolean'>
}
    

// Custom InputTypes
/**
 * UserSecret findUnique
 */
export type UserSecretFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * Filter, which UserSecret to fetch.
   */
  where: Prisma.UserSecretWhereUniqueInput
}

/**
 * UserSecret findUniqueOrThrow
 */
export type UserSecretFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * Filter, which UserSecret to fetch.
   */
  where: Prisma.UserSecretWhereUniqueInput
}

/**
 * UserSecret findFirst
 */
export type UserSecretFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * Filter, which UserSecret to fetch.
   */
  where?: Prisma.UserSecretWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSecrets to fetch.
   */
  orderBy?: Prisma.UserSecretOrderByWithRelationInput | Prisma.UserSecretOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserSecrets.
   */
  cursor?: Prisma.UserSecretWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSecrets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSecrets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserSecrets.
   */
  distinct?: Prisma.UserSecretScalarFieldEnum | Prisma.UserSecretScalarFieldEnum[]
}

/**
 * UserSecret findFirstOrThrow
 */
export type UserSecretFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * Filter, which UserSecret to fetch.
   */
  where?: Prisma.UserSecretWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSecrets to fetch.
   */
  orderBy?: Prisma.UserSecretOrderByWithRelationInput | Prisma.UserSecretOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserSecrets.
   */
  cursor?: Prisma.UserSecretWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSecrets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSecrets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserSecrets.
   */
  distinct?: Prisma.UserSecretScalarFieldEnum | Prisma.UserSecretScalarFieldEnum[]
}

/**
 * UserSecret findMany
 */
export type UserSecretFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * Filter, which UserSecrets to fetch.
   */
  where?: Prisma.UserSecretWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserSecrets to fetch.
   */
  orderBy?: Prisma.UserSecretOrderByWithRelationInput | Prisma.UserSecretOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserSecrets.
   */
  cursor?: Prisma.UserSecretWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserSecrets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserSecrets.
   */
  skip?: number
  distinct?: Prisma.UserSecretScalarFieldEnum | Prisma.UserSecretScalarFieldEnum[]
}

/**
 * UserSecret create
 */
export type UserSecretCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * The data needed to create a UserSecret.
   */
  data: Prisma.XOR<Prisma.UserSecretCreateInput, Prisma.UserSecretUncheckedCreateInput>
}

/**
 * UserSecret createMany
 */
export type UserSecretCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserSecrets.
   */
  data: Prisma.UserSecretCreateManyInput | Prisma.UserSecretCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserSecret createManyAndReturn
 */
export type UserSecretCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * The data used to create many UserSecrets.
   */
  data: Prisma.UserSecretCreateManyInput | Prisma.UserSecretCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserSecret update
 */
export type UserSecretUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * The data needed to update a UserSecret.
   */
  data: Prisma.XOR<Prisma.UserSecretUpdateInput, Prisma.UserSecretUncheckedUpdateInput>
  /**
   * Choose, which UserSecret to update.
   */
  where: Prisma.UserSecretWhereUniqueInput
}

/**
 * UserSecret updateMany
 */
export type UserSecretUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserSecrets.
   */
  data: Prisma.XOR<Prisma.UserSecretUpdateManyMutationInput, Prisma.UserSecretUncheckedUpdateManyInput>
  /**
   * Filter which UserSecrets to update
   */
  where?: Prisma.UserSecretWhereInput
  /**
   * Limit how many UserSecrets to update.
   */
  limit?: number
}

/**
 * UserSecret updateManyAndReturn
 */
export type UserSecretUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * The data used to update UserSecrets.
   */
  data: Prisma.XOR<Prisma.UserSecretUpdateManyMutationInput, Prisma.UserSecretUncheckedUpdateManyInput>
  /**
   * Filter which UserSecrets to update
   */
  where?: Prisma.UserSecretWhereInput
  /**
   * Limit how many UserSecrets to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserSecret upsert
 */
export type UserSecretUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * The filter to search for the UserSecret to update in case it exists.
   */
  where: Prisma.UserSecretWhereUniqueInput
  /**
   * In case the UserSecret found by the `where` argument doesn't exist, create a new UserSecret with this data.
   */
  create: Prisma.XOR<Prisma.UserSecretCreateInput, Prisma.UserSecretUncheckedCreateInput>
  /**
   * In case the UserSecret was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserSecretUpdateInput, Prisma.UserSecretUncheckedUpdateInput>
}

/**
 * UserSecret delete
 */
export type UserSecretDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
  /**
   * Filter which UserSecret to delete.
   */
  where: Prisma.UserSecretWhereUniqueInput
}

/**
 * UserSecret deleteMany
 */
export type UserSecretDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserSecrets to delete
   */
  where?: Prisma.UserSecretWhereInput
  /**
   * Limit how many UserSecrets to delete.
   */
  limit?: number
}

/**
 * UserSecret without action
 */
export type UserSecretDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserSecret
   */
  select?: Prisma.UserSecretSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserSecret
   */
  omit?: Prisma.UserSecretOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserSecretInclude<ExtArgs> | null
}
