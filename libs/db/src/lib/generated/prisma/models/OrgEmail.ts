
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `OrgEmail` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model OrgEmail
 * 
 */
export type OrgEmailModel = runtime.Types.Result.DefaultSelection<Prisma.$OrgEmailPayload>

export type AggregateOrgEmail = {
  _count: OrgEmailCountAggregateOutputType | null
  _avg: OrgEmailAvgAggregateOutputType | null
  _sum: OrgEmailSumAggregateOutputType | null
  _min: OrgEmailMinAggregateOutputType | null
  _max: OrgEmailMaxAggregateOutputType | null
}

export type OrgEmailAvgAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type OrgEmailSumAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type OrgEmailMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  email: string | null
  description: string | null
  orgId: string | null
}

export type OrgEmailMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  email: string | null
  description: string | null
  orgId: string | null
}

export type OrgEmailCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  published: number
  isPublic: number
  isDeleted: number
  isDeletedDT: number
  email: number
  description: number
  orgId: number
  _all: number
}


export type OrgEmailAvgAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type OrgEmailSumAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type OrgEmailMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  email?: true
  description?: true
  orgId?: true
}

export type OrgEmailMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  email?: true
  description?: true
  orgId?: true
}

export type OrgEmailCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  email?: true
  description?: true
  orgId?: true
  _all?: true
}

export type OrgEmailAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrgEmail to aggregate.
   */
  where?: Prisma.OrgEmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgEmails to fetch.
   */
  orderBy?: Prisma.OrgEmailOrderByWithRelationInput | Prisma.OrgEmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrgEmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgEmails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgEmails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OrgEmails
  **/
  _count?: true | OrgEmailCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OrgEmailAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OrgEmailSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrgEmailMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrgEmailMaxAggregateInputType
}

export type GetOrgEmailAggregateType<T extends OrgEmailAggregateArgs> = {
      [P in keyof T & keyof AggregateOrgEmail]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrgEmail[P]>
    : Prisma.GetScalarType<T[P], AggregateOrgEmail[P]>
}




export type OrgEmailGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrgEmailWhereInput
  orderBy?: Prisma.OrgEmailOrderByWithAggregationInput | Prisma.OrgEmailOrderByWithAggregationInput[]
  by: Prisma.OrgEmailScalarFieldEnum[] | Prisma.OrgEmailScalarFieldEnum
  having?: Prisma.OrgEmailScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrgEmailCountAggregateInputType | true
  _avg?: OrgEmailAvgAggregateInputType
  _sum?: OrgEmailSumAggregateInputType
  _min?: OrgEmailMinAggregateInputType
  _max?: OrgEmailMaxAggregateInputType
}

export type OrgEmailGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  published: boolean
  isPublic: boolean
  isDeleted: number
  isDeletedDT: Date | null
  email: string
  description: string | null
  orgId: string
  _count: OrgEmailCountAggregateOutputType | null
  _avg: OrgEmailAvgAggregateOutputType | null
  _sum: OrgEmailSumAggregateOutputType | null
  _min: OrgEmailMinAggregateOutputType | null
  _max: OrgEmailMaxAggregateOutputType | null
}

type GetOrgEmailGroupByPayload<T extends OrgEmailGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrgEmailGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrgEmailGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrgEmailGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrgEmailGroupByOutputType[P]>
      }
    >
  >



export type OrgEmailWhereInput = {
  AND?: Prisma.OrgEmailWhereInput | Prisma.OrgEmailWhereInput[]
  OR?: Prisma.OrgEmailWhereInput[]
  NOT?: Prisma.OrgEmailWhereInput | Prisma.OrgEmailWhereInput[]
  id?: Prisma.IntFilter<"OrgEmail"> | number
  createdAt?: Prisma.DateTimeFilter<"OrgEmail"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgEmail"> | Date | string
  published?: Prisma.BoolFilter<"OrgEmail"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgEmail"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgEmail"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgEmail"> | Date | string | null
  email?: Prisma.StringFilter<"OrgEmail"> | string
  description?: Prisma.StringNullableFilter<"OrgEmail"> | string | null
  orgId?: Prisma.StringFilter<"OrgEmail"> | string
  org?: Prisma.XOR<Prisma.OrganizationNullableScalarRelationFilter, Prisma.OrganizationWhereInput> | null
  OrgEmailUseTos?: Prisma.OrgEmailUseToListRelationFilter
}

export type OrgEmailOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  orgId?: Prisma.SortOrder
  org?: Prisma.OrganizationOrderByWithRelationInput
  OrgEmailUseTos?: Prisma.OrgEmailUseToOrderByRelationAggregateInput
}

export type OrgEmailWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.OrgEmailWhereInput | Prisma.OrgEmailWhereInput[]
  OR?: Prisma.OrgEmailWhereInput[]
  NOT?: Prisma.OrgEmailWhereInput | Prisma.OrgEmailWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"OrgEmail"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgEmail"> | Date | string
  published?: Prisma.BoolFilter<"OrgEmail"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgEmail"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgEmail"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgEmail"> | Date | string | null
  email?: Prisma.StringFilter<"OrgEmail"> | string
  description?: Prisma.StringNullableFilter<"OrgEmail"> | string | null
  orgId?: Prisma.StringFilter<"OrgEmail"> | string
  org?: Prisma.XOR<Prisma.OrganizationNullableScalarRelationFilter, Prisma.OrganizationWhereInput> | null
  OrgEmailUseTos?: Prisma.OrgEmailUseToListRelationFilter
}, "id">

export type OrgEmailOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  orgId?: Prisma.SortOrder
  _count?: Prisma.OrgEmailCountOrderByAggregateInput
  _avg?: Prisma.OrgEmailAvgOrderByAggregateInput
  _max?: Prisma.OrgEmailMaxOrderByAggregateInput
  _min?: Prisma.OrgEmailMinOrderByAggregateInput
  _sum?: Prisma.OrgEmailSumOrderByAggregateInput
}

export type OrgEmailScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrgEmailScalarWhereWithAggregatesInput | Prisma.OrgEmailScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrgEmailScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrgEmailScalarWhereWithAggregatesInput | Prisma.OrgEmailScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"OrgEmail"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"OrgEmail"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"OrgEmail"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"OrgEmail"> | boolean
  isPublic?: Prisma.BoolWithAggregatesFilter<"OrgEmail"> | boolean
  isDeleted?: Prisma.IntWithAggregatesFilter<"OrgEmail"> | number
  isDeletedDT?: Prisma.DateTimeNullableWithAggregatesFilter<"OrgEmail"> | Date | string | null
  email?: Prisma.StringWithAggregatesFilter<"OrgEmail"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"OrgEmail"> | string | null
  orgId?: Prisma.StringWithAggregatesFilter<"OrgEmail"> | string
}

export type OrgEmailCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  email: string
  description?: string | null
  org?: Prisma.OrganizationCreateNestedOneWithoutOrgEmailsInput
  OrgEmailUseTos?: Prisma.OrgEmailUseToCreateNestedManyWithoutEmailOrgInput
}

export type OrgEmailUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  email: string
  description?: string | null
  orgId: string
  OrgEmailUseTos?: Prisma.OrgEmailUseToUncheckedCreateNestedManyWithoutEmailOrgInput
}

export type OrgEmailUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  org?: Prisma.OrganizationUpdateOneWithoutOrgEmailsNestedInput
  OrgEmailUseTos?: Prisma.OrgEmailUseToUpdateManyWithoutEmailOrgNestedInput
}

export type OrgEmailUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  OrgEmailUseTos?: Prisma.OrgEmailUseToUncheckedUpdateManyWithoutEmailOrgNestedInput
}

export type OrgEmailCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  email: string
  description?: string | null
  orgId: string
}

export type OrgEmailUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type OrgEmailUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrgEmailListRelationFilter = {
  every?: Prisma.OrgEmailWhereInput
  some?: Prisma.OrgEmailWhereInput
  none?: Prisma.OrgEmailWhereInput
}

export type OrgEmailOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OrgEmailCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  email?: Prisma.SortOrder
  description?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
}

export type OrgEmailAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type OrgEmailMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  email?: Prisma.SortOrder
  description?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
}

export type OrgEmailMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  email?: Prisma.SortOrder
  description?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
}

export type OrgEmailSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type OrgEmailScalarRelationFilter = {
  is?: Prisma.OrgEmailWhereInput
  isNot?: Prisma.OrgEmailWhereInput
}

export type OrgEmailCreateNestedManyWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgInput, Prisma.OrgEmailUncheckedCreateWithoutOrgInput> | Prisma.OrgEmailCreateWithoutOrgInput[] | Prisma.OrgEmailUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.OrgEmailCreateOrConnectWithoutOrgInput | Prisma.OrgEmailCreateOrConnectWithoutOrgInput[]
  createMany?: Prisma.OrgEmailCreateManyOrgInputEnvelope
  connect?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
}

export type OrgEmailUncheckedCreateNestedManyWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgInput, Prisma.OrgEmailUncheckedCreateWithoutOrgInput> | Prisma.OrgEmailCreateWithoutOrgInput[] | Prisma.OrgEmailUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.OrgEmailCreateOrConnectWithoutOrgInput | Prisma.OrgEmailCreateOrConnectWithoutOrgInput[]
  createMany?: Prisma.OrgEmailCreateManyOrgInputEnvelope
  connect?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
}

export type OrgEmailUpdateManyWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgInput, Prisma.OrgEmailUncheckedCreateWithoutOrgInput> | Prisma.OrgEmailCreateWithoutOrgInput[] | Prisma.OrgEmailUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.OrgEmailCreateOrConnectWithoutOrgInput | Prisma.OrgEmailCreateOrConnectWithoutOrgInput[]
  upsert?: Prisma.OrgEmailUpsertWithWhereUniqueWithoutOrgInput | Prisma.OrgEmailUpsertWithWhereUniqueWithoutOrgInput[]
  createMany?: Prisma.OrgEmailCreateManyOrgInputEnvelope
  set?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
  disconnect?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
  delete?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
  connect?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
  update?: Prisma.OrgEmailUpdateWithWhereUniqueWithoutOrgInput | Prisma.OrgEmailUpdateWithWhereUniqueWithoutOrgInput[]
  updateMany?: Prisma.OrgEmailUpdateManyWithWhereWithoutOrgInput | Prisma.OrgEmailUpdateManyWithWhereWithoutOrgInput[]
  deleteMany?: Prisma.OrgEmailScalarWhereInput | Prisma.OrgEmailScalarWhereInput[]
}

export type OrgEmailUncheckedUpdateManyWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgInput, Prisma.OrgEmailUncheckedCreateWithoutOrgInput> | Prisma.OrgEmailCreateWithoutOrgInput[] | Prisma.OrgEmailUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.OrgEmailCreateOrConnectWithoutOrgInput | Prisma.OrgEmailCreateOrConnectWithoutOrgInput[]
  upsert?: Prisma.OrgEmailUpsertWithWhereUniqueWithoutOrgInput | Prisma.OrgEmailUpsertWithWhereUniqueWithoutOrgInput[]
  createMany?: Prisma.OrgEmailCreateManyOrgInputEnvelope
  set?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
  disconnect?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
  delete?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
  connect?: Prisma.OrgEmailWhereUniqueInput | Prisma.OrgEmailWhereUniqueInput[]
  update?: Prisma.OrgEmailUpdateWithWhereUniqueWithoutOrgInput | Prisma.OrgEmailUpdateWithWhereUniqueWithoutOrgInput[]
  updateMany?: Prisma.OrgEmailUpdateManyWithWhereWithoutOrgInput | Prisma.OrgEmailUpdateManyWithWhereWithoutOrgInput[]
  deleteMany?: Prisma.OrgEmailScalarWhereInput | Prisma.OrgEmailScalarWhereInput[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type OrgEmailCreateNestedOneWithoutOrgEmailUseTosInput = {
  create?: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgEmailUseTosInput, Prisma.OrgEmailUncheckedCreateWithoutOrgEmailUseTosInput>
  connectOrCreate?: Prisma.OrgEmailCreateOrConnectWithoutOrgEmailUseTosInput
  connect?: Prisma.OrgEmailWhereUniqueInput
}

export type OrgEmailUpdateOneRequiredWithoutOrgEmailUseTosNestedInput = {
  create?: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgEmailUseTosInput, Prisma.OrgEmailUncheckedCreateWithoutOrgEmailUseTosInput>
  connectOrCreate?: Prisma.OrgEmailCreateOrConnectWithoutOrgEmailUseTosInput
  upsert?: Prisma.OrgEmailUpsertWithoutOrgEmailUseTosInput
  connect?: Prisma.OrgEmailWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.OrgEmailUpdateToOneWithWhereWithoutOrgEmailUseTosInput, Prisma.OrgEmailUpdateWithoutOrgEmailUseTosInput>, Prisma.OrgEmailUncheckedUpdateWithoutOrgEmailUseTosInput>
}

export type OrgEmailCreateWithoutOrgInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  email: string
  description?: string | null
  OrgEmailUseTos?: Prisma.OrgEmailUseToCreateNestedManyWithoutEmailOrgInput
}

export type OrgEmailUncheckedCreateWithoutOrgInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  email: string
  description?: string | null
  OrgEmailUseTos?: Prisma.OrgEmailUseToUncheckedCreateNestedManyWithoutEmailOrgInput
}

export type OrgEmailCreateOrConnectWithoutOrgInput = {
  where: Prisma.OrgEmailWhereUniqueInput
  create: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgInput, Prisma.OrgEmailUncheckedCreateWithoutOrgInput>
}

export type OrgEmailCreateManyOrgInputEnvelope = {
  data: Prisma.OrgEmailCreateManyOrgInput | Prisma.OrgEmailCreateManyOrgInput[]
  skipDuplicates?: boolean
}

export type OrgEmailUpsertWithWhereUniqueWithoutOrgInput = {
  where: Prisma.OrgEmailWhereUniqueInput
  update: Prisma.XOR<Prisma.OrgEmailUpdateWithoutOrgInput, Prisma.OrgEmailUncheckedUpdateWithoutOrgInput>
  create: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgInput, Prisma.OrgEmailUncheckedCreateWithoutOrgInput>
}

export type OrgEmailUpdateWithWhereUniqueWithoutOrgInput = {
  where: Prisma.OrgEmailWhereUniqueInput
  data: Prisma.XOR<Prisma.OrgEmailUpdateWithoutOrgInput, Prisma.OrgEmailUncheckedUpdateWithoutOrgInput>
}

export type OrgEmailUpdateManyWithWhereWithoutOrgInput = {
  where: Prisma.OrgEmailScalarWhereInput
  data: Prisma.XOR<Prisma.OrgEmailUpdateManyMutationInput, Prisma.OrgEmailUncheckedUpdateManyWithoutOrgInput>
}

export type OrgEmailScalarWhereInput = {
  AND?: Prisma.OrgEmailScalarWhereInput | Prisma.OrgEmailScalarWhereInput[]
  OR?: Prisma.OrgEmailScalarWhereInput[]
  NOT?: Prisma.OrgEmailScalarWhereInput | Prisma.OrgEmailScalarWhereInput[]
  id?: Prisma.IntFilter<"OrgEmail"> | number
  createdAt?: Prisma.DateTimeFilter<"OrgEmail"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"OrgEmail"> | Date | string
  published?: Prisma.BoolFilter<"OrgEmail"> | boolean
  isPublic?: Prisma.BoolFilter<"OrgEmail"> | boolean
  isDeleted?: Prisma.IntFilter<"OrgEmail"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"OrgEmail"> | Date | string | null
  email?: Prisma.StringFilter<"OrgEmail"> | string
  description?: Prisma.StringNullableFilter<"OrgEmail"> | string | null
  orgId?: Prisma.StringFilter<"OrgEmail"> | string
}

export type OrgEmailCreateWithoutOrgEmailUseTosInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  email: string
  description?: string | null
  org?: Prisma.OrganizationCreateNestedOneWithoutOrgEmailsInput
}

export type OrgEmailUncheckedCreateWithoutOrgEmailUseTosInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  email: string
  description?: string | null
  orgId: string
}

export type OrgEmailCreateOrConnectWithoutOrgEmailUseTosInput = {
  where: Prisma.OrgEmailWhereUniqueInput
  create: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgEmailUseTosInput, Prisma.OrgEmailUncheckedCreateWithoutOrgEmailUseTosInput>
}

export type OrgEmailUpsertWithoutOrgEmailUseTosInput = {
  update: Prisma.XOR<Prisma.OrgEmailUpdateWithoutOrgEmailUseTosInput, Prisma.OrgEmailUncheckedUpdateWithoutOrgEmailUseTosInput>
  create: Prisma.XOR<Prisma.OrgEmailCreateWithoutOrgEmailUseTosInput, Prisma.OrgEmailUncheckedCreateWithoutOrgEmailUseTosInput>
  where?: Prisma.OrgEmailWhereInput
}

export type OrgEmailUpdateToOneWithWhereWithoutOrgEmailUseTosInput = {
  where?: Prisma.OrgEmailWhereInput
  data: Prisma.XOR<Prisma.OrgEmailUpdateWithoutOrgEmailUseTosInput, Prisma.OrgEmailUncheckedUpdateWithoutOrgEmailUseTosInput>
}

export type OrgEmailUpdateWithoutOrgEmailUseTosInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  org?: Prisma.OrganizationUpdateOneWithoutOrgEmailsNestedInput
}

export type OrgEmailUncheckedUpdateWithoutOrgEmailUseTosInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type OrgEmailCreateManyOrgInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  email: string
  description?: string | null
}

export type OrgEmailUpdateWithoutOrgInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  OrgEmailUseTos?: Prisma.OrgEmailUseToUpdateManyWithoutEmailOrgNestedInput
}

export type OrgEmailUncheckedUpdateWithoutOrgInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  OrgEmailUseTos?: Prisma.OrgEmailUseToUncheckedUpdateManyWithoutEmailOrgNestedInput
}

export type OrgEmailUncheckedUpdateManyWithoutOrgInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  email?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type OrgEmailCountOutputType
 */

export type OrgEmailCountOutputType = {
  OrgEmailUseTos: number
}

export type OrgEmailCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  OrgEmailUseTos?: boolean | OrgEmailCountOutputTypeCountOrgEmailUseTosArgs
}

/**
 * OrgEmailCountOutputType without action
 */
export type OrgEmailCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailCountOutputType
   */
  select?: Prisma.OrgEmailCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OrgEmailCountOutputType without action
 */
export type OrgEmailCountOutputTypeCountOrgEmailUseTosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrgEmailUseToWhereInput
}


export type OrgEmailSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  email?: boolean
  description?: boolean
  orgId?: boolean
  org?: boolean | Prisma.OrgEmail$orgArgs<ExtArgs>
  OrgEmailUseTos?: boolean | Prisma.OrgEmail$OrgEmailUseTosArgs<ExtArgs>
  _count?: boolean | Prisma.OrgEmailCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orgEmail"]>

export type OrgEmailSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  email?: boolean
  description?: boolean
  orgId?: boolean
  org?: boolean | Prisma.OrgEmail$orgArgs<ExtArgs>
}, ExtArgs["result"]["orgEmail"]>

export type OrgEmailSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  email?: boolean
  description?: boolean
  orgId?: boolean
  org?: boolean | Prisma.OrgEmail$orgArgs<ExtArgs>
}, ExtArgs["result"]["orgEmail"]>

export type OrgEmailSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  email?: boolean
  description?: boolean
  orgId?: boolean
}

export type OrgEmailOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "published" | "isPublic" | "isDeleted" | "isDeletedDT" | "email" | "description" | "orgId", ExtArgs["result"]["orgEmail"]>
export type OrgEmailInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgEmail$orgArgs<ExtArgs>
  OrgEmailUseTos?: boolean | Prisma.OrgEmail$OrgEmailUseTosArgs<ExtArgs>
  _count?: boolean | Prisma.OrgEmailCountOutputTypeDefaultArgs<ExtArgs>
}
export type OrgEmailIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgEmail$orgArgs<ExtArgs>
}
export type OrgEmailIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  org?: boolean | Prisma.OrgEmail$orgArgs<ExtArgs>
}

export type $OrgEmailPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OrgEmail"
  objects: {
    org: Prisma.$OrganizationPayload<ExtArgs> | null
    OrgEmailUseTos: Prisma.$OrgEmailUseToPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    published: boolean
    isPublic: boolean
    isDeleted: number
    isDeletedDT: Date | null
    email: string
    description: string | null
    orgId: string
  }, ExtArgs["result"]["orgEmail"]>
  composites: {}
}

export type OrgEmailGetPayload<S extends boolean | null | undefined | OrgEmailDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload, S>

export type OrgEmailCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrgEmailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrgEmailCountAggregateInputType | true
  }

export interface OrgEmailDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrgEmail'], meta: { name: 'OrgEmail' } }
  /**
   * Find zero or one OrgEmail that matches the filter.
   * @param {OrgEmailFindUniqueArgs} args - Arguments to find a OrgEmail
   * @example
   * // Get one OrgEmail
   * const orgEmail = await prisma.orgEmail.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrgEmailFindUniqueArgs>(args: Prisma.SelectSubset<T, OrgEmailFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OrgEmail that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrgEmailFindUniqueOrThrowArgs} args - Arguments to find a OrgEmail
   * @example
   * // Get one OrgEmail
   * const orgEmail = await prisma.orgEmail.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrgEmailFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrgEmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrgEmail that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailFindFirstArgs} args - Arguments to find a OrgEmail
   * @example
   * // Get one OrgEmail
   * const orgEmail = await prisma.orgEmail.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrgEmailFindFirstArgs>(args?: Prisma.SelectSubset<T, OrgEmailFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrgEmail that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailFindFirstOrThrowArgs} args - Arguments to find a OrgEmail
   * @example
   * // Get one OrgEmail
   * const orgEmail = await prisma.orgEmail.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrgEmailFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrgEmailFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrgEmails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrgEmails
   * const orgEmails = await prisma.orgEmail.findMany()
   * 
   * // Get first 10 OrgEmails
   * const orgEmails = await prisma.orgEmail.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const orgEmailWithIdOnly = await prisma.orgEmail.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrgEmailFindManyArgs>(args?: Prisma.SelectSubset<T, OrgEmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OrgEmail.
   * @param {OrgEmailCreateArgs} args - Arguments to create a OrgEmail.
   * @example
   * // Create one OrgEmail
   * const OrgEmail = await prisma.orgEmail.create({
   *   data: {
   *     // ... data to create a OrgEmail
   *   }
   * })
   * 
   */
  create<T extends OrgEmailCreateArgs>(args: Prisma.SelectSubset<T, OrgEmailCreateArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OrgEmails.
   * @param {OrgEmailCreateManyArgs} args - Arguments to create many OrgEmails.
   * @example
   * // Create many OrgEmails
   * const orgEmail = await prisma.orgEmail.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrgEmailCreateManyArgs>(args?: Prisma.SelectSubset<T, OrgEmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OrgEmails and returns the data saved in the database.
   * @param {OrgEmailCreateManyAndReturnArgs} args - Arguments to create many OrgEmails.
   * @example
   * // Create many OrgEmails
   * const orgEmail = await prisma.orgEmail.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OrgEmails and only return the `id`
   * const orgEmailWithIdOnly = await prisma.orgEmail.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrgEmailCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrgEmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OrgEmail.
   * @param {OrgEmailDeleteArgs} args - Arguments to delete one OrgEmail.
   * @example
   * // Delete one OrgEmail
   * const OrgEmail = await prisma.orgEmail.delete({
   *   where: {
   *     // ... filter to delete one OrgEmail
   *   }
   * })
   * 
   */
  delete<T extends OrgEmailDeleteArgs>(args: Prisma.SelectSubset<T, OrgEmailDeleteArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OrgEmail.
   * @param {OrgEmailUpdateArgs} args - Arguments to update one OrgEmail.
   * @example
   * // Update one OrgEmail
   * const orgEmail = await prisma.orgEmail.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrgEmailUpdateArgs>(args: Prisma.SelectSubset<T, OrgEmailUpdateArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OrgEmails.
   * @param {OrgEmailDeleteManyArgs} args - Arguments to filter OrgEmails to delete.
   * @example
   * // Delete a few OrgEmails
   * const { count } = await prisma.orgEmail.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrgEmailDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrgEmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrgEmails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrgEmails
   * const orgEmail = await prisma.orgEmail.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrgEmailUpdateManyArgs>(args: Prisma.SelectSubset<T, OrgEmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrgEmails and returns the data updated in the database.
   * @param {OrgEmailUpdateManyAndReturnArgs} args - Arguments to update many OrgEmails.
   * @example
   * // Update many OrgEmails
   * const orgEmail = await prisma.orgEmail.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OrgEmails and only return the `id`
   * const orgEmailWithIdOnly = await prisma.orgEmail.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrgEmailUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrgEmailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OrgEmail.
   * @param {OrgEmailUpsertArgs} args - Arguments to update or create a OrgEmail.
   * @example
   * // Update or create a OrgEmail
   * const orgEmail = await prisma.orgEmail.upsert({
   *   create: {
   *     // ... data to create a OrgEmail
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrgEmail we want to update
   *   }
   * })
   */
  upsert<T extends OrgEmailUpsertArgs>(args: Prisma.SelectSubset<T, OrgEmailUpsertArgs<ExtArgs>>): Prisma.Prisma__OrgEmailClient<runtime.Types.Result.GetResult<Prisma.$OrgEmailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OrgEmails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailCountArgs} args - Arguments to filter OrgEmails to count.
   * @example
   * // Count the number of OrgEmails
   * const count = await prisma.orgEmail.count({
   *   where: {
   *     // ... the filter for the OrgEmails we want to count
   *   }
   * })
  **/
  count<T extends OrgEmailCountArgs>(
    args?: Prisma.Subset<T, OrgEmailCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrgEmailCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OrgEmail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrgEmailAggregateArgs>(args: Prisma.Subset<T, OrgEmailAggregateArgs>): Prisma.PrismaPromise<GetOrgEmailAggregateType<T>>

  /**
   * Group by OrgEmail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrgEmailGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrgEmailGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrgEmailGroupByArgs['orderBy'] }
      : { orderBy?: OrgEmailGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrgEmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrgEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OrgEmail model
 */
readonly fields: OrgEmailFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrgEmail.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrgEmailClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  org<T extends Prisma.OrgEmail$orgArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrgEmail$orgArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  OrgEmailUseTos<T extends Prisma.OrgEmail$OrgEmailUseTosArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrgEmail$OrgEmailUseTosArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrgEmailUseToPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OrgEmail model
 */
export interface OrgEmailFieldRefs {
  readonly id: Prisma.FieldRef<"OrgEmail", 'Int'>
  readonly createdAt: Prisma.FieldRef<"OrgEmail", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"OrgEmail", 'DateTime'>
  readonly published: Prisma.FieldRef<"OrgEmail", 'Boolean'>
  readonly isPublic: Prisma.FieldRef<"OrgEmail", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"OrgEmail", 'Int'>
  readonly isDeletedDT: Prisma.FieldRef<"OrgEmail", 'DateTime'>
  readonly email: Prisma.FieldRef<"OrgEmail", 'String'>
  readonly description: Prisma.FieldRef<"OrgEmail", 'String'>
  readonly orgId: Prisma.FieldRef<"OrgEmail", 'String'>
}
    

// Custom InputTypes
/**
 * OrgEmail findUnique
 */
export type OrgEmailFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmail to fetch.
   */
  where: Prisma.OrgEmailWhereUniqueInput
}

/**
 * OrgEmail findUniqueOrThrow
 */
export type OrgEmailFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmail to fetch.
   */
  where: Prisma.OrgEmailWhereUniqueInput
}

/**
 * OrgEmail findFirst
 */
export type OrgEmailFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmail to fetch.
   */
  where?: Prisma.OrgEmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgEmails to fetch.
   */
  orderBy?: Prisma.OrgEmailOrderByWithRelationInput | Prisma.OrgEmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrgEmails.
   */
  cursor?: Prisma.OrgEmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgEmails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgEmails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrgEmails.
   */
  distinct?: Prisma.OrgEmailScalarFieldEnum | Prisma.OrgEmailScalarFieldEnum[]
}

/**
 * OrgEmail findFirstOrThrow
 */
export type OrgEmailFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmail to fetch.
   */
  where?: Prisma.OrgEmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgEmails to fetch.
   */
  orderBy?: Prisma.OrgEmailOrderByWithRelationInput | Prisma.OrgEmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrgEmails.
   */
  cursor?: Prisma.OrgEmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgEmails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgEmails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrgEmails.
   */
  distinct?: Prisma.OrgEmailScalarFieldEnum | Prisma.OrgEmailScalarFieldEnum[]
}

/**
 * OrgEmail findMany
 */
export type OrgEmailFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * Filter, which OrgEmails to fetch.
   */
  where?: Prisma.OrgEmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrgEmails to fetch.
   */
  orderBy?: Prisma.OrgEmailOrderByWithRelationInput | Prisma.OrgEmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OrgEmails.
   */
  cursor?: Prisma.OrgEmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrgEmails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrgEmails.
   */
  skip?: number
  distinct?: Prisma.OrgEmailScalarFieldEnum | Prisma.OrgEmailScalarFieldEnum[]
}

/**
 * OrgEmail create
 */
export type OrgEmailCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * The data needed to create a OrgEmail.
   */
  data: Prisma.XOR<Prisma.OrgEmailCreateInput, Prisma.OrgEmailUncheckedCreateInput>
}

/**
 * OrgEmail createMany
 */
export type OrgEmailCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OrgEmails.
   */
  data: Prisma.OrgEmailCreateManyInput | Prisma.OrgEmailCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * OrgEmail createManyAndReturn
 */
export type OrgEmailCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * The data used to create many OrgEmails.
   */
  data: Prisma.OrgEmailCreateManyInput | Prisma.OrgEmailCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OrgEmail update
 */
export type OrgEmailUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * The data needed to update a OrgEmail.
   */
  data: Prisma.XOR<Prisma.OrgEmailUpdateInput, Prisma.OrgEmailUncheckedUpdateInput>
  /**
   * Choose, which OrgEmail to update.
   */
  where: Prisma.OrgEmailWhereUniqueInput
}

/**
 * OrgEmail updateMany
 */
export type OrgEmailUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OrgEmails.
   */
  data: Prisma.XOR<Prisma.OrgEmailUpdateManyMutationInput, Prisma.OrgEmailUncheckedUpdateManyInput>
  /**
   * Filter which OrgEmails to update
   */
  where?: Prisma.OrgEmailWhereInput
  /**
   * Limit how many OrgEmails to update.
   */
  limit?: number
}

/**
 * OrgEmail updateManyAndReturn
 */
export type OrgEmailUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * The data used to update OrgEmails.
   */
  data: Prisma.XOR<Prisma.OrgEmailUpdateManyMutationInput, Prisma.OrgEmailUncheckedUpdateManyInput>
  /**
   * Filter which OrgEmails to update
   */
  where?: Prisma.OrgEmailWhereInput
  /**
   * Limit how many OrgEmails to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OrgEmail upsert
 */
export type OrgEmailUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * The filter to search for the OrgEmail to update in case it exists.
   */
  where: Prisma.OrgEmailWhereUniqueInput
  /**
   * In case the OrgEmail found by the `where` argument doesn't exist, create a new OrgEmail with this data.
   */
  create: Prisma.XOR<Prisma.OrgEmailCreateInput, Prisma.OrgEmailUncheckedCreateInput>
  /**
   * In case the OrgEmail was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrgEmailUpdateInput, Prisma.OrgEmailUncheckedUpdateInput>
}

/**
 * OrgEmail delete
 */
export type OrgEmailDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
  /**
   * Filter which OrgEmail to delete.
   */
  where: Prisma.OrgEmailWhereUniqueInput
}

/**
 * OrgEmail deleteMany
 */
export type OrgEmailDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrgEmails to delete
   */
  where?: Prisma.OrgEmailWhereInput
  /**
   * Limit how many OrgEmails to delete.
   */
  limit?: number
}

/**
 * OrgEmail.org
 */
export type OrgEmail$orgArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Organization
   */
  select?: Prisma.OrganizationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Organization
   */
  omit?: Prisma.OrganizationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrganizationInclude<ExtArgs> | null
  where?: Prisma.OrganizationWhereInput
}

/**
 * OrgEmail.OrgEmailUseTos
 */
export type OrgEmail$OrgEmailUseTosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmailUseTo
   */
  select?: Prisma.OrgEmailUseToSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmailUseTo
   */
  omit?: Prisma.OrgEmailUseToOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailUseToInclude<ExtArgs> | null
  where?: Prisma.OrgEmailUseToWhereInput
  orderBy?: Prisma.OrgEmailUseToOrderByWithRelationInput | Prisma.OrgEmailUseToOrderByWithRelationInput[]
  cursor?: Prisma.OrgEmailUseToWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrgEmailUseToScalarFieldEnum | Prisma.OrgEmailUseToScalarFieldEnum[]
}

/**
 * OrgEmail without action
 */
export type OrgEmailDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrgEmail
   */
  select?: Prisma.OrgEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrgEmail
   */
  omit?: Prisma.OrgEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrgEmailInclude<ExtArgs> | null
}
