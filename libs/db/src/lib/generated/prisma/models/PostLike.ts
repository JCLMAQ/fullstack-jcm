
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PostLike` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model PostLike
 * 
 */
export type PostLikeModel = runtime.Types.Result.DefaultSelection<Prisma.$PostLikePayload>

export type AggregatePostLike = {
  _count: PostLikeCountAggregateOutputType | null
  _min: PostLikeMinAggregateOutputType | null
  _max: PostLikeMaxAggregateOutputType | null
}

export type PostLikeMinAggregateOutputType = {
  user_id: string | null
  post_id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PostLikeMaxAggregateOutputType = {
  user_id: string | null
  post_id: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PostLikeCountAggregateOutputType = {
  user_id: number
  post_id: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PostLikeMinAggregateInputType = {
  user_id?: true
  post_id?: true
  createdAt?: true
  updatedAt?: true
}

export type PostLikeMaxAggregateInputType = {
  user_id?: true
  post_id?: true
  createdAt?: true
  updatedAt?: true
}

export type PostLikeCountAggregateInputType = {
  user_id?: true
  post_id?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PostLikeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostLike to aggregate.
   */
  where?: Prisma.PostLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostLikes to fetch.
   */
  orderBy?: Prisma.PostLikeOrderByWithRelationInput | Prisma.PostLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PostLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PostLikes
  **/
  _count?: true | PostLikeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PostLikeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PostLikeMaxAggregateInputType
}

export type GetPostLikeAggregateType<T extends PostLikeAggregateArgs> = {
      [P in keyof T & keyof AggregatePostLike]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePostLike[P]>
    : Prisma.GetScalarType<T[P], AggregatePostLike[P]>
}




export type PostLikeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PostLikeWhereInput
  orderBy?: Prisma.PostLikeOrderByWithAggregationInput | Prisma.PostLikeOrderByWithAggregationInput[]
  by: Prisma.PostLikeScalarFieldEnum[] | Prisma.PostLikeScalarFieldEnum
  having?: Prisma.PostLikeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PostLikeCountAggregateInputType | true
  _min?: PostLikeMinAggregateInputType
  _max?: PostLikeMaxAggregateInputType
}

export type PostLikeGroupByOutputType = {
  user_id: string
  post_id: string
  createdAt: Date
  updatedAt: Date
  _count: PostLikeCountAggregateOutputType | null
  _min: PostLikeMinAggregateOutputType | null
  _max: PostLikeMaxAggregateOutputType | null
}

type GetPostLikeGroupByPayload<T extends PostLikeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PostLikeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PostLikeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PostLikeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PostLikeGroupByOutputType[P]>
      }
    >
  >



export type PostLikeWhereInput = {
  AND?: Prisma.PostLikeWhereInput | Prisma.PostLikeWhereInput[]
  OR?: Prisma.PostLikeWhereInput[]
  NOT?: Prisma.PostLikeWhereInput | Prisma.PostLikeWhereInput[]
  user_id?: Prisma.StringFilter<"PostLike"> | string
  post_id?: Prisma.StringFilter<"PostLike"> | string
  createdAt?: Prisma.DateTimeFilter<"PostLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostLike"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  post?: Prisma.XOR<Prisma.PostScalarRelationFilter, Prisma.PostWhereInput>
}

export type PostLikeOrderByWithRelationInput = {
  user_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  post?: Prisma.PostOrderByWithRelationInput
}

export type PostLikeWhereUniqueInput = Prisma.AtLeast<{
  user_id_post_id?: Prisma.PostLikeUser_idPost_idCompoundUniqueInput
  AND?: Prisma.PostLikeWhereInput | Prisma.PostLikeWhereInput[]
  OR?: Prisma.PostLikeWhereInput[]
  NOT?: Prisma.PostLikeWhereInput | Prisma.PostLikeWhereInput[]
  user_id?: Prisma.StringFilter<"PostLike"> | string
  post_id?: Prisma.StringFilter<"PostLike"> | string
  createdAt?: Prisma.DateTimeFilter<"PostLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostLike"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  post?: Prisma.XOR<Prisma.PostScalarRelationFilter, Prisma.PostWhereInput>
}, "user_id_post_id">

export type PostLikeOrderByWithAggregationInput = {
  user_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PostLikeCountOrderByAggregateInput
  _max?: Prisma.PostLikeMaxOrderByAggregateInput
  _min?: Prisma.PostLikeMinOrderByAggregateInput
}

export type PostLikeScalarWhereWithAggregatesInput = {
  AND?: Prisma.PostLikeScalarWhereWithAggregatesInput | Prisma.PostLikeScalarWhereWithAggregatesInput[]
  OR?: Prisma.PostLikeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PostLikeScalarWhereWithAggregatesInput | Prisma.PostLikeScalarWhereWithAggregatesInput[]
  user_id?: Prisma.StringWithAggregatesFilter<"PostLike"> | string
  post_id?: Prisma.StringWithAggregatesFilter<"PostLike"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PostLike"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PostLike"> | Date | string
}

export type PostLikeCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPosts_likedInput
  post: Prisma.PostCreateNestedOneWithoutLikedBysInput
}

export type PostLikeUncheckedCreateInput = {
  user_id: string
  post_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostLikeUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPosts_likedNestedInput
  post?: Prisma.PostUpdateOneRequiredWithoutLikedBysNestedInput
}

export type PostLikeUncheckedUpdateInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  post_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostLikeCreateManyInput = {
  user_id: string
  post_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostLikeUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostLikeUncheckedUpdateManyInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  post_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostLikeListRelationFilter = {
  every?: Prisma.PostLikeWhereInput
  some?: Prisma.PostLikeWhereInput
  none?: Prisma.PostLikeWhereInput
}

export type PostLikeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PostLikeUser_idPost_idCompoundUniqueInput = {
  user_id: string
  post_id: string
}

export type PostLikeCountOrderByAggregateInput = {
  user_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostLikeMaxOrderByAggregateInput = {
  user_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostLikeMinOrderByAggregateInput = {
  user_id?: Prisma.SortOrder
  post_id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PostLikeCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PostLikeCreateWithoutUserInput, Prisma.PostLikeUncheckedCreateWithoutUserInput> | Prisma.PostLikeCreateWithoutUserInput[] | Prisma.PostLikeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PostLikeCreateOrConnectWithoutUserInput | Prisma.PostLikeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PostLikeCreateManyUserInputEnvelope
  connect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
}

export type PostLikeUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PostLikeCreateWithoutUserInput, Prisma.PostLikeUncheckedCreateWithoutUserInput> | Prisma.PostLikeCreateWithoutUserInput[] | Prisma.PostLikeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PostLikeCreateOrConnectWithoutUserInput | Prisma.PostLikeCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PostLikeCreateManyUserInputEnvelope
  connect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
}

export type PostLikeUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PostLikeCreateWithoutUserInput, Prisma.PostLikeUncheckedCreateWithoutUserInput> | Prisma.PostLikeCreateWithoutUserInput[] | Prisma.PostLikeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PostLikeCreateOrConnectWithoutUserInput | Prisma.PostLikeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PostLikeUpsertWithWhereUniqueWithoutUserInput | Prisma.PostLikeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PostLikeCreateManyUserInputEnvelope
  set?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  disconnect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  delete?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  connect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  update?: Prisma.PostLikeUpdateWithWhereUniqueWithoutUserInput | Prisma.PostLikeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PostLikeUpdateManyWithWhereWithoutUserInput | Prisma.PostLikeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PostLikeScalarWhereInput | Prisma.PostLikeScalarWhereInput[]
}

export type PostLikeUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PostLikeCreateWithoutUserInput, Prisma.PostLikeUncheckedCreateWithoutUserInput> | Prisma.PostLikeCreateWithoutUserInput[] | Prisma.PostLikeUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PostLikeCreateOrConnectWithoutUserInput | Prisma.PostLikeCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PostLikeUpsertWithWhereUniqueWithoutUserInput | Prisma.PostLikeUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PostLikeCreateManyUserInputEnvelope
  set?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  disconnect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  delete?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  connect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  update?: Prisma.PostLikeUpdateWithWhereUniqueWithoutUserInput | Prisma.PostLikeUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PostLikeUpdateManyWithWhereWithoutUserInput | Prisma.PostLikeUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PostLikeScalarWhereInput | Prisma.PostLikeScalarWhereInput[]
}

export type PostLikeCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.PostLikeCreateWithoutPostInput, Prisma.PostLikeUncheckedCreateWithoutPostInput> | Prisma.PostLikeCreateWithoutPostInput[] | Prisma.PostLikeUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostLikeCreateOrConnectWithoutPostInput | Prisma.PostLikeCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.PostLikeCreateManyPostInputEnvelope
  connect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
}

export type PostLikeUncheckedCreateNestedManyWithoutPostInput = {
  create?: Prisma.XOR<Prisma.PostLikeCreateWithoutPostInput, Prisma.PostLikeUncheckedCreateWithoutPostInput> | Prisma.PostLikeCreateWithoutPostInput[] | Prisma.PostLikeUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostLikeCreateOrConnectWithoutPostInput | Prisma.PostLikeCreateOrConnectWithoutPostInput[]
  createMany?: Prisma.PostLikeCreateManyPostInputEnvelope
  connect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
}

export type PostLikeUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.PostLikeCreateWithoutPostInput, Prisma.PostLikeUncheckedCreateWithoutPostInput> | Prisma.PostLikeCreateWithoutPostInput[] | Prisma.PostLikeUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostLikeCreateOrConnectWithoutPostInput | Prisma.PostLikeCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.PostLikeUpsertWithWhereUniqueWithoutPostInput | Prisma.PostLikeUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.PostLikeCreateManyPostInputEnvelope
  set?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  disconnect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  delete?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  connect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  update?: Prisma.PostLikeUpdateWithWhereUniqueWithoutPostInput | Prisma.PostLikeUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.PostLikeUpdateManyWithWhereWithoutPostInput | Prisma.PostLikeUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.PostLikeScalarWhereInput | Prisma.PostLikeScalarWhereInput[]
}

export type PostLikeUncheckedUpdateManyWithoutPostNestedInput = {
  create?: Prisma.XOR<Prisma.PostLikeCreateWithoutPostInput, Prisma.PostLikeUncheckedCreateWithoutPostInput> | Prisma.PostLikeCreateWithoutPostInput[] | Prisma.PostLikeUncheckedCreateWithoutPostInput[]
  connectOrCreate?: Prisma.PostLikeCreateOrConnectWithoutPostInput | Prisma.PostLikeCreateOrConnectWithoutPostInput[]
  upsert?: Prisma.PostLikeUpsertWithWhereUniqueWithoutPostInput | Prisma.PostLikeUpsertWithWhereUniqueWithoutPostInput[]
  createMany?: Prisma.PostLikeCreateManyPostInputEnvelope
  set?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  disconnect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  delete?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  connect?: Prisma.PostLikeWhereUniqueInput | Prisma.PostLikeWhereUniqueInput[]
  update?: Prisma.PostLikeUpdateWithWhereUniqueWithoutPostInput | Prisma.PostLikeUpdateWithWhereUniqueWithoutPostInput[]
  updateMany?: Prisma.PostLikeUpdateManyWithWhereWithoutPostInput | Prisma.PostLikeUpdateManyWithWhereWithoutPostInput[]
  deleteMany?: Prisma.PostLikeScalarWhereInput | Prisma.PostLikeScalarWhereInput[]
}

export type PostLikeCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  post: Prisma.PostCreateNestedOneWithoutLikedBysInput
}

export type PostLikeUncheckedCreateWithoutUserInput = {
  post_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostLikeCreateOrConnectWithoutUserInput = {
  where: Prisma.PostLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.PostLikeCreateWithoutUserInput, Prisma.PostLikeUncheckedCreateWithoutUserInput>
}

export type PostLikeCreateManyUserInputEnvelope = {
  data: Prisma.PostLikeCreateManyUserInput | Prisma.PostLikeCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PostLikeUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PostLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.PostLikeUpdateWithoutUserInput, Prisma.PostLikeUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PostLikeCreateWithoutUserInput, Prisma.PostLikeUncheckedCreateWithoutUserInput>
}

export type PostLikeUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PostLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.PostLikeUpdateWithoutUserInput, Prisma.PostLikeUncheckedUpdateWithoutUserInput>
}

export type PostLikeUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PostLikeScalarWhereInput
  data: Prisma.XOR<Prisma.PostLikeUpdateManyMutationInput, Prisma.PostLikeUncheckedUpdateManyWithoutUserInput>
}

export type PostLikeScalarWhereInput = {
  AND?: Prisma.PostLikeScalarWhereInput | Prisma.PostLikeScalarWhereInput[]
  OR?: Prisma.PostLikeScalarWhereInput[]
  NOT?: Prisma.PostLikeScalarWhereInput | Prisma.PostLikeScalarWhereInput[]
  user_id?: Prisma.StringFilter<"PostLike"> | string
  post_id?: Prisma.StringFilter<"PostLike"> | string
  createdAt?: Prisma.DateTimeFilter<"PostLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PostLike"> | Date | string
}

export type PostLikeCreateWithoutPostInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutPosts_likedInput
}

export type PostLikeUncheckedCreateWithoutPostInput = {
  user_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostLikeCreateOrConnectWithoutPostInput = {
  where: Prisma.PostLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.PostLikeCreateWithoutPostInput, Prisma.PostLikeUncheckedCreateWithoutPostInput>
}

export type PostLikeCreateManyPostInputEnvelope = {
  data: Prisma.PostLikeCreateManyPostInput | Prisma.PostLikeCreateManyPostInput[]
  skipDuplicates?: boolean
}

export type PostLikeUpsertWithWhereUniqueWithoutPostInput = {
  where: Prisma.PostLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.PostLikeUpdateWithoutPostInput, Prisma.PostLikeUncheckedUpdateWithoutPostInput>
  create: Prisma.XOR<Prisma.PostLikeCreateWithoutPostInput, Prisma.PostLikeUncheckedCreateWithoutPostInput>
}

export type PostLikeUpdateWithWhereUniqueWithoutPostInput = {
  where: Prisma.PostLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.PostLikeUpdateWithoutPostInput, Prisma.PostLikeUncheckedUpdateWithoutPostInput>
}

export type PostLikeUpdateManyWithWhereWithoutPostInput = {
  where: Prisma.PostLikeScalarWhereInput
  data: Prisma.XOR<Prisma.PostLikeUpdateManyMutationInput, Prisma.PostLikeUncheckedUpdateManyWithoutPostInput>
}

export type PostLikeCreateManyUserInput = {
  post_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostLikeUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  post?: Prisma.PostUpdateOneRequiredWithoutLikedBysNestedInput
}

export type PostLikeUncheckedUpdateWithoutUserInput = {
  post_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostLikeUncheckedUpdateManyWithoutUserInput = {
  post_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostLikeCreateManyPostInput = {
  user_id: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PostLikeUpdateWithoutPostInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutPosts_likedNestedInput
}

export type PostLikeUncheckedUpdateWithoutPostInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PostLikeUncheckedUpdateManyWithoutPostInput = {
  user_id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PostLikeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  user_id?: boolean
  post_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postLike"]>

export type PostLikeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  user_id?: boolean
  post_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postLike"]>

export type PostLikeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  user_id?: boolean
  post_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}, ExtArgs["result"]["postLike"]>

export type PostLikeSelectScalar = {
  user_id?: boolean
  post_id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PostLikeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"user_id" | "post_id" | "createdAt" | "updatedAt", ExtArgs["result"]["postLike"]>
export type PostLikeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}
export type PostLikeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}
export type PostLikeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  post?: boolean | Prisma.PostDefaultArgs<ExtArgs>
}

export type $PostLikePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PostLike"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    post: Prisma.$PostPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    user_id: string
    post_id: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["postLike"]>
  composites: {}
}

export type PostLikeGetPayload<S extends boolean | null | undefined | PostLikeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PostLikePayload, S>

export type PostLikeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PostLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PostLikeCountAggregateInputType | true
  }

export interface PostLikeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostLike'], meta: { name: 'PostLike' } }
  /**
   * Find zero or one PostLike that matches the filter.
   * @param {PostLikeFindUniqueArgs} args - Arguments to find a PostLike
   * @example
   * // Get one PostLike
   * const postLike = await prisma.postLike.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PostLikeFindUniqueArgs>(args: Prisma.SelectSubset<T, PostLikeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PostLikeClient<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PostLike that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PostLikeFindUniqueOrThrowArgs} args - Arguments to find a PostLike
   * @example
   * // Get one PostLike
   * const postLike = await prisma.postLike.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PostLikeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PostLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostLikeClient<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostLike that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostLikeFindFirstArgs} args - Arguments to find a PostLike
   * @example
   * // Get one PostLike
   * const postLike = await prisma.postLike.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PostLikeFindFirstArgs>(args?: Prisma.SelectSubset<T, PostLikeFindFirstArgs<ExtArgs>>): Prisma.Prisma__PostLikeClient<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PostLike that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostLikeFindFirstOrThrowArgs} args - Arguments to find a PostLike
   * @example
   * // Get one PostLike
   * const postLike = await prisma.postLike.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PostLikeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PostLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PostLikeClient<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PostLikes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostLikeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PostLikes
   * const postLikes = await prisma.postLike.findMany()
   * 
   * // Get first 10 PostLikes
   * const postLikes = await prisma.postLike.findMany({ take: 10 })
   * 
   * // Only select the `user_id`
   * const postLikeWithUser_idOnly = await prisma.postLike.findMany({ select: { user_id: true } })
   * 
   */
  findMany<T extends PostLikeFindManyArgs>(args?: Prisma.SelectSubset<T, PostLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PostLike.
   * @param {PostLikeCreateArgs} args - Arguments to create a PostLike.
   * @example
   * // Create one PostLike
   * const PostLike = await prisma.postLike.create({
   *   data: {
   *     // ... data to create a PostLike
   *   }
   * })
   * 
   */
  create<T extends PostLikeCreateArgs>(args: Prisma.SelectSubset<T, PostLikeCreateArgs<ExtArgs>>): Prisma.Prisma__PostLikeClient<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PostLikes.
   * @param {PostLikeCreateManyArgs} args - Arguments to create many PostLikes.
   * @example
   * // Create many PostLikes
   * const postLike = await prisma.postLike.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PostLikeCreateManyArgs>(args?: Prisma.SelectSubset<T, PostLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PostLikes and returns the data saved in the database.
   * @param {PostLikeCreateManyAndReturnArgs} args - Arguments to create many PostLikes.
   * @example
   * // Create many PostLikes
   * const postLike = await prisma.postLike.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PostLikes and only return the `user_id`
   * const postLikeWithUser_idOnly = await prisma.postLike.createManyAndReturn({
   *   select: { user_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PostLikeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PostLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PostLike.
   * @param {PostLikeDeleteArgs} args - Arguments to delete one PostLike.
   * @example
   * // Delete one PostLike
   * const PostLike = await prisma.postLike.delete({
   *   where: {
   *     // ... filter to delete one PostLike
   *   }
   * })
   * 
   */
  delete<T extends PostLikeDeleteArgs>(args: Prisma.SelectSubset<T, PostLikeDeleteArgs<ExtArgs>>): Prisma.Prisma__PostLikeClient<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PostLike.
   * @param {PostLikeUpdateArgs} args - Arguments to update one PostLike.
   * @example
   * // Update one PostLike
   * const postLike = await prisma.postLike.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PostLikeUpdateArgs>(args: Prisma.SelectSubset<T, PostLikeUpdateArgs<ExtArgs>>): Prisma.Prisma__PostLikeClient<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PostLikes.
   * @param {PostLikeDeleteManyArgs} args - Arguments to filter PostLikes to delete.
   * @example
   * // Delete a few PostLikes
   * const { count } = await prisma.postLike.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PostLikeDeleteManyArgs>(args?: Prisma.SelectSubset<T, PostLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostLikeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PostLikes
   * const postLike = await prisma.postLike.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PostLikeUpdateManyArgs>(args: Prisma.SelectSubset<T, PostLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PostLikes and returns the data updated in the database.
   * @param {PostLikeUpdateManyAndReturnArgs} args - Arguments to update many PostLikes.
   * @example
   * // Update many PostLikes
   * const postLike = await prisma.postLike.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PostLikes and only return the `user_id`
   * const postLikeWithUser_idOnly = await prisma.postLike.updateManyAndReturn({
   *   select: { user_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PostLikeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PostLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PostLike.
   * @param {PostLikeUpsertArgs} args - Arguments to update or create a PostLike.
   * @example
   * // Update or create a PostLike
   * const postLike = await prisma.postLike.upsert({
   *   create: {
   *     // ... data to create a PostLike
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PostLike we want to update
   *   }
   * })
   */
  upsert<T extends PostLikeUpsertArgs>(args: Prisma.SelectSubset<T, PostLikeUpsertArgs<ExtArgs>>): Prisma.Prisma__PostLikeClient<runtime.Types.Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PostLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostLikeCountArgs} args - Arguments to filter PostLikes to count.
   * @example
   * // Count the number of PostLikes
   * const count = await prisma.postLike.count({
   *   where: {
   *     // ... the filter for the PostLikes we want to count
   *   }
   * })
  **/
  count<T extends PostLikeCountArgs>(
    args?: Prisma.Subset<T, PostLikeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PostLikeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PostLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PostLikeAggregateArgs>(args: Prisma.Subset<T, PostLikeAggregateArgs>): Prisma.PrismaPromise<GetPostLikeAggregateType<T>>

  /**
   * Group by PostLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PostLikeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PostLikeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PostLikeGroupByArgs['orderBy'] }
      : { orderBy?: PostLikeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PostLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PostLike model
 */
readonly fields: PostLikeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PostLike.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PostLikeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  post<T extends Prisma.PostDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PostDefaultArgs<ExtArgs>>): Prisma.Prisma__PostClient<runtime.Types.Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PostLike model
 */
export interface PostLikeFieldRefs {
  readonly user_id: Prisma.FieldRef<"PostLike", 'String'>
  readonly post_id: Prisma.FieldRef<"PostLike", 'String'>
  readonly createdAt: Prisma.FieldRef<"PostLike", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PostLike", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PostLike findUnique
 */
export type PostLikeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * Filter, which PostLike to fetch.
   */
  where: Prisma.PostLikeWhereUniqueInput
}

/**
 * PostLike findUniqueOrThrow
 */
export type PostLikeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * Filter, which PostLike to fetch.
   */
  where: Prisma.PostLikeWhereUniqueInput
}

/**
 * PostLike findFirst
 */
export type PostLikeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * Filter, which PostLike to fetch.
   */
  where?: Prisma.PostLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostLikes to fetch.
   */
  orderBy?: Prisma.PostLikeOrderByWithRelationInput | Prisma.PostLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostLikes.
   */
  cursor?: Prisma.PostLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostLikes.
   */
  distinct?: Prisma.PostLikeScalarFieldEnum | Prisma.PostLikeScalarFieldEnum[]
}

/**
 * PostLike findFirstOrThrow
 */
export type PostLikeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * Filter, which PostLike to fetch.
   */
  where?: Prisma.PostLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostLikes to fetch.
   */
  orderBy?: Prisma.PostLikeOrderByWithRelationInput | Prisma.PostLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PostLikes.
   */
  cursor?: Prisma.PostLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PostLikes.
   */
  distinct?: Prisma.PostLikeScalarFieldEnum | Prisma.PostLikeScalarFieldEnum[]
}

/**
 * PostLike findMany
 */
export type PostLikeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * Filter, which PostLikes to fetch.
   */
  where?: Prisma.PostLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PostLikes to fetch.
   */
  orderBy?: Prisma.PostLikeOrderByWithRelationInput | Prisma.PostLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PostLikes.
   */
  cursor?: Prisma.PostLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PostLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PostLikes.
   */
  skip?: number
  distinct?: Prisma.PostLikeScalarFieldEnum | Prisma.PostLikeScalarFieldEnum[]
}

/**
 * PostLike create
 */
export type PostLikeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * The data needed to create a PostLike.
   */
  data: Prisma.XOR<Prisma.PostLikeCreateInput, Prisma.PostLikeUncheckedCreateInput>
}

/**
 * PostLike createMany
 */
export type PostLikeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PostLikes.
   */
  data: Prisma.PostLikeCreateManyInput | Prisma.PostLikeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PostLike createManyAndReturn
 */
export type PostLikeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * The data used to create many PostLikes.
   */
  data: Prisma.PostLikeCreateManyInput | Prisma.PostLikeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PostLike update
 */
export type PostLikeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * The data needed to update a PostLike.
   */
  data: Prisma.XOR<Prisma.PostLikeUpdateInput, Prisma.PostLikeUncheckedUpdateInput>
  /**
   * Choose, which PostLike to update.
   */
  where: Prisma.PostLikeWhereUniqueInput
}

/**
 * PostLike updateMany
 */
export type PostLikeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PostLikes.
   */
  data: Prisma.XOR<Prisma.PostLikeUpdateManyMutationInput, Prisma.PostLikeUncheckedUpdateManyInput>
  /**
   * Filter which PostLikes to update
   */
  where?: Prisma.PostLikeWhereInput
  /**
   * Limit how many PostLikes to update.
   */
  limit?: number
}

/**
 * PostLike updateManyAndReturn
 */
export type PostLikeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * The data used to update PostLikes.
   */
  data: Prisma.XOR<Prisma.PostLikeUpdateManyMutationInput, Prisma.PostLikeUncheckedUpdateManyInput>
  /**
   * Filter which PostLikes to update
   */
  where?: Prisma.PostLikeWhereInput
  /**
   * Limit how many PostLikes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PostLike upsert
 */
export type PostLikeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * The filter to search for the PostLike to update in case it exists.
   */
  where: Prisma.PostLikeWhereUniqueInput
  /**
   * In case the PostLike found by the `where` argument doesn't exist, create a new PostLike with this data.
   */
  create: Prisma.XOR<Prisma.PostLikeCreateInput, Prisma.PostLikeUncheckedCreateInput>
  /**
   * In case the PostLike was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PostLikeUpdateInput, Prisma.PostLikeUncheckedUpdateInput>
}

/**
 * PostLike delete
 */
export type PostLikeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
  /**
   * Filter which PostLike to delete.
   */
  where: Prisma.PostLikeWhereUniqueInput
}

/**
 * PostLike deleteMany
 */
export type PostLikeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PostLikes to delete
   */
  where?: Prisma.PostLikeWhereInput
  /**
   * Limit how many PostLikes to delete.
   */
  limit?: number
}

/**
 * PostLike without action
 */
export type PostLikeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PostLike
   */
  select?: Prisma.PostLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PostLike
   */
  omit?: Prisma.PostLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PostLikeInclude<ExtArgs> | null
}
