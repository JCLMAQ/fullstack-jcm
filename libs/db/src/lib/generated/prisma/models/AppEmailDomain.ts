
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AppEmailDomain` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model AppEmailDomain
 * 
 */
export type AppEmailDomainModel = runtime.Types.Result.DefaultSelection<Prisma.$AppEmailDomainPayload>

export type AggregateAppEmailDomain = {
  _count: AppEmailDomainCountAggregateOutputType | null
  _avg: AppEmailDomainAvgAggregateOutputType | null
  _sum: AppEmailDomainSumAggregateOutputType | null
  _min: AppEmailDomainMinAggregateOutputType | null
  _max: AppEmailDomainMaxAggregateOutputType | null
}

export type AppEmailDomainAvgAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type AppEmailDomainSumAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type AppEmailDomainMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  domain: string | null
  allowed: boolean | null
}

export type AppEmailDomainMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  domain: string | null
  allowed: boolean | null
}

export type AppEmailDomainCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  published: number
  isPublic: number
  isDeleted: number
  isDeletedDT: number
  domain: number
  allowed: number
  _all: number
}


export type AppEmailDomainAvgAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type AppEmailDomainSumAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type AppEmailDomainMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  domain?: true
  allowed?: true
}

export type AppEmailDomainMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  domain?: true
  allowed?: true
}

export type AppEmailDomainCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  domain?: true
  allowed?: true
  _all?: true
}

export type AppEmailDomainAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AppEmailDomain to aggregate.
   */
  where?: Prisma.AppEmailDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AppEmailDomains to fetch.
   */
  orderBy?: Prisma.AppEmailDomainOrderByWithRelationInput | Prisma.AppEmailDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AppEmailDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AppEmailDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AppEmailDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AppEmailDomains
  **/
  _count?: true | AppEmailDomainCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AppEmailDomainAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AppEmailDomainSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AppEmailDomainMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AppEmailDomainMaxAggregateInputType
}

export type GetAppEmailDomainAggregateType<T extends AppEmailDomainAggregateArgs> = {
      [P in keyof T & keyof AggregateAppEmailDomain]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAppEmailDomain[P]>
    : Prisma.GetScalarType<T[P], AggregateAppEmailDomain[P]>
}




export type AppEmailDomainGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AppEmailDomainWhereInput
  orderBy?: Prisma.AppEmailDomainOrderByWithAggregationInput | Prisma.AppEmailDomainOrderByWithAggregationInput[]
  by: Prisma.AppEmailDomainScalarFieldEnum[] | Prisma.AppEmailDomainScalarFieldEnum
  having?: Prisma.AppEmailDomainScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AppEmailDomainCountAggregateInputType | true
  _avg?: AppEmailDomainAvgAggregateInputType
  _sum?: AppEmailDomainSumAggregateInputType
  _min?: AppEmailDomainMinAggregateInputType
  _max?: AppEmailDomainMaxAggregateInputType
}

export type AppEmailDomainGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  published: boolean
  isPublic: boolean
  isDeleted: number
  isDeletedDT: Date | null
  domain: string
  allowed: boolean
  _count: AppEmailDomainCountAggregateOutputType | null
  _avg: AppEmailDomainAvgAggregateOutputType | null
  _sum: AppEmailDomainSumAggregateOutputType | null
  _min: AppEmailDomainMinAggregateOutputType | null
  _max: AppEmailDomainMaxAggregateOutputType | null
}

type GetAppEmailDomainGroupByPayload<T extends AppEmailDomainGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AppEmailDomainGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AppEmailDomainGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AppEmailDomainGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AppEmailDomainGroupByOutputType[P]>
      }
    >
  >



export type AppEmailDomainWhereInput = {
  AND?: Prisma.AppEmailDomainWhereInput | Prisma.AppEmailDomainWhereInput[]
  OR?: Prisma.AppEmailDomainWhereInput[]
  NOT?: Prisma.AppEmailDomainWhereInput | Prisma.AppEmailDomainWhereInput[]
  id?: Prisma.IntFilter<"AppEmailDomain"> | number
  createdAt?: Prisma.DateTimeFilter<"AppEmailDomain"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AppEmailDomain"> | Date | string
  published?: Prisma.BoolFilter<"AppEmailDomain"> | boolean
  isPublic?: Prisma.BoolFilter<"AppEmailDomain"> | boolean
  isDeleted?: Prisma.IntFilter<"AppEmailDomain"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"AppEmailDomain"> | Date | string | null
  domain?: Prisma.StringFilter<"AppEmailDomain"> | string
  allowed?: Prisma.BoolFilter<"AppEmailDomain"> | boolean
}

export type AppEmailDomainOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  domain?: Prisma.SortOrder
  allowed?: Prisma.SortOrder
}

export type AppEmailDomainWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  domain?: string
  AND?: Prisma.AppEmailDomainWhereInput | Prisma.AppEmailDomainWhereInput[]
  OR?: Prisma.AppEmailDomainWhereInput[]
  NOT?: Prisma.AppEmailDomainWhereInput | Prisma.AppEmailDomainWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"AppEmailDomain"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AppEmailDomain"> | Date | string
  published?: Prisma.BoolFilter<"AppEmailDomain"> | boolean
  isPublic?: Prisma.BoolFilter<"AppEmailDomain"> | boolean
  isDeleted?: Prisma.IntFilter<"AppEmailDomain"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"AppEmailDomain"> | Date | string | null
  allowed?: Prisma.BoolFilter<"AppEmailDomain"> | boolean
}, "id" | "domain">

export type AppEmailDomainOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  domain?: Prisma.SortOrder
  allowed?: Prisma.SortOrder
  _count?: Prisma.AppEmailDomainCountOrderByAggregateInput
  _avg?: Prisma.AppEmailDomainAvgOrderByAggregateInput
  _max?: Prisma.AppEmailDomainMaxOrderByAggregateInput
  _min?: Prisma.AppEmailDomainMinOrderByAggregateInput
  _sum?: Prisma.AppEmailDomainSumOrderByAggregateInput
}

export type AppEmailDomainScalarWhereWithAggregatesInput = {
  AND?: Prisma.AppEmailDomainScalarWhereWithAggregatesInput | Prisma.AppEmailDomainScalarWhereWithAggregatesInput[]
  OR?: Prisma.AppEmailDomainScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AppEmailDomainScalarWhereWithAggregatesInput | Prisma.AppEmailDomainScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"AppEmailDomain"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AppEmailDomain"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AppEmailDomain"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"AppEmailDomain"> | boolean
  isPublic?: Prisma.BoolWithAggregatesFilter<"AppEmailDomain"> | boolean
  isDeleted?: Prisma.IntWithAggregatesFilter<"AppEmailDomain"> | number
  isDeletedDT?: Prisma.DateTimeNullableWithAggregatesFilter<"AppEmailDomain"> | Date | string | null
  domain?: Prisma.StringWithAggregatesFilter<"AppEmailDomain"> | string
  allowed?: Prisma.BoolWithAggregatesFilter<"AppEmailDomain"> | boolean
}

export type AppEmailDomainCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domain: string
  allowed: boolean
}

export type AppEmailDomainUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domain: string
  allowed: boolean
}

export type AppEmailDomainUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  allowed?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AppEmailDomainUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  allowed?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AppEmailDomainCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  domain: string
  allowed: boolean
}

export type AppEmailDomainUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  allowed?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AppEmailDomainUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  allowed?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AppEmailDomainCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  allowed?: Prisma.SortOrder
}

export type AppEmailDomainAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type AppEmailDomainMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  allowed?: Prisma.SortOrder
}

export type AppEmailDomainMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  allowed?: Prisma.SortOrder
}

export type AppEmailDomainSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}



export type AppEmailDomainSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  domain?: boolean
  allowed?: boolean
}, ExtArgs["result"]["appEmailDomain"]>

export type AppEmailDomainSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  domain?: boolean
  allowed?: boolean
}, ExtArgs["result"]["appEmailDomain"]>

export type AppEmailDomainSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  domain?: boolean
  allowed?: boolean
}, ExtArgs["result"]["appEmailDomain"]>

export type AppEmailDomainSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  domain?: boolean
  allowed?: boolean
}

export type AppEmailDomainOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "published" | "isPublic" | "isDeleted" | "isDeletedDT" | "domain" | "allowed", ExtArgs["result"]["appEmailDomain"]>

export type $AppEmailDomainPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AppEmailDomain"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    published: boolean
    isPublic: boolean
    isDeleted: number
    isDeletedDT: Date | null
    domain: string
    allowed: boolean
  }, ExtArgs["result"]["appEmailDomain"]>
  composites: {}
}

export type AppEmailDomainGetPayload<S extends boolean | null | undefined | AppEmailDomainDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload, S>

export type AppEmailDomainCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AppEmailDomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AppEmailDomainCountAggregateInputType | true
  }

export interface AppEmailDomainDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppEmailDomain'], meta: { name: 'AppEmailDomain' } }
  /**
   * Find zero or one AppEmailDomain that matches the filter.
   * @param {AppEmailDomainFindUniqueArgs} args - Arguments to find a AppEmailDomain
   * @example
   * // Get one AppEmailDomain
   * const appEmailDomain = await prisma.appEmailDomain.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AppEmailDomainFindUniqueArgs>(args: Prisma.SelectSubset<T, AppEmailDomainFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AppEmailDomainClient<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AppEmailDomain that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AppEmailDomainFindUniqueOrThrowArgs} args - Arguments to find a AppEmailDomain
   * @example
   * // Get one AppEmailDomain
   * const appEmailDomain = await prisma.appEmailDomain.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AppEmailDomainFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AppEmailDomainFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppEmailDomainClient<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AppEmailDomain that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppEmailDomainFindFirstArgs} args - Arguments to find a AppEmailDomain
   * @example
   * // Get one AppEmailDomain
   * const appEmailDomain = await prisma.appEmailDomain.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AppEmailDomainFindFirstArgs>(args?: Prisma.SelectSubset<T, AppEmailDomainFindFirstArgs<ExtArgs>>): Prisma.Prisma__AppEmailDomainClient<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AppEmailDomain that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppEmailDomainFindFirstOrThrowArgs} args - Arguments to find a AppEmailDomain
   * @example
   * // Get one AppEmailDomain
   * const appEmailDomain = await prisma.appEmailDomain.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AppEmailDomainFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AppEmailDomainFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AppEmailDomainClient<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AppEmailDomains that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppEmailDomainFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AppEmailDomains
   * const appEmailDomains = await prisma.appEmailDomain.findMany()
   * 
   * // Get first 10 AppEmailDomains
   * const appEmailDomains = await prisma.appEmailDomain.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const appEmailDomainWithIdOnly = await prisma.appEmailDomain.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AppEmailDomainFindManyArgs>(args?: Prisma.SelectSubset<T, AppEmailDomainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AppEmailDomain.
   * @param {AppEmailDomainCreateArgs} args - Arguments to create a AppEmailDomain.
   * @example
   * // Create one AppEmailDomain
   * const AppEmailDomain = await prisma.appEmailDomain.create({
   *   data: {
   *     // ... data to create a AppEmailDomain
   *   }
   * })
   * 
   */
  create<T extends AppEmailDomainCreateArgs>(args: Prisma.SelectSubset<T, AppEmailDomainCreateArgs<ExtArgs>>): Prisma.Prisma__AppEmailDomainClient<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AppEmailDomains.
   * @param {AppEmailDomainCreateManyArgs} args - Arguments to create many AppEmailDomains.
   * @example
   * // Create many AppEmailDomains
   * const appEmailDomain = await prisma.appEmailDomain.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AppEmailDomainCreateManyArgs>(args?: Prisma.SelectSubset<T, AppEmailDomainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AppEmailDomains and returns the data saved in the database.
   * @param {AppEmailDomainCreateManyAndReturnArgs} args - Arguments to create many AppEmailDomains.
   * @example
   * // Create many AppEmailDomains
   * const appEmailDomain = await prisma.appEmailDomain.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AppEmailDomains and only return the `id`
   * const appEmailDomainWithIdOnly = await prisma.appEmailDomain.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AppEmailDomainCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AppEmailDomainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AppEmailDomain.
   * @param {AppEmailDomainDeleteArgs} args - Arguments to delete one AppEmailDomain.
   * @example
   * // Delete one AppEmailDomain
   * const AppEmailDomain = await prisma.appEmailDomain.delete({
   *   where: {
   *     // ... filter to delete one AppEmailDomain
   *   }
   * })
   * 
   */
  delete<T extends AppEmailDomainDeleteArgs>(args: Prisma.SelectSubset<T, AppEmailDomainDeleteArgs<ExtArgs>>): Prisma.Prisma__AppEmailDomainClient<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AppEmailDomain.
   * @param {AppEmailDomainUpdateArgs} args - Arguments to update one AppEmailDomain.
   * @example
   * // Update one AppEmailDomain
   * const appEmailDomain = await prisma.appEmailDomain.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AppEmailDomainUpdateArgs>(args: Prisma.SelectSubset<T, AppEmailDomainUpdateArgs<ExtArgs>>): Prisma.Prisma__AppEmailDomainClient<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AppEmailDomains.
   * @param {AppEmailDomainDeleteManyArgs} args - Arguments to filter AppEmailDomains to delete.
   * @example
   * // Delete a few AppEmailDomains
   * const { count } = await prisma.appEmailDomain.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AppEmailDomainDeleteManyArgs>(args?: Prisma.SelectSubset<T, AppEmailDomainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AppEmailDomains.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppEmailDomainUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AppEmailDomains
   * const appEmailDomain = await prisma.appEmailDomain.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AppEmailDomainUpdateManyArgs>(args: Prisma.SelectSubset<T, AppEmailDomainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AppEmailDomains and returns the data updated in the database.
   * @param {AppEmailDomainUpdateManyAndReturnArgs} args - Arguments to update many AppEmailDomains.
   * @example
   * // Update many AppEmailDomains
   * const appEmailDomain = await prisma.appEmailDomain.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AppEmailDomains and only return the `id`
   * const appEmailDomainWithIdOnly = await prisma.appEmailDomain.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AppEmailDomainUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AppEmailDomainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AppEmailDomain.
   * @param {AppEmailDomainUpsertArgs} args - Arguments to update or create a AppEmailDomain.
   * @example
   * // Update or create a AppEmailDomain
   * const appEmailDomain = await prisma.appEmailDomain.upsert({
   *   create: {
   *     // ... data to create a AppEmailDomain
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AppEmailDomain we want to update
   *   }
   * })
   */
  upsert<T extends AppEmailDomainUpsertArgs>(args: Prisma.SelectSubset<T, AppEmailDomainUpsertArgs<ExtArgs>>): Prisma.Prisma__AppEmailDomainClient<runtime.Types.Result.GetResult<Prisma.$AppEmailDomainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AppEmailDomains.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppEmailDomainCountArgs} args - Arguments to filter AppEmailDomains to count.
   * @example
   * // Count the number of AppEmailDomains
   * const count = await prisma.appEmailDomain.count({
   *   where: {
   *     // ... the filter for the AppEmailDomains we want to count
   *   }
   * })
  **/
  count<T extends AppEmailDomainCountArgs>(
    args?: Prisma.Subset<T, AppEmailDomainCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AppEmailDomainCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AppEmailDomain.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppEmailDomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AppEmailDomainAggregateArgs>(args: Prisma.Subset<T, AppEmailDomainAggregateArgs>): Prisma.PrismaPromise<GetAppEmailDomainAggregateType<T>>

  /**
   * Group by AppEmailDomain.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AppEmailDomainGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AppEmailDomainGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AppEmailDomainGroupByArgs['orderBy'] }
      : { orderBy?: AppEmailDomainGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AppEmailDomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppEmailDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AppEmailDomain model
 */
readonly fields: AppEmailDomainFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AppEmailDomain.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AppEmailDomainClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AppEmailDomain model
 */
export interface AppEmailDomainFieldRefs {
  readonly id: Prisma.FieldRef<"AppEmailDomain", 'Int'>
  readonly createdAt: Prisma.FieldRef<"AppEmailDomain", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AppEmailDomain", 'DateTime'>
  readonly published: Prisma.FieldRef<"AppEmailDomain", 'Boolean'>
  readonly isPublic: Prisma.FieldRef<"AppEmailDomain", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"AppEmailDomain", 'Int'>
  readonly isDeletedDT: Prisma.FieldRef<"AppEmailDomain", 'DateTime'>
  readonly domain: Prisma.FieldRef<"AppEmailDomain", 'String'>
  readonly allowed: Prisma.FieldRef<"AppEmailDomain", 'Boolean'>
}
    

// Custom InputTypes
/**
 * AppEmailDomain findUnique
 */
export type AppEmailDomainFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * Filter, which AppEmailDomain to fetch.
   */
  where: Prisma.AppEmailDomainWhereUniqueInput
}

/**
 * AppEmailDomain findUniqueOrThrow
 */
export type AppEmailDomainFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * Filter, which AppEmailDomain to fetch.
   */
  where: Prisma.AppEmailDomainWhereUniqueInput
}

/**
 * AppEmailDomain findFirst
 */
export type AppEmailDomainFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * Filter, which AppEmailDomain to fetch.
   */
  where?: Prisma.AppEmailDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AppEmailDomains to fetch.
   */
  orderBy?: Prisma.AppEmailDomainOrderByWithRelationInput | Prisma.AppEmailDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AppEmailDomains.
   */
  cursor?: Prisma.AppEmailDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AppEmailDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AppEmailDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AppEmailDomains.
   */
  distinct?: Prisma.AppEmailDomainScalarFieldEnum | Prisma.AppEmailDomainScalarFieldEnum[]
}

/**
 * AppEmailDomain findFirstOrThrow
 */
export type AppEmailDomainFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * Filter, which AppEmailDomain to fetch.
   */
  where?: Prisma.AppEmailDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AppEmailDomains to fetch.
   */
  orderBy?: Prisma.AppEmailDomainOrderByWithRelationInput | Prisma.AppEmailDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AppEmailDomains.
   */
  cursor?: Prisma.AppEmailDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AppEmailDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AppEmailDomains.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AppEmailDomains.
   */
  distinct?: Prisma.AppEmailDomainScalarFieldEnum | Prisma.AppEmailDomainScalarFieldEnum[]
}

/**
 * AppEmailDomain findMany
 */
export type AppEmailDomainFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * Filter, which AppEmailDomains to fetch.
   */
  where?: Prisma.AppEmailDomainWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AppEmailDomains to fetch.
   */
  orderBy?: Prisma.AppEmailDomainOrderByWithRelationInput | Prisma.AppEmailDomainOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AppEmailDomains.
   */
  cursor?: Prisma.AppEmailDomainWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AppEmailDomains from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AppEmailDomains.
   */
  skip?: number
  distinct?: Prisma.AppEmailDomainScalarFieldEnum | Prisma.AppEmailDomainScalarFieldEnum[]
}

/**
 * AppEmailDomain create
 */
export type AppEmailDomainCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * The data needed to create a AppEmailDomain.
   */
  data: Prisma.XOR<Prisma.AppEmailDomainCreateInput, Prisma.AppEmailDomainUncheckedCreateInput>
}

/**
 * AppEmailDomain createMany
 */
export type AppEmailDomainCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AppEmailDomains.
   */
  data: Prisma.AppEmailDomainCreateManyInput | Prisma.AppEmailDomainCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AppEmailDomain createManyAndReturn
 */
export type AppEmailDomainCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * The data used to create many AppEmailDomains.
   */
  data: Prisma.AppEmailDomainCreateManyInput | Prisma.AppEmailDomainCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AppEmailDomain update
 */
export type AppEmailDomainUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * The data needed to update a AppEmailDomain.
   */
  data: Prisma.XOR<Prisma.AppEmailDomainUpdateInput, Prisma.AppEmailDomainUncheckedUpdateInput>
  /**
   * Choose, which AppEmailDomain to update.
   */
  where: Prisma.AppEmailDomainWhereUniqueInput
}

/**
 * AppEmailDomain updateMany
 */
export type AppEmailDomainUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AppEmailDomains.
   */
  data: Prisma.XOR<Prisma.AppEmailDomainUpdateManyMutationInput, Prisma.AppEmailDomainUncheckedUpdateManyInput>
  /**
   * Filter which AppEmailDomains to update
   */
  where?: Prisma.AppEmailDomainWhereInput
  /**
   * Limit how many AppEmailDomains to update.
   */
  limit?: number
}

/**
 * AppEmailDomain updateManyAndReturn
 */
export type AppEmailDomainUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * The data used to update AppEmailDomains.
   */
  data: Prisma.XOR<Prisma.AppEmailDomainUpdateManyMutationInput, Prisma.AppEmailDomainUncheckedUpdateManyInput>
  /**
   * Filter which AppEmailDomains to update
   */
  where?: Prisma.AppEmailDomainWhereInput
  /**
   * Limit how many AppEmailDomains to update.
   */
  limit?: number
}

/**
 * AppEmailDomain upsert
 */
export type AppEmailDomainUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * The filter to search for the AppEmailDomain to update in case it exists.
   */
  where: Prisma.AppEmailDomainWhereUniqueInput
  /**
   * In case the AppEmailDomain found by the `where` argument doesn't exist, create a new AppEmailDomain with this data.
   */
  create: Prisma.XOR<Prisma.AppEmailDomainCreateInput, Prisma.AppEmailDomainUncheckedCreateInput>
  /**
   * In case the AppEmailDomain was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AppEmailDomainUpdateInput, Prisma.AppEmailDomainUncheckedUpdateInput>
}

/**
 * AppEmailDomain delete
 */
export type AppEmailDomainDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
  /**
   * Filter which AppEmailDomain to delete.
   */
  where: Prisma.AppEmailDomainWhereUniqueInput
}

/**
 * AppEmailDomain deleteMany
 */
export type AppEmailDomainDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AppEmailDomains to delete
   */
  where?: Prisma.AppEmailDomainWhereInput
  /**
   * Limit how many AppEmailDomains to delete.
   */
  limit?: number
}

/**
 * AppEmailDomain without action
 */
export type AppEmailDomainDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AppEmailDomain
   */
  select?: Prisma.AppEmailDomainSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AppEmailDomain
   */
  omit?: Prisma.AppEmailDomainOmit<ExtArgs> | null
}
