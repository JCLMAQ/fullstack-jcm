
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ConfigParam` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ConfigParam
 * 
 */
export type ConfigParamModel = runtime.Types.Result.DefaultSelection<Prisma.$ConfigParamPayload>

export type AggregateConfigParam = {
  _count: ConfigParamCountAggregateOutputType | null
  _avg: ConfigParamAvgAggregateOutputType | null
  _sum: ConfigParamSumAggregateOutputType | null
  _min: ConfigParamMinAggregateOutputType | null
  _max: ConfigParamMaxAggregateOutputType | null
}

export type ConfigParamAvgAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type ConfigParamSumAggregateOutputType = {
  id: number | null
  isDeleted: number | null
}

export type ConfigParamMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  name: string | null
  value: string | null
  utility: string | null
}

export type ConfigParamMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isPublic: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  name: string | null
  value: string | null
  utility: string | null
}

export type ConfigParamCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  published: number
  isPublic: number
  isDeleted: number
  isDeletedDT: number
  name: number
  value: number
  utility: number
  _all: number
}


export type ConfigParamAvgAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type ConfigParamSumAggregateInputType = {
  id?: true
  isDeleted?: true
}

export type ConfigParamMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  name?: true
  value?: true
  utility?: true
}

export type ConfigParamMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  name?: true
  value?: true
  utility?: true
}

export type ConfigParamCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isPublic?: true
  isDeleted?: true
  isDeletedDT?: true
  name?: true
  value?: true
  utility?: true
  _all?: true
}

export type ConfigParamAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConfigParam to aggregate.
   */
  where?: Prisma.ConfigParamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConfigParams to fetch.
   */
  orderBy?: Prisma.ConfigParamOrderByWithRelationInput | Prisma.ConfigParamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConfigParamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConfigParams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConfigParams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ConfigParams
  **/
  _count?: true | ConfigParamCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ConfigParamAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ConfigParamSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConfigParamMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConfigParamMaxAggregateInputType
}

export type GetConfigParamAggregateType<T extends ConfigParamAggregateArgs> = {
      [P in keyof T & keyof AggregateConfigParam]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConfigParam[P]>
    : Prisma.GetScalarType<T[P], AggregateConfigParam[P]>
}




export type ConfigParamGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConfigParamWhereInput
  orderBy?: Prisma.ConfigParamOrderByWithAggregationInput | Prisma.ConfigParamOrderByWithAggregationInput[]
  by: Prisma.ConfigParamScalarFieldEnum[] | Prisma.ConfigParamScalarFieldEnum
  having?: Prisma.ConfigParamScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConfigParamCountAggregateInputType | true
  _avg?: ConfigParamAvgAggregateInputType
  _sum?: ConfigParamSumAggregateInputType
  _min?: ConfigParamMinAggregateInputType
  _max?: ConfigParamMaxAggregateInputType
}

export type ConfigParamGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  published: boolean
  isPublic: boolean
  isDeleted: number
  isDeletedDT: Date | null
  name: string
  value: string
  utility: string
  _count: ConfigParamCountAggregateOutputType | null
  _avg: ConfigParamAvgAggregateOutputType | null
  _sum: ConfigParamSumAggregateOutputType | null
  _min: ConfigParamMinAggregateOutputType | null
  _max: ConfigParamMaxAggregateOutputType | null
}

type GetConfigParamGroupByPayload<T extends ConfigParamGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConfigParamGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConfigParamGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConfigParamGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConfigParamGroupByOutputType[P]>
      }
    >
  >



export type ConfigParamWhereInput = {
  AND?: Prisma.ConfigParamWhereInput | Prisma.ConfigParamWhereInput[]
  OR?: Prisma.ConfigParamWhereInput[]
  NOT?: Prisma.ConfigParamWhereInput | Prisma.ConfigParamWhereInput[]
  id?: Prisma.IntFilter<"ConfigParam"> | number
  createdAt?: Prisma.DateTimeFilter<"ConfigParam"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ConfigParam"> | Date | string
  published?: Prisma.BoolFilter<"ConfigParam"> | boolean
  isPublic?: Prisma.BoolFilter<"ConfigParam"> | boolean
  isDeleted?: Prisma.IntFilter<"ConfigParam"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"ConfigParam"> | Date | string | null
  name?: Prisma.StringFilter<"ConfigParam"> | string
  value?: Prisma.StringFilter<"ConfigParam"> | string
  utility?: Prisma.StringFilter<"ConfigParam"> | string
}

export type ConfigParamOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  utility?: Prisma.SortOrder
}

export type ConfigParamWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.ConfigParamWhereInput | Prisma.ConfigParamWhereInput[]
  OR?: Prisma.ConfigParamWhereInput[]
  NOT?: Prisma.ConfigParamWhereInput | Prisma.ConfigParamWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"ConfigParam"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ConfigParam"> | Date | string
  published?: Prisma.BoolFilter<"ConfigParam"> | boolean
  isPublic?: Prisma.BoolFilter<"ConfigParam"> | boolean
  isDeleted?: Prisma.IntFilter<"ConfigParam"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"ConfigParam"> | Date | string | null
  value?: Prisma.StringFilter<"ConfigParam"> | string
  utility?: Prisma.StringFilter<"ConfigParam"> | string
}, "id" | "name">

export type ConfigParamOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  utility?: Prisma.SortOrder
  _count?: Prisma.ConfigParamCountOrderByAggregateInput
  _avg?: Prisma.ConfigParamAvgOrderByAggregateInput
  _max?: Prisma.ConfigParamMaxOrderByAggregateInput
  _min?: Prisma.ConfigParamMinOrderByAggregateInput
  _sum?: Prisma.ConfigParamSumOrderByAggregateInput
}

export type ConfigParamScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConfigParamScalarWhereWithAggregatesInput | Prisma.ConfigParamScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConfigParamScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConfigParamScalarWhereWithAggregatesInput | Prisma.ConfigParamScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ConfigParam"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ConfigParam"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ConfigParam"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"ConfigParam"> | boolean
  isPublic?: Prisma.BoolWithAggregatesFilter<"ConfigParam"> | boolean
  isDeleted?: Prisma.IntWithAggregatesFilter<"ConfigParam"> | number
  isDeletedDT?: Prisma.DateTimeNullableWithAggregatesFilter<"ConfigParam"> | Date | string | null
  name?: Prisma.StringWithAggregatesFilter<"ConfigParam"> | string
  value?: Prisma.StringWithAggregatesFilter<"ConfigParam"> | string
  utility?: Prisma.StringWithAggregatesFilter<"ConfigParam"> | string
}

export type ConfigParamCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  name: string
  value: string
  utility: string
}

export type ConfigParamUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  name: string
  value: string
  utility: string
}

export type ConfigParamUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  utility?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConfigParamUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  utility?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConfigParamCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isPublic?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  name: string
  value: string
  utility: string
}

export type ConfigParamUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  utility?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConfigParamUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  name?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  utility?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ConfigParamCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  utility?: Prisma.SortOrder
}

export type ConfigParamAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}

export type ConfigParamMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  utility?: Prisma.SortOrder
}

export type ConfigParamMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  name?: Prisma.SortOrder
  value?: Prisma.SortOrder
  utility?: Prisma.SortOrder
}

export type ConfigParamSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
}



export type ConfigParamSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  name?: boolean
  value?: boolean
  utility?: boolean
}, ExtArgs["result"]["configParam"]>

export type ConfigParamSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  name?: boolean
  value?: boolean
  utility?: boolean
}, ExtArgs["result"]["configParam"]>

export type ConfigParamSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  name?: boolean
  value?: boolean
  utility?: boolean
}, ExtArgs["result"]["configParam"]>

export type ConfigParamSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isPublic?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  name?: boolean
  value?: boolean
  utility?: boolean
}

export type ConfigParamOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "published" | "isPublic" | "isDeleted" | "isDeletedDT" | "name" | "value" | "utility", ExtArgs["result"]["configParam"]>

export type $ConfigParamPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ConfigParam"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    published: boolean
    isPublic: boolean
    isDeleted: number
    isDeletedDT: Date | null
    name: string
    value: string
    utility: string
  }, ExtArgs["result"]["configParam"]>
  composites: {}
}

export type ConfigParamGetPayload<S extends boolean | null | undefined | ConfigParamDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload, S>

export type ConfigParamCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConfigParamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConfigParamCountAggregateInputType | true
  }

export interface ConfigParamDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConfigParam'], meta: { name: 'ConfigParam' } }
  /**
   * Find zero or one ConfigParam that matches the filter.
   * @param {ConfigParamFindUniqueArgs} args - Arguments to find a ConfigParam
   * @example
   * // Get one ConfigParam
   * const configParam = await prisma.configParam.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConfigParamFindUniqueArgs>(args: Prisma.SelectSubset<T, ConfigParamFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConfigParamClient<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ConfigParam that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConfigParamFindUniqueOrThrowArgs} args - Arguments to find a ConfigParam
   * @example
   * // Get one ConfigParam
   * const configParam = await prisma.configParam.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConfigParamFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConfigParamFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConfigParamClient<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConfigParam that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigParamFindFirstArgs} args - Arguments to find a ConfigParam
   * @example
   * // Get one ConfigParam
   * const configParam = await prisma.configParam.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConfigParamFindFirstArgs>(args?: Prisma.SelectSubset<T, ConfigParamFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConfigParamClient<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConfigParam that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigParamFindFirstOrThrowArgs} args - Arguments to find a ConfigParam
   * @example
   * // Get one ConfigParam
   * const configParam = await prisma.configParam.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConfigParamFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConfigParamFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConfigParamClient<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ConfigParams that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigParamFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ConfigParams
   * const configParams = await prisma.configParam.findMany()
   * 
   * // Get first 10 ConfigParams
   * const configParams = await prisma.configParam.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const configParamWithIdOnly = await prisma.configParam.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConfigParamFindManyArgs>(args?: Prisma.SelectSubset<T, ConfigParamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ConfigParam.
   * @param {ConfigParamCreateArgs} args - Arguments to create a ConfigParam.
   * @example
   * // Create one ConfigParam
   * const ConfigParam = await prisma.configParam.create({
   *   data: {
   *     // ... data to create a ConfigParam
   *   }
   * })
   * 
   */
  create<T extends ConfigParamCreateArgs>(args: Prisma.SelectSubset<T, ConfigParamCreateArgs<ExtArgs>>): Prisma.Prisma__ConfigParamClient<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ConfigParams.
   * @param {ConfigParamCreateManyArgs} args - Arguments to create many ConfigParams.
   * @example
   * // Create many ConfigParams
   * const configParam = await prisma.configParam.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConfigParamCreateManyArgs>(args?: Prisma.SelectSubset<T, ConfigParamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ConfigParams and returns the data saved in the database.
   * @param {ConfigParamCreateManyAndReturnArgs} args - Arguments to create many ConfigParams.
   * @example
   * // Create many ConfigParams
   * const configParam = await prisma.configParam.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ConfigParams and only return the `id`
   * const configParamWithIdOnly = await prisma.configParam.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConfigParamCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConfigParamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ConfigParam.
   * @param {ConfigParamDeleteArgs} args - Arguments to delete one ConfigParam.
   * @example
   * // Delete one ConfigParam
   * const ConfigParam = await prisma.configParam.delete({
   *   where: {
   *     // ... filter to delete one ConfigParam
   *   }
   * })
   * 
   */
  delete<T extends ConfigParamDeleteArgs>(args: Prisma.SelectSubset<T, ConfigParamDeleteArgs<ExtArgs>>): Prisma.Prisma__ConfigParamClient<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ConfigParam.
   * @param {ConfigParamUpdateArgs} args - Arguments to update one ConfigParam.
   * @example
   * // Update one ConfigParam
   * const configParam = await prisma.configParam.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConfigParamUpdateArgs>(args: Prisma.SelectSubset<T, ConfigParamUpdateArgs<ExtArgs>>): Prisma.Prisma__ConfigParamClient<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ConfigParams.
   * @param {ConfigParamDeleteManyArgs} args - Arguments to filter ConfigParams to delete.
   * @example
   * // Delete a few ConfigParams
   * const { count } = await prisma.configParam.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConfigParamDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConfigParamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConfigParams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigParamUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ConfigParams
   * const configParam = await prisma.configParam.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConfigParamUpdateManyArgs>(args: Prisma.SelectSubset<T, ConfigParamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConfigParams and returns the data updated in the database.
   * @param {ConfigParamUpdateManyAndReturnArgs} args - Arguments to update many ConfigParams.
   * @example
   * // Update many ConfigParams
   * const configParam = await prisma.configParam.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ConfigParams and only return the `id`
   * const configParamWithIdOnly = await prisma.configParam.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConfigParamUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConfigParamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ConfigParam.
   * @param {ConfigParamUpsertArgs} args - Arguments to update or create a ConfigParam.
   * @example
   * // Update or create a ConfigParam
   * const configParam = await prisma.configParam.upsert({
   *   create: {
   *     // ... data to create a ConfigParam
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ConfigParam we want to update
   *   }
   * })
   */
  upsert<T extends ConfigParamUpsertArgs>(args: Prisma.SelectSubset<T, ConfigParamUpsertArgs<ExtArgs>>): Prisma.Prisma__ConfigParamClient<runtime.Types.Result.GetResult<Prisma.$ConfigParamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ConfigParams.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigParamCountArgs} args - Arguments to filter ConfigParams to count.
   * @example
   * // Count the number of ConfigParams
   * const count = await prisma.configParam.count({
   *   where: {
   *     // ... the filter for the ConfigParams we want to count
   *   }
   * })
  **/
  count<T extends ConfigParamCountArgs>(
    args?: Prisma.Subset<T, ConfigParamCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConfigParamCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ConfigParam.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigParamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConfigParamAggregateArgs>(args: Prisma.Subset<T, ConfigParamAggregateArgs>): Prisma.PrismaPromise<GetConfigParamAggregateType<T>>

  /**
   * Group by ConfigParam.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigParamGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConfigParamGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConfigParamGroupByArgs['orderBy'] }
      : { orderBy?: ConfigParamGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConfigParamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfigParamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ConfigParam model
 */
readonly fields: ConfigParamFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ConfigParam.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConfigParamClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ConfigParam model
 */
export interface ConfigParamFieldRefs {
  readonly id: Prisma.FieldRef<"ConfigParam", 'Int'>
  readonly createdAt: Prisma.FieldRef<"ConfigParam", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ConfigParam", 'DateTime'>
  readonly published: Prisma.FieldRef<"ConfigParam", 'Boolean'>
  readonly isPublic: Prisma.FieldRef<"ConfigParam", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"ConfigParam", 'Int'>
  readonly isDeletedDT: Prisma.FieldRef<"ConfigParam", 'DateTime'>
  readonly name: Prisma.FieldRef<"ConfigParam", 'String'>
  readonly value: Prisma.FieldRef<"ConfigParam", 'String'>
  readonly utility: Prisma.FieldRef<"ConfigParam", 'String'>
}
    

// Custom InputTypes
/**
 * ConfigParam findUnique
 */
export type ConfigParamFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * Filter, which ConfigParam to fetch.
   */
  where: Prisma.ConfigParamWhereUniqueInput
}

/**
 * ConfigParam findUniqueOrThrow
 */
export type ConfigParamFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * Filter, which ConfigParam to fetch.
   */
  where: Prisma.ConfigParamWhereUniqueInput
}

/**
 * ConfigParam findFirst
 */
export type ConfigParamFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * Filter, which ConfigParam to fetch.
   */
  where?: Prisma.ConfigParamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConfigParams to fetch.
   */
  orderBy?: Prisma.ConfigParamOrderByWithRelationInput | Prisma.ConfigParamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConfigParams.
   */
  cursor?: Prisma.ConfigParamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConfigParams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConfigParams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConfigParams.
   */
  distinct?: Prisma.ConfigParamScalarFieldEnum | Prisma.ConfigParamScalarFieldEnum[]
}

/**
 * ConfigParam findFirstOrThrow
 */
export type ConfigParamFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * Filter, which ConfigParam to fetch.
   */
  where?: Prisma.ConfigParamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConfigParams to fetch.
   */
  orderBy?: Prisma.ConfigParamOrderByWithRelationInput | Prisma.ConfigParamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConfigParams.
   */
  cursor?: Prisma.ConfigParamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConfigParams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConfigParams.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConfigParams.
   */
  distinct?: Prisma.ConfigParamScalarFieldEnum | Prisma.ConfigParamScalarFieldEnum[]
}

/**
 * ConfigParam findMany
 */
export type ConfigParamFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * Filter, which ConfigParams to fetch.
   */
  where?: Prisma.ConfigParamWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConfigParams to fetch.
   */
  orderBy?: Prisma.ConfigParamOrderByWithRelationInput | Prisma.ConfigParamOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ConfigParams.
   */
  cursor?: Prisma.ConfigParamWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConfigParams from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConfigParams.
   */
  skip?: number
  distinct?: Prisma.ConfigParamScalarFieldEnum | Prisma.ConfigParamScalarFieldEnum[]
}

/**
 * ConfigParam create
 */
export type ConfigParamCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * The data needed to create a ConfigParam.
   */
  data: Prisma.XOR<Prisma.ConfigParamCreateInput, Prisma.ConfigParamUncheckedCreateInput>
}

/**
 * ConfigParam createMany
 */
export type ConfigParamCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ConfigParams.
   */
  data: Prisma.ConfigParamCreateManyInput | Prisma.ConfigParamCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConfigParam createManyAndReturn
 */
export type ConfigParamCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * The data used to create many ConfigParams.
   */
  data: Prisma.ConfigParamCreateManyInput | Prisma.ConfigParamCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConfigParam update
 */
export type ConfigParamUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * The data needed to update a ConfigParam.
   */
  data: Prisma.XOR<Prisma.ConfigParamUpdateInput, Prisma.ConfigParamUncheckedUpdateInput>
  /**
   * Choose, which ConfigParam to update.
   */
  where: Prisma.ConfigParamWhereUniqueInput
}

/**
 * ConfigParam updateMany
 */
export type ConfigParamUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ConfigParams.
   */
  data: Prisma.XOR<Prisma.ConfigParamUpdateManyMutationInput, Prisma.ConfigParamUncheckedUpdateManyInput>
  /**
   * Filter which ConfigParams to update
   */
  where?: Prisma.ConfigParamWhereInput
  /**
   * Limit how many ConfigParams to update.
   */
  limit?: number
}

/**
 * ConfigParam updateManyAndReturn
 */
export type ConfigParamUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * The data used to update ConfigParams.
   */
  data: Prisma.XOR<Prisma.ConfigParamUpdateManyMutationInput, Prisma.ConfigParamUncheckedUpdateManyInput>
  /**
   * Filter which ConfigParams to update
   */
  where?: Prisma.ConfigParamWhereInput
  /**
   * Limit how many ConfigParams to update.
   */
  limit?: number
}

/**
 * ConfigParam upsert
 */
export type ConfigParamUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * The filter to search for the ConfigParam to update in case it exists.
   */
  where: Prisma.ConfigParamWhereUniqueInput
  /**
   * In case the ConfigParam found by the `where` argument doesn't exist, create a new ConfigParam with this data.
   */
  create: Prisma.XOR<Prisma.ConfigParamCreateInput, Prisma.ConfigParamUncheckedCreateInput>
  /**
   * In case the ConfigParam was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConfigParamUpdateInput, Prisma.ConfigParamUncheckedUpdateInput>
}

/**
 * ConfigParam delete
 */
export type ConfigParamDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
  /**
   * Filter which ConfigParam to delete.
   */
  where: Prisma.ConfigParamWhereUniqueInput
}

/**
 * ConfigParam deleteMany
 */
export type ConfigParamDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConfigParams to delete
   */
  where?: Prisma.ConfigParamWhereInput
  /**
   * Limit how many ConfigParams to delete.
   */
  limit?: number
}

/**
 * ConfigParam without action
 */
export type ConfigParamDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigParam
   */
  select?: Prisma.ConfigParamSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigParam
   */
  omit?: Prisma.ConfigParamOmit<ExtArgs> | null
}
