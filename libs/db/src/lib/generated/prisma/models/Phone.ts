
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Phone` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Phone
 * 
 */
export type PhoneModel = runtime.Types.Result.DefaultSelection<Prisma.$PhonePayload>

export type AggregatePhone = {
  _count: PhoneCountAggregateOutputType | null
  _avg: PhoneAvgAggregateOutputType | null
  _sum: PhoneSumAggregateOutputType | null
  _min: PhoneMinAggregateOutputType | null
  _max: PhoneMaxAggregateOutputType | null
}

export type PhoneAvgAggregateOutputType = {
  id: number | null
}

export type PhoneSumAggregateOutputType = {
  id: number | null
}

export type PhoneMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  countryCode: string | null
  number: string | null
  extension: string | null
  phoneType: $Enums.PhoneType | null
  isPrimary: boolean | null
}

export type PhoneMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  countryCode: string | null
  number: string | null
  extension: string | null
  phoneType: $Enums.PhoneType | null
  isPrimary: boolean | null
}

export type PhoneCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  userId: number
  countryCode: number
  number: number
  extension: number
  phoneType: number
  isPrimary: number
  _all: number
}


export type PhoneAvgAggregateInputType = {
  id?: true
}

export type PhoneSumAggregateInputType = {
  id?: true
}

export type PhoneMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  countryCode?: true
  number?: true
  extension?: true
  phoneType?: true
  isPrimary?: true
}

export type PhoneMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  countryCode?: true
  number?: true
  extension?: true
  phoneType?: true
  isPrimary?: true
}

export type PhoneCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  countryCode?: true
  number?: true
  extension?: true
  phoneType?: true
  isPrimary?: true
  _all?: true
}

export type PhoneAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Phone to aggregate.
   */
  where?: Prisma.PhoneWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Phones to fetch.
   */
  orderBy?: Prisma.PhoneOrderByWithRelationInput | Prisma.PhoneOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PhoneWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Phones from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Phones.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Phones
  **/
  _count?: true | PhoneCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PhoneAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PhoneSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PhoneMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PhoneMaxAggregateInputType
}

export type GetPhoneAggregateType<T extends PhoneAggregateArgs> = {
      [P in keyof T & keyof AggregatePhone]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePhone[P]>
    : Prisma.GetScalarType<T[P], AggregatePhone[P]>
}




export type PhoneGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PhoneWhereInput
  orderBy?: Prisma.PhoneOrderByWithAggregationInput | Prisma.PhoneOrderByWithAggregationInput[]
  by: Prisma.PhoneScalarFieldEnum[] | Prisma.PhoneScalarFieldEnum
  having?: Prisma.PhoneScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PhoneCountAggregateInputType | true
  _avg?: PhoneAvgAggregateInputType
  _sum?: PhoneSumAggregateInputType
  _min?: PhoneMinAggregateInputType
  _max?: PhoneMaxAggregateInputType
}

export type PhoneGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  userId: string
  countryCode: string
  number: string
  extension: string | null
  phoneType: $Enums.PhoneType | null
  isPrimary: boolean
  _count: PhoneCountAggregateOutputType | null
  _avg: PhoneAvgAggregateOutputType | null
  _sum: PhoneSumAggregateOutputType | null
  _min: PhoneMinAggregateOutputType | null
  _max: PhoneMaxAggregateOutputType | null
}

type GetPhoneGroupByPayload<T extends PhoneGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PhoneGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PhoneGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PhoneGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PhoneGroupByOutputType[P]>
      }
    >
  >



export type PhoneWhereInput = {
  AND?: Prisma.PhoneWhereInput | Prisma.PhoneWhereInput[]
  OR?: Prisma.PhoneWhereInput[]
  NOT?: Prisma.PhoneWhereInput | Prisma.PhoneWhereInput[]
  id?: Prisma.IntFilter<"Phone"> | number
  createdAt?: Prisma.DateTimeFilter<"Phone"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Phone"> | Date | string
  userId?: Prisma.StringFilter<"Phone"> | string
  countryCode?: Prisma.StringFilter<"Phone"> | string
  number?: Prisma.StringFilter<"Phone"> | string
  extension?: Prisma.StringNullableFilter<"Phone"> | string | null
  phoneType?: Prisma.EnumPhoneTypeNullableFilter<"Phone"> | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFilter<"Phone"> | boolean
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type PhoneOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  countryCode?: Prisma.SortOrder
  number?: Prisma.SortOrder
  extension?: Prisma.SortOrderInput | Prisma.SortOrder
  phoneType?: Prisma.SortOrderInput | Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type PhoneWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.PhoneWhereInput | Prisma.PhoneWhereInput[]
  OR?: Prisma.PhoneWhereInput[]
  NOT?: Prisma.PhoneWhereInput | Prisma.PhoneWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Phone"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Phone"> | Date | string
  userId?: Prisma.StringFilter<"Phone"> | string
  countryCode?: Prisma.StringFilter<"Phone"> | string
  number?: Prisma.StringFilter<"Phone"> | string
  extension?: Prisma.StringNullableFilter<"Phone"> | string | null
  phoneType?: Prisma.EnumPhoneTypeNullableFilter<"Phone"> | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFilter<"Phone"> | boolean
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type PhoneOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  countryCode?: Prisma.SortOrder
  number?: Prisma.SortOrder
  extension?: Prisma.SortOrderInput | Prisma.SortOrder
  phoneType?: Prisma.SortOrderInput | Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  _count?: Prisma.PhoneCountOrderByAggregateInput
  _avg?: Prisma.PhoneAvgOrderByAggregateInput
  _max?: Prisma.PhoneMaxOrderByAggregateInput
  _min?: Prisma.PhoneMinOrderByAggregateInput
  _sum?: Prisma.PhoneSumOrderByAggregateInput
}

export type PhoneScalarWhereWithAggregatesInput = {
  AND?: Prisma.PhoneScalarWhereWithAggregatesInput | Prisma.PhoneScalarWhereWithAggregatesInput[]
  OR?: Prisma.PhoneScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PhoneScalarWhereWithAggregatesInput | Prisma.PhoneScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Phone"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Phone"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Phone"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Phone"> | string
  countryCode?: Prisma.StringWithAggregatesFilter<"Phone"> | string
  number?: Prisma.StringWithAggregatesFilter<"Phone"> | string
  extension?: Prisma.StringNullableWithAggregatesFilter<"Phone"> | string | null
  phoneType?: Prisma.EnumPhoneTypeNullableWithAggregatesFilter<"Phone"> | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolWithAggregatesFilter<"Phone"> | boolean
}

export type PhoneCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  countryCode: string
  number: string
  extension?: string | null
  phoneType?: $Enums.PhoneType | null
  isPrimary?: boolean
  user: Prisma.UserCreateNestedOneWithoutPhoneInput
}

export type PhoneUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  countryCode: string
  number: string
  extension?: string | null
  phoneType?: $Enums.PhoneType | null
  isPrimary?: boolean
}

export type PhoneUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  countryCode?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneType?: Prisma.NullableEnumPhoneTypeFieldUpdateOperationsInput | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutPhoneNestedInput
}

export type PhoneUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  countryCode?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneType?: Prisma.NullableEnumPhoneTypeFieldUpdateOperationsInput | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PhoneCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  countryCode: string
  number: string
  extension?: string | null
  phoneType?: $Enums.PhoneType | null
  isPrimary?: boolean
}

export type PhoneUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  countryCode?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneType?: Prisma.NullableEnumPhoneTypeFieldUpdateOperationsInput | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PhoneUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  countryCode?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneType?: Prisma.NullableEnumPhoneTypeFieldUpdateOperationsInput | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PhoneListRelationFilter = {
  every?: Prisma.PhoneWhereInput
  some?: Prisma.PhoneWhereInput
  none?: Prisma.PhoneWhereInput
}

export type PhoneOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PhoneCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  countryCode?: Prisma.SortOrder
  number?: Prisma.SortOrder
  extension?: Prisma.SortOrder
  phoneType?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
}

export type PhoneAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PhoneMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  countryCode?: Prisma.SortOrder
  number?: Prisma.SortOrder
  extension?: Prisma.SortOrder
  phoneType?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
}

export type PhoneMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  countryCode?: Prisma.SortOrder
  number?: Prisma.SortOrder
  extension?: Prisma.SortOrder
  phoneType?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
}

export type PhoneSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PhoneCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PhoneCreateWithoutUserInput, Prisma.PhoneUncheckedCreateWithoutUserInput> | Prisma.PhoneCreateWithoutUserInput[] | Prisma.PhoneUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PhoneCreateOrConnectWithoutUserInput | Prisma.PhoneCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PhoneCreateManyUserInputEnvelope
  connect?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
}

export type PhoneUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PhoneCreateWithoutUserInput, Prisma.PhoneUncheckedCreateWithoutUserInput> | Prisma.PhoneCreateWithoutUserInput[] | Prisma.PhoneUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PhoneCreateOrConnectWithoutUserInput | Prisma.PhoneCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PhoneCreateManyUserInputEnvelope
  connect?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
}

export type PhoneUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PhoneCreateWithoutUserInput, Prisma.PhoneUncheckedCreateWithoutUserInput> | Prisma.PhoneCreateWithoutUserInput[] | Prisma.PhoneUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PhoneCreateOrConnectWithoutUserInput | Prisma.PhoneCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PhoneUpsertWithWhereUniqueWithoutUserInput | Prisma.PhoneUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PhoneCreateManyUserInputEnvelope
  set?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
  disconnect?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
  delete?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
  connect?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
  update?: Prisma.PhoneUpdateWithWhereUniqueWithoutUserInput | Prisma.PhoneUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PhoneUpdateManyWithWhereWithoutUserInput | Prisma.PhoneUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PhoneScalarWhereInput | Prisma.PhoneScalarWhereInput[]
}

export type PhoneUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PhoneCreateWithoutUserInput, Prisma.PhoneUncheckedCreateWithoutUserInput> | Prisma.PhoneCreateWithoutUserInput[] | Prisma.PhoneUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PhoneCreateOrConnectWithoutUserInput | Prisma.PhoneCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PhoneUpsertWithWhereUniqueWithoutUserInput | Prisma.PhoneUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PhoneCreateManyUserInputEnvelope
  set?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
  disconnect?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
  delete?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
  connect?: Prisma.PhoneWhereUniqueInput | Prisma.PhoneWhereUniqueInput[]
  update?: Prisma.PhoneUpdateWithWhereUniqueWithoutUserInput | Prisma.PhoneUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PhoneUpdateManyWithWhereWithoutUserInput | Prisma.PhoneUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PhoneScalarWhereInput | Prisma.PhoneScalarWhereInput[]
}

export type NullableEnumPhoneTypeFieldUpdateOperationsInput = {
  set?: $Enums.PhoneType | null
}

export type PhoneCreateWithoutUserInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  countryCode: string
  number: string
  extension?: string | null
  phoneType?: $Enums.PhoneType | null
  isPrimary?: boolean
}

export type PhoneUncheckedCreateWithoutUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  countryCode: string
  number: string
  extension?: string | null
  phoneType?: $Enums.PhoneType | null
  isPrimary?: boolean
}

export type PhoneCreateOrConnectWithoutUserInput = {
  where: Prisma.PhoneWhereUniqueInput
  create: Prisma.XOR<Prisma.PhoneCreateWithoutUserInput, Prisma.PhoneUncheckedCreateWithoutUserInput>
}

export type PhoneCreateManyUserInputEnvelope = {
  data: Prisma.PhoneCreateManyUserInput | Prisma.PhoneCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PhoneUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PhoneWhereUniqueInput
  update: Prisma.XOR<Prisma.PhoneUpdateWithoutUserInput, Prisma.PhoneUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PhoneCreateWithoutUserInput, Prisma.PhoneUncheckedCreateWithoutUserInput>
}

export type PhoneUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PhoneWhereUniqueInput
  data: Prisma.XOR<Prisma.PhoneUpdateWithoutUserInput, Prisma.PhoneUncheckedUpdateWithoutUserInput>
}

export type PhoneUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PhoneScalarWhereInput
  data: Prisma.XOR<Prisma.PhoneUpdateManyMutationInput, Prisma.PhoneUncheckedUpdateManyWithoutUserInput>
}

export type PhoneScalarWhereInput = {
  AND?: Prisma.PhoneScalarWhereInput | Prisma.PhoneScalarWhereInput[]
  OR?: Prisma.PhoneScalarWhereInput[]
  NOT?: Prisma.PhoneScalarWhereInput | Prisma.PhoneScalarWhereInput[]
  id?: Prisma.IntFilter<"Phone"> | number
  createdAt?: Prisma.DateTimeFilter<"Phone"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Phone"> | Date | string
  userId?: Prisma.StringFilter<"Phone"> | string
  countryCode?: Prisma.StringFilter<"Phone"> | string
  number?: Prisma.StringFilter<"Phone"> | string
  extension?: Prisma.StringNullableFilter<"Phone"> | string | null
  phoneType?: Prisma.EnumPhoneTypeNullableFilter<"Phone"> | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFilter<"Phone"> | boolean
}

export type PhoneCreateManyUserInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  countryCode: string
  number: string
  extension?: string | null
  phoneType?: $Enums.PhoneType | null
  isPrimary?: boolean
}

export type PhoneUpdateWithoutUserInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  countryCode?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneType?: Prisma.NullableEnumPhoneTypeFieldUpdateOperationsInput | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PhoneUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  countryCode?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneType?: Prisma.NullableEnumPhoneTypeFieldUpdateOperationsInput | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type PhoneUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  countryCode?: Prisma.StringFieldUpdateOperationsInput | string
  number?: Prisma.StringFieldUpdateOperationsInput | string
  extension?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phoneType?: Prisma.NullableEnumPhoneTypeFieldUpdateOperationsInput | $Enums.PhoneType | null
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}



export type PhoneSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  countryCode?: boolean
  number?: boolean
  extension?: boolean
  phoneType?: boolean
  isPrimary?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["phone"]>

export type PhoneSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  countryCode?: boolean
  number?: boolean
  extension?: boolean
  phoneType?: boolean
  isPrimary?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["phone"]>

export type PhoneSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  countryCode?: boolean
  number?: boolean
  extension?: boolean
  phoneType?: boolean
  isPrimary?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["phone"]>

export type PhoneSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  countryCode?: boolean
  number?: boolean
  extension?: boolean
  phoneType?: boolean
  isPrimary?: boolean
}

export type PhoneOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "userId" | "countryCode" | "number" | "extension" | "phoneType" | "isPrimary", ExtArgs["result"]["phone"]>
export type PhoneInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PhoneIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PhoneIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PhonePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Phone"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    userId: string
    countryCode: string
    number: string
    extension: string | null
    phoneType: $Enums.PhoneType | null
    isPrimary: boolean
  }, ExtArgs["result"]["phone"]>
  composites: {}
}

export type PhoneGetPayload<S extends boolean | null | undefined | PhoneDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PhonePayload, S>

export type PhoneCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PhoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PhoneCountAggregateInputType | true
  }

export interface PhoneDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Phone'], meta: { name: 'Phone' } }
  /**
   * Find zero or one Phone that matches the filter.
   * @param {PhoneFindUniqueArgs} args - Arguments to find a Phone
   * @example
   * // Get one Phone
   * const phone = await prisma.phone.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PhoneFindUniqueArgs>(args: Prisma.SelectSubset<T, PhoneFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PhoneClient<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Phone that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PhoneFindUniqueOrThrowArgs} args - Arguments to find a Phone
   * @example
   * // Get one Phone
   * const phone = await prisma.phone.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PhoneFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PhoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PhoneClient<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Phone that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhoneFindFirstArgs} args - Arguments to find a Phone
   * @example
   * // Get one Phone
   * const phone = await prisma.phone.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PhoneFindFirstArgs>(args?: Prisma.SelectSubset<T, PhoneFindFirstArgs<ExtArgs>>): Prisma.Prisma__PhoneClient<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Phone that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhoneFindFirstOrThrowArgs} args - Arguments to find a Phone
   * @example
   * // Get one Phone
   * const phone = await prisma.phone.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PhoneFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PhoneFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PhoneClient<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Phones that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhoneFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Phones
   * const phones = await prisma.phone.findMany()
   * 
   * // Get first 10 Phones
   * const phones = await prisma.phone.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const phoneWithIdOnly = await prisma.phone.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PhoneFindManyArgs>(args?: Prisma.SelectSubset<T, PhoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Phone.
   * @param {PhoneCreateArgs} args - Arguments to create a Phone.
   * @example
   * // Create one Phone
   * const Phone = await prisma.phone.create({
   *   data: {
   *     // ... data to create a Phone
   *   }
   * })
   * 
   */
  create<T extends PhoneCreateArgs>(args: Prisma.SelectSubset<T, PhoneCreateArgs<ExtArgs>>): Prisma.Prisma__PhoneClient<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Phones.
   * @param {PhoneCreateManyArgs} args - Arguments to create many Phones.
   * @example
   * // Create many Phones
   * const phone = await prisma.phone.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PhoneCreateManyArgs>(args?: Prisma.SelectSubset<T, PhoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Phones and returns the data saved in the database.
   * @param {PhoneCreateManyAndReturnArgs} args - Arguments to create many Phones.
   * @example
   * // Create many Phones
   * const phone = await prisma.phone.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Phones and only return the `id`
   * const phoneWithIdOnly = await prisma.phone.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PhoneCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PhoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Phone.
   * @param {PhoneDeleteArgs} args - Arguments to delete one Phone.
   * @example
   * // Delete one Phone
   * const Phone = await prisma.phone.delete({
   *   where: {
   *     // ... filter to delete one Phone
   *   }
   * })
   * 
   */
  delete<T extends PhoneDeleteArgs>(args: Prisma.SelectSubset<T, PhoneDeleteArgs<ExtArgs>>): Prisma.Prisma__PhoneClient<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Phone.
   * @param {PhoneUpdateArgs} args - Arguments to update one Phone.
   * @example
   * // Update one Phone
   * const phone = await prisma.phone.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PhoneUpdateArgs>(args: Prisma.SelectSubset<T, PhoneUpdateArgs<ExtArgs>>): Prisma.Prisma__PhoneClient<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Phones.
   * @param {PhoneDeleteManyArgs} args - Arguments to filter Phones to delete.
   * @example
   * // Delete a few Phones
   * const { count } = await prisma.phone.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PhoneDeleteManyArgs>(args?: Prisma.SelectSubset<T, PhoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Phones.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhoneUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Phones
   * const phone = await prisma.phone.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PhoneUpdateManyArgs>(args: Prisma.SelectSubset<T, PhoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Phones and returns the data updated in the database.
   * @param {PhoneUpdateManyAndReturnArgs} args - Arguments to update many Phones.
   * @example
   * // Update many Phones
   * const phone = await prisma.phone.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Phones and only return the `id`
   * const phoneWithIdOnly = await prisma.phone.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PhoneUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PhoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Phone.
   * @param {PhoneUpsertArgs} args - Arguments to update or create a Phone.
   * @example
   * // Update or create a Phone
   * const phone = await prisma.phone.upsert({
   *   create: {
   *     // ... data to create a Phone
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Phone we want to update
   *   }
   * })
   */
  upsert<T extends PhoneUpsertArgs>(args: Prisma.SelectSubset<T, PhoneUpsertArgs<ExtArgs>>): Prisma.Prisma__PhoneClient<runtime.Types.Result.GetResult<Prisma.$PhonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Phones.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhoneCountArgs} args - Arguments to filter Phones to count.
   * @example
   * // Count the number of Phones
   * const count = await prisma.phone.count({
   *   where: {
   *     // ... the filter for the Phones we want to count
   *   }
   * })
  **/
  count<T extends PhoneCountArgs>(
    args?: Prisma.Subset<T, PhoneCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PhoneCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Phone.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PhoneAggregateArgs>(args: Prisma.Subset<T, PhoneAggregateArgs>): Prisma.PrismaPromise<GetPhoneAggregateType<T>>

  /**
   * Group by Phone.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PhoneGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PhoneGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PhoneGroupByArgs['orderBy'] }
      : { orderBy?: PhoneGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PhoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Phone model
 */
readonly fields: PhoneFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Phone.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PhoneClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Phone model
 */
export interface PhoneFieldRefs {
  readonly id: Prisma.FieldRef<"Phone", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Phone", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Phone", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Phone", 'String'>
  readonly countryCode: Prisma.FieldRef<"Phone", 'String'>
  readonly number: Prisma.FieldRef<"Phone", 'String'>
  readonly extension: Prisma.FieldRef<"Phone", 'String'>
  readonly phoneType: Prisma.FieldRef<"Phone", 'PhoneType'>
  readonly isPrimary: Prisma.FieldRef<"Phone", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Phone findUnique
 */
export type PhoneFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * Filter, which Phone to fetch.
   */
  where: Prisma.PhoneWhereUniqueInput
}

/**
 * Phone findUniqueOrThrow
 */
export type PhoneFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * Filter, which Phone to fetch.
   */
  where: Prisma.PhoneWhereUniqueInput
}

/**
 * Phone findFirst
 */
export type PhoneFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * Filter, which Phone to fetch.
   */
  where?: Prisma.PhoneWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Phones to fetch.
   */
  orderBy?: Prisma.PhoneOrderByWithRelationInput | Prisma.PhoneOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Phones.
   */
  cursor?: Prisma.PhoneWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Phones from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Phones.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Phones.
   */
  distinct?: Prisma.PhoneScalarFieldEnum | Prisma.PhoneScalarFieldEnum[]
}

/**
 * Phone findFirstOrThrow
 */
export type PhoneFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * Filter, which Phone to fetch.
   */
  where?: Prisma.PhoneWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Phones to fetch.
   */
  orderBy?: Prisma.PhoneOrderByWithRelationInput | Prisma.PhoneOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Phones.
   */
  cursor?: Prisma.PhoneWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Phones from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Phones.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Phones.
   */
  distinct?: Prisma.PhoneScalarFieldEnum | Prisma.PhoneScalarFieldEnum[]
}

/**
 * Phone findMany
 */
export type PhoneFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * Filter, which Phones to fetch.
   */
  where?: Prisma.PhoneWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Phones to fetch.
   */
  orderBy?: Prisma.PhoneOrderByWithRelationInput | Prisma.PhoneOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Phones.
   */
  cursor?: Prisma.PhoneWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Phones from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Phones.
   */
  skip?: number
  distinct?: Prisma.PhoneScalarFieldEnum | Prisma.PhoneScalarFieldEnum[]
}

/**
 * Phone create
 */
export type PhoneCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * The data needed to create a Phone.
   */
  data: Prisma.XOR<Prisma.PhoneCreateInput, Prisma.PhoneUncheckedCreateInput>
}

/**
 * Phone createMany
 */
export type PhoneCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Phones.
   */
  data: Prisma.PhoneCreateManyInput | Prisma.PhoneCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Phone createManyAndReturn
 */
export type PhoneCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * The data used to create many Phones.
   */
  data: Prisma.PhoneCreateManyInput | Prisma.PhoneCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Phone update
 */
export type PhoneUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * The data needed to update a Phone.
   */
  data: Prisma.XOR<Prisma.PhoneUpdateInput, Prisma.PhoneUncheckedUpdateInput>
  /**
   * Choose, which Phone to update.
   */
  where: Prisma.PhoneWhereUniqueInput
}

/**
 * Phone updateMany
 */
export type PhoneUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Phones.
   */
  data: Prisma.XOR<Prisma.PhoneUpdateManyMutationInput, Prisma.PhoneUncheckedUpdateManyInput>
  /**
   * Filter which Phones to update
   */
  where?: Prisma.PhoneWhereInput
  /**
   * Limit how many Phones to update.
   */
  limit?: number
}

/**
 * Phone updateManyAndReturn
 */
export type PhoneUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * The data used to update Phones.
   */
  data: Prisma.XOR<Prisma.PhoneUpdateManyMutationInput, Prisma.PhoneUncheckedUpdateManyInput>
  /**
   * Filter which Phones to update
   */
  where?: Prisma.PhoneWhereInput
  /**
   * Limit how many Phones to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Phone upsert
 */
export type PhoneUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * The filter to search for the Phone to update in case it exists.
   */
  where: Prisma.PhoneWhereUniqueInput
  /**
   * In case the Phone found by the `where` argument doesn't exist, create a new Phone with this data.
   */
  create: Prisma.XOR<Prisma.PhoneCreateInput, Prisma.PhoneUncheckedCreateInput>
  /**
   * In case the Phone was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PhoneUpdateInput, Prisma.PhoneUncheckedUpdateInput>
}

/**
 * Phone delete
 */
export type PhoneDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
  /**
   * Filter which Phone to delete.
   */
  where: Prisma.PhoneWhereUniqueInput
}

/**
 * Phone deleteMany
 */
export type PhoneDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Phones to delete
   */
  where?: Prisma.PhoneWhereInput
  /**
   * Limit how many Phones to delete.
   */
  limit?: number
}

/**
 * Phone without action
 */
export type PhoneDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Phone
   */
  select?: Prisma.PhoneSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Phone
   */
  omit?: Prisma.PhoneOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PhoneInclude<ExtArgs> | null
}
