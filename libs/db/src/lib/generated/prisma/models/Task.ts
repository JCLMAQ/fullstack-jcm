
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Task` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Task
 * 
 */
export type TaskModel = runtime.Types.Result.DefaultSelection<Prisma.$TaskPayload>

export type AggregateTask = {
  _count: TaskCountAggregateOutputType | null
  _avg: TaskAvgAggregateOutputType | null
  _sum: TaskSumAggregateOutputType | null
  _min: TaskMinAggregateOutputType | null
  _max: TaskMaxAggregateOutputType | null
}

export type TaskAvgAggregateOutputType = {
  numSeq: number | null
  isDeleted: number | null
  orderTask: number | null
}

export type TaskSumAggregateOutputType = {
  numSeq: number | null
  isDeleted: number | null
  orderTask: number | null
}

export type TaskMinAggregateOutputType = {
  id: string | null
  numSeq: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  isPublic: boolean | null
  ownerId: string | null
  orgId: string | null
  orderTask: number | null
  title: string | null
  content: string | null
  taskState: $Enums.TaskState | null
  mainTaskId: string | null
  todoId: string | null
}

export type TaskMaxAggregateOutputType = {
  id: string | null
  numSeq: number | null
  createdAt: Date | null
  updatedAt: Date | null
  published: boolean | null
  isDeleted: number | null
  isDeletedDT: Date | null
  isPublic: boolean | null
  ownerId: string | null
  orgId: string | null
  orderTask: number | null
  title: string | null
  content: string | null
  taskState: $Enums.TaskState | null
  mainTaskId: string | null
  todoId: string | null
}

export type TaskCountAggregateOutputType = {
  id: number
  numSeq: number
  createdAt: number
  updatedAt: number
  published: number
  isDeleted: number
  isDeletedDT: number
  isPublic: number
  ownerId: number
  orgId: number
  orderTask: number
  title: number
  content: number
  taskState: number
  mainTaskId: number
  todoId: number
  _all: number
}


export type TaskAvgAggregateInputType = {
  numSeq?: true
  isDeleted?: true
  orderTask?: true
}

export type TaskSumAggregateInputType = {
  numSeq?: true
  isDeleted?: true
  orderTask?: true
}

export type TaskMinAggregateInputType = {
  id?: true
  numSeq?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isDeleted?: true
  isDeletedDT?: true
  isPublic?: true
  ownerId?: true
  orgId?: true
  orderTask?: true
  title?: true
  content?: true
  taskState?: true
  mainTaskId?: true
  todoId?: true
}

export type TaskMaxAggregateInputType = {
  id?: true
  numSeq?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isDeleted?: true
  isDeletedDT?: true
  isPublic?: true
  ownerId?: true
  orgId?: true
  orderTask?: true
  title?: true
  content?: true
  taskState?: true
  mainTaskId?: true
  todoId?: true
}

export type TaskCountAggregateInputType = {
  id?: true
  numSeq?: true
  createdAt?: true
  updatedAt?: true
  published?: true
  isDeleted?: true
  isDeletedDT?: true
  isPublic?: true
  ownerId?: true
  orgId?: true
  orderTask?: true
  title?: true
  content?: true
  taskState?: true
  mainTaskId?: true
  todoId?: true
  _all?: true
}

export type TaskAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Task to aggregate.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tasks to fetch.
   */
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Tasks
  **/
  _count?: true | TaskCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TaskAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TaskSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TaskMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TaskMaxAggregateInputType
}

export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
      [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTask[P]>
    : Prisma.GetScalarType<T[P], AggregateTask[P]>
}




export type TaskGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TaskWhereInput
  orderBy?: Prisma.TaskOrderByWithAggregationInput | Prisma.TaskOrderByWithAggregationInput[]
  by: Prisma.TaskScalarFieldEnum[] | Prisma.TaskScalarFieldEnum
  having?: Prisma.TaskScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TaskCountAggregateInputType | true
  _avg?: TaskAvgAggregateInputType
  _sum?: TaskSumAggregateInputType
  _min?: TaskMinAggregateInputType
  _max?: TaskMaxAggregateInputType
}

export type TaskGroupByOutputType = {
  id: string
  numSeq: number
  createdAt: Date
  updatedAt: Date
  published: boolean
  isDeleted: number
  isDeletedDT: Date | null
  isPublic: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content: string | null
  taskState: $Enums.TaskState
  mainTaskId: string | null
  todoId: string | null
  _count: TaskCountAggregateOutputType | null
  _avg: TaskAvgAggregateOutputType | null
  _sum: TaskSumAggregateOutputType | null
  _min: TaskMinAggregateOutputType | null
  _max: TaskMaxAggregateOutputType | null
}

type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TaskGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TaskGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TaskGroupByOutputType[P]>
      }
    >
  >



export type TaskWhereInput = {
  AND?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  OR?: Prisma.TaskWhereInput[]
  NOT?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  id?: Prisma.StringFilter<"Task"> | string
  numSeq?: Prisma.IntFilter<"Task"> | number
  createdAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  published?: Prisma.BoolFilter<"Task"> | boolean
  isDeleted?: Prisma.IntFilter<"Task"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"Task"> | Date | string | null
  isPublic?: Prisma.BoolFilter<"Task"> | boolean
  ownerId?: Prisma.StringFilter<"Task"> | string
  orgId?: Prisma.StringFilter<"Task"> | string
  orderTask?: Prisma.IntFilter<"Task"> | number
  title?: Prisma.StringFilter<"Task"> | string
  content?: Prisma.StringNullableFilter<"Task"> | string | null
  taskState?: Prisma.EnumTaskStateFilter<"Task"> | $Enums.TaskState
  mainTaskId?: Prisma.StringNullableFilter<"Task"> | string | null
  todoId?: Prisma.StringNullableFilter<"Task"> | string | null
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  org?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  groups?: Prisma.GroupListRelationFilter
  mainTask?: Prisma.XOR<Prisma.TaskNullableScalarRelationFilter, Prisma.TaskWhereInput> | null
  SubTasks?: Prisma.TaskListRelationFilter
  Users?: Prisma.UserTaskLinkListRelationFilter
  todo?: Prisma.XOR<Prisma.TodoNullableScalarRelationFilter, Prisma.TodoWhereInput> | null
}

export type TaskOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  numSeq?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  orderTask?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  taskState?: Prisma.SortOrder
  mainTaskId?: Prisma.SortOrderInput | Prisma.SortOrder
  todoId?: Prisma.SortOrderInput | Prisma.SortOrder
  owner?: Prisma.UserOrderByWithRelationInput
  org?: Prisma.OrganizationOrderByWithRelationInput
  groups?: Prisma.GroupOrderByRelationAggregateInput
  mainTask?: Prisma.TaskOrderByWithRelationInput
  SubTasks?: Prisma.TaskOrderByRelationAggregateInput
  Users?: Prisma.UserTaskLinkOrderByRelationAggregateInput
  todo?: Prisma.TodoOrderByWithRelationInput
}

export type TaskWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  OR?: Prisma.TaskWhereInput[]
  NOT?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  numSeq?: Prisma.IntFilter<"Task"> | number
  createdAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  published?: Prisma.BoolFilter<"Task"> | boolean
  isDeleted?: Prisma.IntFilter<"Task"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"Task"> | Date | string | null
  isPublic?: Prisma.BoolFilter<"Task"> | boolean
  ownerId?: Prisma.StringFilter<"Task"> | string
  orgId?: Prisma.StringFilter<"Task"> | string
  orderTask?: Prisma.IntFilter<"Task"> | number
  title?: Prisma.StringFilter<"Task"> | string
  content?: Prisma.StringNullableFilter<"Task"> | string | null
  taskState?: Prisma.EnumTaskStateFilter<"Task"> | $Enums.TaskState
  mainTaskId?: Prisma.StringNullableFilter<"Task"> | string | null
  todoId?: Prisma.StringNullableFilter<"Task"> | string | null
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  org?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  groups?: Prisma.GroupListRelationFilter
  mainTask?: Prisma.XOR<Prisma.TaskNullableScalarRelationFilter, Prisma.TaskWhereInput> | null
  SubTasks?: Prisma.TaskListRelationFilter
  Users?: Prisma.UserTaskLinkListRelationFilter
  todo?: Prisma.XOR<Prisma.TodoNullableScalarRelationFilter, Prisma.TodoWhereInput> | null
}, "id">

export type TaskOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  numSeq?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrderInput | Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  orderTask?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  taskState?: Prisma.SortOrder
  mainTaskId?: Prisma.SortOrderInput | Prisma.SortOrder
  todoId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.TaskCountOrderByAggregateInput
  _avg?: Prisma.TaskAvgOrderByAggregateInput
  _max?: Prisma.TaskMaxOrderByAggregateInput
  _min?: Prisma.TaskMinOrderByAggregateInput
  _sum?: Prisma.TaskSumOrderByAggregateInput
}

export type TaskScalarWhereWithAggregatesInput = {
  AND?: Prisma.TaskScalarWhereWithAggregatesInput | Prisma.TaskScalarWhereWithAggregatesInput[]
  OR?: Prisma.TaskScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TaskScalarWhereWithAggregatesInput | Prisma.TaskScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Task"> | string
  numSeq?: Prisma.IntWithAggregatesFilter<"Task"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Task"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Task"> | Date | string
  published?: Prisma.BoolWithAggregatesFilter<"Task"> | boolean
  isDeleted?: Prisma.IntWithAggregatesFilter<"Task"> | number
  isDeletedDT?: Prisma.DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
  isPublic?: Prisma.BoolWithAggregatesFilter<"Task"> | boolean
  ownerId?: Prisma.StringWithAggregatesFilter<"Task"> | string
  orgId?: Prisma.StringWithAggregatesFilter<"Task"> | string
  orderTask?: Prisma.IntWithAggregatesFilter<"Task"> | number
  title?: Prisma.StringWithAggregatesFilter<"Task"> | string
  content?: Prisma.StringNullableWithAggregatesFilter<"Task"> | string | null
  taskState?: Prisma.EnumTaskStateWithAggregatesFilter<"Task"> | $Enums.TaskState
  mainTaskId?: Prisma.StringNullableWithAggregatesFilter<"Task"> | string | null
  todoId?: Prisma.StringNullableWithAggregatesFilter<"Task"> | string | null
}

export type TaskCreateInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  owner: Prisma.UserCreateNestedOneWithoutTasksAuthorInput
  org: Prisma.OrganizationCreateNestedOneWithoutTasksInput
  groups?: Prisma.GroupCreateNestedManyWithoutTasksInput
  mainTask?: Prisma.TaskCreateNestedOneWithoutSubTasksInput
  SubTasks?: Prisma.TaskCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkCreateNestedManyWithoutTaskInput
  todo?: Prisma.TodoCreateNestedOneWithoutTasksInput
}

export type TaskUncheckedCreateInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
  groups?: Prisma.GroupUncheckedCreateNestedManyWithoutTasksInput
  SubTasks?: Prisma.TaskUncheckedCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  owner?: Prisma.UserUpdateOneRequiredWithoutTasksAuthorNestedInput
  org?: Prisma.OrganizationUpdateOneRequiredWithoutTasksNestedInput
  groups?: Prisma.GroupUpdateManyWithoutTasksNestedInput
  mainTask?: Prisma.TaskUpdateOneWithoutSubTasksNestedInput
  SubTasks?: Prisma.TaskUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUpdateManyWithoutTaskNestedInput
  todo?: Prisma.TodoUpdateOneWithoutTasksNestedInput
}

export type TaskUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  groups?: Prisma.GroupUncheckedUpdateManyWithoutTasksNestedInput
  SubTasks?: Prisma.TaskUncheckedUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskCreateManyInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
}

export type TaskUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
}

export type TaskUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TaskListRelationFilter = {
  every?: Prisma.TaskWhereInput
  some?: Prisma.TaskWhereInput
  none?: Prisma.TaskWhereInput
}

export type TaskOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TaskNullableScalarRelationFilter = {
  is?: Prisma.TaskWhereInput | null
  isNot?: Prisma.TaskWhereInput | null
}

export type TaskCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numSeq?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  orderTask?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  taskState?: Prisma.SortOrder
  mainTaskId?: Prisma.SortOrder
  todoId?: Prisma.SortOrder
}

export type TaskAvgOrderByAggregateInput = {
  numSeq?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  orderTask?: Prisma.SortOrder
}

export type TaskMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numSeq?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  orderTask?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  taskState?: Prisma.SortOrder
  mainTaskId?: Prisma.SortOrder
  todoId?: Prisma.SortOrder
}

export type TaskMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  numSeq?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  published?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  isDeletedDT?: Prisma.SortOrder
  isPublic?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  orgId?: Prisma.SortOrder
  orderTask?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  taskState?: Prisma.SortOrder
  mainTaskId?: Prisma.SortOrder
  todoId?: Prisma.SortOrder
}

export type TaskSumOrderByAggregateInput = {
  numSeq?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  orderTask?: Prisma.SortOrder
}

export type TaskScalarRelationFilter = {
  is?: Prisma.TaskWhereInput
  isNot?: Prisma.TaskWhereInput
}

export type TaskCreateNestedManyWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutOrgInput, Prisma.TaskUncheckedCreateWithoutOrgInput> | Prisma.TaskCreateWithoutOrgInput[] | Prisma.TaskUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutOrgInput | Prisma.TaskCreateOrConnectWithoutOrgInput[]
  createMany?: Prisma.TaskCreateManyOrgInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutOrgInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutOrgInput, Prisma.TaskUncheckedCreateWithoutOrgInput> | Prisma.TaskCreateWithoutOrgInput[] | Prisma.TaskUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutOrgInput | Prisma.TaskCreateOrConnectWithoutOrgInput[]
  createMany?: Prisma.TaskCreateManyOrgInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutOrgInput, Prisma.TaskUncheckedCreateWithoutOrgInput> | Prisma.TaskCreateWithoutOrgInput[] | Prisma.TaskUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutOrgInput | Prisma.TaskCreateOrConnectWithoutOrgInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutOrgInput | Prisma.TaskUpsertWithWhereUniqueWithoutOrgInput[]
  createMany?: Prisma.TaskCreateManyOrgInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutOrgInput | Prisma.TaskUpdateWithWhereUniqueWithoutOrgInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutOrgInput | Prisma.TaskUpdateManyWithWhereWithoutOrgInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutOrgNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutOrgInput, Prisma.TaskUncheckedCreateWithoutOrgInput> | Prisma.TaskCreateWithoutOrgInput[] | Prisma.TaskUncheckedCreateWithoutOrgInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutOrgInput | Prisma.TaskCreateOrConnectWithoutOrgInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutOrgInput | Prisma.TaskUpsertWithWhereUniqueWithoutOrgInput[]
  createMany?: Prisma.TaskCreateManyOrgInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutOrgInput | Prisma.TaskUpdateWithWhereUniqueWithoutOrgInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutOrgInput | Prisma.TaskUpdateManyWithWhereWithoutOrgInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutOwnerInput, Prisma.TaskUncheckedCreateWithoutOwnerInput> | Prisma.TaskCreateWithoutOwnerInput[] | Prisma.TaskUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutOwnerInput | Prisma.TaskCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.TaskCreateManyOwnerInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutOwnerInput, Prisma.TaskUncheckedCreateWithoutOwnerInput> | Prisma.TaskCreateWithoutOwnerInput[] | Prisma.TaskUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutOwnerInput | Prisma.TaskCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.TaskCreateManyOwnerInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutOwnerInput, Prisma.TaskUncheckedCreateWithoutOwnerInput> | Prisma.TaskCreateWithoutOwnerInput[] | Prisma.TaskUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutOwnerInput | Prisma.TaskCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutOwnerInput | Prisma.TaskUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.TaskCreateManyOwnerInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutOwnerInput | Prisma.TaskUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutOwnerInput | Prisma.TaskUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutOwnerInput, Prisma.TaskUncheckedCreateWithoutOwnerInput> | Prisma.TaskCreateWithoutOwnerInput[] | Prisma.TaskUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutOwnerInput | Prisma.TaskCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutOwnerInput | Prisma.TaskUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.TaskCreateManyOwnerInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutOwnerInput | Prisma.TaskUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutOwnerInput | Prisma.TaskUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskCreateNestedManyWithoutGroupsInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutGroupsInput, Prisma.TaskUncheckedCreateWithoutGroupsInput> | Prisma.TaskCreateWithoutGroupsInput[] | Prisma.TaskUncheckedCreateWithoutGroupsInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutGroupsInput | Prisma.TaskCreateOrConnectWithoutGroupsInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutGroupsInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutGroupsInput, Prisma.TaskUncheckedCreateWithoutGroupsInput> | Prisma.TaskCreateWithoutGroupsInput[] | Prisma.TaskUncheckedCreateWithoutGroupsInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutGroupsInput | Prisma.TaskCreateOrConnectWithoutGroupsInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutGroupsNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutGroupsInput, Prisma.TaskUncheckedCreateWithoutGroupsInput> | Prisma.TaskCreateWithoutGroupsInput[] | Prisma.TaskUncheckedCreateWithoutGroupsInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutGroupsInput | Prisma.TaskCreateOrConnectWithoutGroupsInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutGroupsInput | Prisma.TaskUpsertWithWhereUniqueWithoutGroupsInput[]
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutGroupsInput | Prisma.TaskUpdateWithWhereUniqueWithoutGroupsInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutGroupsInput | Prisma.TaskUpdateManyWithWhereWithoutGroupsInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutGroupsNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutGroupsInput, Prisma.TaskUncheckedCreateWithoutGroupsInput> | Prisma.TaskCreateWithoutGroupsInput[] | Prisma.TaskUncheckedCreateWithoutGroupsInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutGroupsInput | Prisma.TaskCreateOrConnectWithoutGroupsInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutGroupsInput | Prisma.TaskUpsertWithWhereUniqueWithoutGroupsInput[]
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutGroupsInput | Prisma.TaskUpdateWithWhereUniqueWithoutGroupsInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutGroupsInput | Prisma.TaskUpdateManyWithWhereWithoutGroupsInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskCreateNestedManyWithoutTodoInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutTodoInput, Prisma.TaskUncheckedCreateWithoutTodoInput> | Prisma.TaskCreateWithoutTodoInput[] | Prisma.TaskUncheckedCreateWithoutTodoInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutTodoInput | Prisma.TaskCreateOrConnectWithoutTodoInput[]
  createMany?: Prisma.TaskCreateManyTodoInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutTodoInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutTodoInput, Prisma.TaskUncheckedCreateWithoutTodoInput> | Prisma.TaskCreateWithoutTodoInput[] | Prisma.TaskUncheckedCreateWithoutTodoInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutTodoInput | Prisma.TaskCreateOrConnectWithoutTodoInput[]
  createMany?: Prisma.TaskCreateManyTodoInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutTodoNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutTodoInput, Prisma.TaskUncheckedCreateWithoutTodoInput> | Prisma.TaskCreateWithoutTodoInput[] | Prisma.TaskUncheckedCreateWithoutTodoInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutTodoInput | Prisma.TaskCreateOrConnectWithoutTodoInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutTodoInput | Prisma.TaskUpsertWithWhereUniqueWithoutTodoInput[]
  createMany?: Prisma.TaskCreateManyTodoInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutTodoInput | Prisma.TaskUpdateWithWhereUniqueWithoutTodoInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutTodoInput | Prisma.TaskUpdateManyWithWhereWithoutTodoInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutTodoNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutTodoInput, Prisma.TaskUncheckedCreateWithoutTodoInput> | Prisma.TaskCreateWithoutTodoInput[] | Prisma.TaskUncheckedCreateWithoutTodoInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutTodoInput | Prisma.TaskCreateOrConnectWithoutTodoInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutTodoInput | Prisma.TaskUpsertWithWhereUniqueWithoutTodoInput[]
  createMany?: Prisma.TaskCreateManyTodoInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutTodoInput | Prisma.TaskUpdateWithWhereUniqueWithoutTodoInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutTodoInput | Prisma.TaskUpdateManyWithWhereWithoutTodoInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskCreateNestedOneWithoutSubTasksInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutSubTasksInput, Prisma.TaskUncheckedCreateWithoutSubTasksInput>
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutSubTasksInput
  connect?: Prisma.TaskWhereUniqueInput
}

export type TaskCreateNestedManyWithoutMainTaskInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutMainTaskInput, Prisma.TaskUncheckedCreateWithoutMainTaskInput> | Prisma.TaskCreateWithoutMainTaskInput[] | Prisma.TaskUncheckedCreateWithoutMainTaskInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutMainTaskInput | Prisma.TaskCreateOrConnectWithoutMainTaskInput[]
  createMany?: Prisma.TaskCreateManyMainTaskInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutMainTaskInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutMainTaskInput, Prisma.TaskUncheckedCreateWithoutMainTaskInput> | Prisma.TaskCreateWithoutMainTaskInput[] | Prisma.TaskUncheckedCreateWithoutMainTaskInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutMainTaskInput | Prisma.TaskCreateOrConnectWithoutMainTaskInput[]
  createMany?: Prisma.TaskCreateManyMainTaskInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type EnumTaskStateFieldUpdateOperationsInput = {
  set?: $Enums.TaskState
}

export type TaskUpdateOneWithoutSubTasksNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutSubTasksInput, Prisma.TaskUncheckedCreateWithoutSubTasksInput>
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutSubTasksInput
  upsert?: Prisma.TaskUpsertWithoutSubTasksInput
  disconnect?: Prisma.TaskWhereInput | boolean
  delete?: Prisma.TaskWhereInput | boolean
  connect?: Prisma.TaskWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TaskUpdateToOneWithWhereWithoutSubTasksInput, Prisma.TaskUpdateWithoutSubTasksInput>, Prisma.TaskUncheckedUpdateWithoutSubTasksInput>
}

export type TaskUpdateManyWithoutMainTaskNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutMainTaskInput, Prisma.TaskUncheckedCreateWithoutMainTaskInput> | Prisma.TaskCreateWithoutMainTaskInput[] | Prisma.TaskUncheckedCreateWithoutMainTaskInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutMainTaskInput | Prisma.TaskCreateOrConnectWithoutMainTaskInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutMainTaskInput | Prisma.TaskUpsertWithWhereUniqueWithoutMainTaskInput[]
  createMany?: Prisma.TaskCreateManyMainTaskInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutMainTaskInput | Prisma.TaskUpdateWithWhereUniqueWithoutMainTaskInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutMainTaskInput | Prisma.TaskUpdateManyWithWhereWithoutMainTaskInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutMainTaskNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutMainTaskInput, Prisma.TaskUncheckedCreateWithoutMainTaskInput> | Prisma.TaskCreateWithoutMainTaskInput[] | Prisma.TaskUncheckedCreateWithoutMainTaskInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutMainTaskInput | Prisma.TaskCreateOrConnectWithoutMainTaskInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutMainTaskInput | Prisma.TaskUpsertWithWhereUniqueWithoutMainTaskInput[]
  createMany?: Prisma.TaskCreateManyMainTaskInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutMainTaskInput | Prisma.TaskUpdateWithWhereUniqueWithoutMainTaskInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutMainTaskInput | Prisma.TaskUpdateManyWithWhereWithoutMainTaskInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutUsersInput, Prisma.TaskUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutUsersInput
  connect?: Prisma.TaskWhereUniqueInput
}

export type TaskUpdateOneRequiredWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutUsersInput, Prisma.TaskUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutUsersInput
  upsert?: Prisma.TaskUpsertWithoutUsersInput
  connect?: Prisma.TaskWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TaskUpdateToOneWithWhereWithoutUsersInput, Prisma.TaskUpdateWithoutUsersInput>, Prisma.TaskUncheckedUpdateWithoutUsersInput>
}

export type TaskCreateWithoutOrgInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  owner: Prisma.UserCreateNestedOneWithoutTasksAuthorInput
  groups?: Prisma.GroupCreateNestedManyWithoutTasksInput
  mainTask?: Prisma.TaskCreateNestedOneWithoutSubTasksInput
  SubTasks?: Prisma.TaskCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkCreateNestedManyWithoutTaskInput
  todo?: Prisma.TodoCreateNestedOneWithoutTasksInput
}

export type TaskUncheckedCreateWithoutOrgInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
  groups?: Prisma.GroupUncheckedCreateNestedManyWithoutTasksInput
  SubTasks?: Prisma.TaskUncheckedCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskCreateOrConnectWithoutOrgInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutOrgInput, Prisma.TaskUncheckedCreateWithoutOrgInput>
}

export type TaskCreateManyOrgInputEnvelope = {
  data: Prisma.TaskCreateManyOrgInput | Prisma.TaskCreateManyOrgInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithWhereUniqueWithoutOrgInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskUpdateWithoutOrgInput, Prisma.TaskUncheckedUpdateWithoutOrgInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutOrgInput, Prisma.TaskUncheckedCreateWithoutOrgInput>
}

export type TaskUpdateWithWhereUniqueWithoutOrgInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutOrgInput, Prisma.TaskUncheckedUpdateWithoutOrgInput>
}

export type TaskUpdateManyWithWhereWithoutOrgInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyWithoutOrgInput>
}

export type TaskScalarWhereInput = {
  AND?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
  OR?: Prisma.TaskScalarWhereInput[]
  NOT?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
  id?: Prisma.StringFilter<"Task"> | string
  numSeq?: Prisma.IntFilter<"Task"> | number
  createdAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  published?: Prisma.BoolFilter<"Task"> | boolean
  isDeleted?: Prisma.IntFilter<"Task"> | number
  isDeletedDT?: Prisma.DateTimeNullableFilter<"Task"> | Date | string | null
  isPublic?: Prisma.BoolFilter<"Task"> | boolean
  ownerId?: Prisma.StringFilter<"Task"> | string
  orgId?: Prisma.StringFilter<"Task"> | string
  orderTask?: Prisma.IntFilter<"Task"> | number
  title?: Prisma.StringFilter<"Task"> | string
  content?: Prisma.StringNullableFilter<"Task"> | string | null
  taskState?: Prisma.EnumTaskStateFilter<"Task"> | $Enums.TaskState
  mainTaskId?: Prisma.StringNullableFilter<"Task"> | string | null
  todoId?: Prisma.StringNullableFilter<"Task"> | string | null
}

export type TaskCreateWithoutOwnerInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  org: Prisma.OrganizationCreateNestedOneWithoutTasksInput
  groups?: Prisma.GroupCreateNestedManyWithoutTasksInput
  mainTask?: Prisma.TaskCreateNestedOneWithoutSubTasksInput
  SubTasks?: Prisma.TaskCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkCreateNestedManyWithoutTaskInput
  todo?: Prisma.TodoCreateNestedOneWithoutTasksInput
}

export type TaskUncheckedCreateWithoutOwnerInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
  groups?: Prisma.GroupUncheckedCreateNestedManyWithoutTasksInput
  SubTasks?: Prisma.TaskUncheckedCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskCreateOrConnectWithoutOwnerInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutOwnerInput, Prisma.TaskUncheckedCreateWithoutOwnerInput>
}

export type TaskCreateManyOwnerInputEnvelope = {
  data: Prisma.TaskCreateManyOwnerInput | Prisma.TaskCreateManyOwnerInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskUpdateWithoutOwnerInput, Prisma.TaskUncheckedUpdateWithoutOwnerInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutOwnerInput, Prisma.TaskUncheckedCreateWithoutOwnerInput>
}

export type TaskUpdateWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutOwnerInput, Prisma.TaskUncheckedUpdateWithoutOwnerInput>
}

export type TaskUpdateManyWithWhereWithoutOwnerInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyWithoutOwnerInput>
}

export type TaskCreateWithoutGroupsInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  owner: Prisma.UserCreateNestedOneWithoutTasksAuthorInput
  org: Prisma.OrganizationCreateNestedOneWithoutTasksInput
  mainTask?: Prisma.TaskCreateNestedOneWithoutSubTasksInput
  SubTasks?: Prisma.TaskCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkCreateNestedManyWithoutTaskInput
  todo?: Prisma.TodoCreateNestedOneWithoutTasksInput
}

export type TaskUncheckedCreateWithoutGroupsInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
  SubTasks?: Prisma.TaskUncheckedCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskCreateOrConnectWithoutGroupsInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutGroupsInput, Prisma.TaskUncheckedCreateWithoutGroupsInput>
}

export type TaskUpsertWithWhereUniqueWithoutGroupsInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskUpdateWithoutGroupsInput, Prisma.TaskUncheckedUpdateWithoutGroupsInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutGroupsInput, Prisma.TaskUncheckedCreateWithoutGroupsInput>
}

export type TaskUpdateWithWhereUniqueWithoutGroupsInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutGroupsInput, Prisma.TaskUncheckedUpdateWithoutGroupsInput>
}

export type TaskUpdateManyWithWhereWithoutGroupsInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyWithoutGroupsInput>
}

export type TaskCreateWithoutTodoInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  owner: Prisma.UserCreateNestedOneWithoutTasksAuthorInput
  org: Prisma.OrganizationCreateNestedOneWithoutTasksInput
  groups?: Prisma.GroupCreateNestedManyWithoutTasksInput
  mainTask?: Prisma.TaskCreateNestedOneWithoutSubTasksInput
  SubTasks?: Prisma.TaskCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkCreateNestedManyWithoutTaskInput
}

export type TaskUncheckedCreateWithoutTodoInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  groups?: Prisma.GroupUncheckedCreateNestedManyWithoutTasksInput
  SubTasks?: Prisma.TaskUncheckedCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskCreateOrConnectWithoutTodoInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutTodoInput, Prisma.TaskUncheckedCreateWithoutTodoInput>
}

export type TaskCreateManyTodoInputEnvelope = {
  data: Prisma.TaskCreateManyTodoInput | Prisma.TaskCreateManyTodoInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithWhereUniqueWithoutTodoInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskUpdateWithoutTodoInput, Prisma.TaskUncheckedUpdateWithoutTodoInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutTodoInput, Prisma.TaskUncheckedCreateWithoutTodoInput>
}

export type TaskUpdateWithWhereUniqueWithoutTodoInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutTodoInput, Prisma.TaskUncheckedUpdateWithoutTodoInput>
}

export type TaskUpdateManyWithWhereWithoutTodoInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyWithoutTodoInput>
}

export type TaskCreateWithoutSubTasksInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  owner: Prisma.UserCreateNestedOneWithoutTasksAuthorInput
  org: Prisma.OrganizationCreateNestedOneWithoutTasksInput
  groups?: Prisma.GroupCreateNestedManyWithoutTasksInput
  mainTask?: Prisma.TaskCreateNestedOneWithoutSubTasksInput
  Users?: Prisma.UserTaskLinkCreateNestedManyWithoutTaskInput
  todo?: Prisma.TodoCreateNestedOneWithoutTasksInput
}

export type TaskUncheckedCreateWithoutSubTasksInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
  groups?: Prisma.GroupUncheckedCreateNestedManyWithoutTasksInput
  Users?: Prisma.UserTaskLinkUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskCreateOrConnectWithoutSubTasksInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutSubTasksInput, Prisma.TaskUncheckedCreateWithoutSubTasksInput>
}

export type TaskCreateWithoutMainTaskInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  owner: Prisma.UserCreateNestedOneWithoutTasksAuthorInput
  org: Prisma.OrganizationCreateNestedOneWithoutTasksInput
  groups?: Prisma.GroupCreateNestedManyWithoutTasksInput
  SubTasks?: Prisma.TaskCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkCreateNestedManyWithoutTaskInput
  todo?: Prisma.TodoCreateNestedOneWithoutTasksInput
}

export type TaskUncheckedCreateWithoutMainTaskInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  todoId?: string | null
  groups?: Prisma.GroupUncheckedCreateNestedManyWithoutTasksInput
  SubTasks?: Prisma.TaskUncheckedCreateNestedManyWithoutMainTaskInput
  Users?: Prisma.UserTaskLinkUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskCreateOrConnectWithoutMainTaskInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutMainTaskInput, Prisma.TaskUncheckedCreateWithoutMainTaskInput>
}

export type TaskCreateManyMainTaskInputEnvelope = {
  data: Prisma.TaskCreateManyMainTaskInput | Prisma.TaskCreateManyMainTaskInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithoutSubTasksInput = {
  update: Prisma.XOR<Prisma.TaskUpdateWithoutSubTasksInput, Prisma.TaskUncheckedUpdateWithoutSubTasksInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutSubTasksInput, Prisma.TaskUncheckedCreateWithoutSubTasksInput>
  where?: Prisma.TaskWhereInput
}

export type TaskUpdateToOneWithWhereWithoutSubTasksInput = {
  where?: Prisma.TaskWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutSubTasksInput, Prisma.TaskUncheckedUpdateWithoutSubTasksInput>
}

export type TaskUpdateWithoutSubTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  owner?: Prisma.UserUpdateOneRequiredWithoutTasksAuthorNestedInput
  org?: Prisma.OrganizationUpdateOneRequiredWithoutTasksNestedInput
  groups?: Prisma.GroupUpdateManyWithoutTasksNestedInput
  mainTask?: Prisma.TaskUpdateOneWithoutSubTasksNestedInput
  Users?: Prisma.UserTaskLinkUpdateManyWithoutTaskNestedInput
  todo?: Prisma.TodoUpdateOneWithoutTasksNestedInput
}

export type TaskUncheckedUpdateWithoutSubTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  groups?: Prisma.GroupUncheckedUpdateManyWithoutTasksNestedInput
  Users?: Prisma.UserTaskLinkUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskUpsertWithWhereUniqueWithoutMainTaskInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskUpdateWithoutMainTaskInput, Prisma.TaskUncheckedUpdateWithoutMainTaskInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutMainTaskInput, Prisma.TaskUncheckedCreateWithoutMainTaskInput>
}

export type TaskUpdateWithWhereUniqueWithoutMainTaskInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutMainTaskInput, Prisma.TaskUncheckedUpdateWithoutMainTaskInput>
}

export type TaskUpdateManyWithWhereWithoutMainTaskInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyWithoutMainTaskInput>
}

export type TaskCreateWithoutUsersInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  owner: Prisma.UserCreateNestedOneWithoutTasksAuthorInput
  org: Prisma.OrganizationCreateNestedOneWithoutTasksInput
  groups?: Prisma.GroupCreateNestedManyWithoutTasksInput
  mainTask?: Prisma.TaskCreateNestedOneWithoutSubTasksInput
  SubTasks?: Prisma.TaskCreateNestedManyWithoutMainTaskInput
  todo?: Prisma.TodoCreateNestedOneWithoutTasksInput
}

export type TaskUncheckedCreateWithoutUsersInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
  groups?: Prisma.GroupUncheckedCreateNestedManyWithoutTasksInput
  SubTasks?: Prisma.TaskUncheckedCreateNestedManyWithoutMainTaskInput
}

export type TaskCreateOrConnectWithoutUsersInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutUsersInput, Prisma.TaskUncheckedCreateWithoutUsersInput>
}

export type TaskUpsertWithoutUsersInput = {
  update: Prisma.XOR<Prisma.TaskUpdateWithoutUsersInput, Prisma.TaskUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutUsersInput, Prisma.TaskUncheckedCreateWithoutUsersInput>
  where?: Prisma.TaskWhereInput
}

export type TaskUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.TaskWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutUsersInput, Prisma.TaskUncheckedUpdateWithoutUsersInput>
}

export type TaskUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  owner?: Prisma.UserUpdateOneRequiredWithoutTasksAuthorNestedInput
  org?: Prisma.OrganizationUpdateOneRequiredWithoutTasksNestedInput
  groups?: Prisma.GroupUpdateManyWithoutTasksNestedInput
  mainTask?: Prisma.TaskUpdateOneWithoutSubTasksNestedInput
  SubTasks?: Prisma.TaskUpdateManyWithoutMainTaskNestedInput
  todo?: Prisma.TodoUpdateOneWithoutTasksNestedInput
}

export type TaskUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  groups?: Prisma.GroupUncheckedUpdateManyWithoutTasksNestedInput
  SubTasks?: Prisma.TaskUncheckedUpdateManyWithoutMainTaskNestedInput
}

export type TaskCreateManyOrgInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
}

export type TaskUpdateWithoutOrgInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  owner?: Prisma.UserUpdateOneRequiredWithoutTasksAuthorNestedInput
  groups?: Prisma.GroupUpdateManyWithoutTasksNestedInput
  mainTask?: Prisma.TaskUpdateOneWithoutSubTasksNestedInput
  SubTasks?: Prisma.TaskUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUpdateManyWithoutTaskNestedInput
  todo?: Prisma.TodoUpdateOneWithoutTasksNestedInput
}

export type TaskUncheckedUpdateWithoutOrgInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  groups?: Prisma.GroupUncheckedUpdateManyWithoutTasksNestedInput
  SubTasks?: Prisma.TaskUncheckedUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateManyWithoutOrgInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TaskCreateManyOwnerInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
  todoId?: string | null
}

export type TaskUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  org?: Prisma.OrganizationUpdateOneRequiredWithoutTasksNestedInput
  groups?: Prisma.GroupUpdateManyWithoutTasksNestedInput
  mainTask?: Prisma.TaskUpdateOneWithoutSubTasksNestedInput
  SubTasks?: Prisma.TaskUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUpdateManyWithoutTaskNestedInput
  todo?: Prisma.TodoUpdateOneWithoutTasksNestedInput
}

export type TaskUncheckedUpdateWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  groups?: Prisma.GroupUncheckedUpdateManyWithoutTasksNestedInput
  SubTasks?: Prisma.TaskUncheckedUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateManyWithoutOwnerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TaskUpdateWithoutGroupsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  owner?: Prisma.UserUpdateOneRequiredWithoutTasksAuthorNestedInput
  org?: Prisma.OrganizationUpdateOneRequiredWithoutTasksNestedInput
  mainTask?: Prisma.TaskUpdateOneWithoutSubTasksNestedInput
  SubTasks?: Prisma.TaskUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUpdateManyWithoutTaskNestedInput
  todo?: Prisma.TodoUpdateOneWithoutTasksNestedInput
}

export type TaskUncheckedUpdateWithoutGroupsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  SubTasks?: Prisma.TaskUncheckedUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateManyWithoutGroupsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TaskCreateManyTodoInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  mainTaskId?: string | null
}

export type TaskUpdateWithoutTodoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  owner?: Prisma.UserUpdateOneRequiredWithoutTasksAuthorNestedInput
  org?: Prisma.OrganizationUpdateOneRequiredWithoutTasksNestedInput
  groups?: Prisma.GroupUpdateManyWithoutTasksNestedInput
  mainTask?: Prisma.TaskUpdateOneWithoutSubTasksNestedInput
  SubTasks?: Prisma.TaskUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateWithoutTodoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  groups?: Prisma.GroupUncheckedUpdateManyWithoutTasksNestedInput
  SubTasks?: Prisma.TaskUncheckedUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateManyWithoutTodoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  mainTaskId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type TaskCreateManyMainTaskInput = {
  id?: string
  numSeq?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  published?: boolean
  isDeleted?: number
  isDeletedDT?: Date | string | null
  isPublic?: boolean
  ownerId: string
  orgId: string
  orderTask: number
  title: string
  content?: string | null
  taskState?: $Enums.TaskState
  todoId?: string | null
}

export type TaskUpdateWithoutMainTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  owner?: Prisma.UserUpdateOneRequiredWithoutTasksAuthorNestedInput
  org?: Prisma.OrganizationUpdateOneRequiredWithoutTasksNestedInput
  groups?: Prisma.GroupUpdateManyWithoutTasksNestedInput
  SubTasks?: Prisma.TaskUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUpdateManyWithoutTaskNestedInput
  todo?: Prisma.TodoUpdateOneWithoutTasksNestedInput
}

export type TaskUncheckedUpdateWithoutMainTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  groups?: Prisma.GroupUncheckedUpdateManyWithoutTasksNestedInput
  SubTasks?: Prisma.TaskUncheckedUpdateManyWithoutMainTaskNestedInput
  Users?: Prisma.UserTaskLinkUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateManyWithoutMainTaskInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  numSeq?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  published?: Prisma.BoolFieldUpdateOperationsInput | boolean
  isDeleted?: Prisma.IntFieldUpdateOperationsInput | number
  isDeletedDT?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ownerId?: Prisma.StringFieldUpdateOperationsInput | string
  orgId?: Prisma.StringFieldUpdateOperationsInput | string
  orderTask?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  taskState?: Prisma.EnumTaskStateFieldUpdateOperationsInput | $Enums.TaskState
  todoId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type TaskCountOutputType
 */

export type TaskCountOutputType = {
  groups: number
  SubTasks: number
  Users: number
}

export type TaskCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  groups?: boolean | TaskCountOutputTypeCountGroupsArgs
  SubTasks?: boolean | TaskCountOutputTypeCountSubTasksArgs
  Users?: boolean | TaskCountOutputTypeCountUsersArgs
}

/**
 * TaskCountOutputType without action
 */
export type TaskCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskCountOutputType
   */
  select?: Prisma.TaskCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TaskCountOutputType without action
 */
export type TaskCountOutputTypeCountGroupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GroupWhereInput
}

/**
 * TaskCountOutputType without action
 */
export type TaskCountOutputTypeCountSubTasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TaskWhereInput
}

/**
 * TaskCountOutputType without action
 */
export type TaskCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserTaskLinkWhereInput
}


export type TaskSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numSeq?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  isPublic?: boolean
  ownerId?: boolean
  orgId?: boolean
  orderTask?: boolean
  title?: boolean
  content?: boolean
  taskState?: boolean
  mainTaskId?: boolean
  todoId?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  org?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  groups?: boolean | Prisma.Task$groupsArgs<ExtArgs>
  mainTask?: boolean | Prisma.Task$mainTaskArgs<ExtArgs>
  SubTasks?: boolean | Prisma.Task$SubTasksArgs<ExtArgs>
  Users?: boolean | Prisma.Task$UsersArgs<ExtArgs>
  todo?: boolean | Prisma.Task$todoArgs<ExtArgs>
  _count?: boolean | Prisma.TaskCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["task"]>

export type TaskSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numSeq?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  isPublic?: boolean
  ownerId?: boolean
  orgId?: boolean
  orderTask?: boolean
  title?: boolean
  content?: boolean
  taskState?: boolean
  mainTaskId?: boolean
  todoId?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  org?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  mainTask?: boolean | Prisma.Task$mainTaskArgs<ExtArgs>
  todo?: boolean | Prisma.Task$todoArgs<ExtArgs>
}, ExtArgs["result"]["task"]>

export type TaskSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  numSeq?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  isPublic?: boolean
  ownerId?: boolean
  orgId?: boolean
  orderTask?: boolean
  title?: boolean
  content?: boolean
  taskState?: boolean
  mainTaskId?: boolean
  todoId?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  org?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  mainTask?: boolean | Prisma.Task$mainTaskArgs<ExtArgs>
  todo?: boolean | Prisma.Task$todoArgs<ExtArgs>
}, ExtArgs["result"]["task"]>

export type TaskSelectScalar = {
  id?: boolean
  numSeq?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  published?: boolean
  isDeleted?: boolean
  isDeletedDT?: boolean
  isPublic?: boolean
  ownerId?: boolean
  orgId?: boolean
  orderTask?: boolean
  title?: boolean
  content?: boolean
  taskState?: boolean
  mainTaskId?: boolean
  todoId?: boolean
}

export type TaskOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "numSeq" | "createdAt" | "updatedAt" | "published" | "isDeleted" | "isDeletedDT" | "isPublic" | "ownerId" | "orgId" | "orderTask" | "title" | "content" | "taskState" | "mainTaskId" | "todoId", ExtArgs["result"]["task"]>
export type TaskInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  org?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  groups?: boolean | Prisma.Task$groupsArgs<ExtArgs>
  mainTask?: boolean | Prisma.Task$mainTaskArgs<ExtArgs>
  SubTasks?: boolean | Prisma.Task$SubTasksArgs<ExtArgs>
  Users?: boolean | Prisma.Task$UsersArgs<ExtArgs>
  todo?: boolean | Prisma.Task$todoArgs<ExtArgs>
  _count?: boolean | Prisma.TaskCountOutputTypeDefaultArgs<ExtArgs>
}
export type TaskIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  org?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  mainTask?: boolean | Prisma.Task$mainTaskArgs<ExtArgs>
  todo?: boolean | Prisma.Task$todoArgs<ExtArgs>
}
export type TaskIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  org?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  mainTask?: boolean | Prisma.Task$mainTaskArgs<ExtArgs>
  todo?: boolean | Prisma.Task$todoArgs<ExtArgs>
}

export type $TaskPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Task"
  objects: {
    owner: Prisma.$UserPayload<ExtArgs>
    org: Prisma.$OrganizationPayload<ExtArgs>
    groups: Prisma.$GroupPayload<ExtArgs>[]
    mainTask: Prisma.$TaskPayload<ExtArgs> | null
    SubTasks: Prisma.$TaskPayload<ExtArgs>[]
    Users: Prisma.$UserTaskLinkPayload<ExtArgs>[]
    todo: Prisma.$TodoPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    numSeq: number
    createdAt: Date
    updatedAt: Date
    published: boolean
    isDeleted: number
    isDeletedDT: Date | null
    isPublic: boolean
    ownerId: string
    orgId: string
    orderTask: number
    title: string
    content: string | null
    taskState: $Enums.TaskState
    mainTaskId: string | null
    todoId: string | null
  }, ExtArgs["result"]["task"]>
  composites: {}
}

export type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TaskPayload, S>

export type TaskCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TaskCountAggregateInputType | true
  }

export interface TaskDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
  /**
   * Find zero or one Task that matches the filter.
   * @param {TaskFindUniqueArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TaskFindUniqueArgs>(args: Prisma.SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Task that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Task that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindFirstArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TaskFindFirstArgs>(args?: Prisma.SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Task that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tasks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tasks
   * const tasks = await prisma.task.findMany()
   * 
   * // Get first 10 Tasks
   * const tasks = await prisma.task.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TaskFindManyArgs>(args?: Prisma.SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Task.
   * @param {TaskCreateArgs} args - Arguments to create a Task.
   * @example
   * // Create one Task
   * const Task = await prisma.task.create({
   *   data: {
   *     // ... data to create a Task
   *   }
   * })
   * 
   */
  create<T extends TaskCreateArgs>(args: Prisma.SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tasks.
   * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
   * @example
   * // Create many Tasks
   * const task = await prisma.task.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TaskCreateManyArgs>(args?: Prisma.SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Tasks and returns the data saved in the database.
   * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
   * @example
   * // Create many Tasks
   * const task = await prisma.task.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Tasks and only return the `id`
   * const taskWithIdOnly = await prisma.task.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Task.
   * @param {TaskDeleteArgs} args - Arguments to delete one Task.
   * @example
   * // Delete one Task
   * const Task = await prisma.task.delete({
   *   where: {
   *     // ... filter to delete one Task
   *   }
   * })
   * 
   */
  delete<T extends TaskDeleteArgs>(args: Prisma.SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Task.
   * @param {TaskUpdateArgs} args - Arguments to update one Task.
   * @example
   * // Update one Task
   * const task = await prisma.task.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TaskUpdateArgs>(args: Prisma.SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tasks.
   * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
   * @example
   * // Delete a few Tasks
   * const { count } = await prisma.task.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TaskDeleteManyArgs>(args?: Prisma.SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tasks
   * const task = await prisma.task.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TaskUpdateManyArgs>(args: Prisma.SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tasks and returns the data updated in the database.
   * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
   * @example
   * // Update many Tasks
   * const task = await prisma.task.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Tasks and only return the `id`
   * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Task.
   * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
   * @example
   * // Update or create a Task
   * const task = await prisma.task.upsert({
   *   create: {
   *     // ... data to create a Task
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Task we want to update
   *   }
   * })
   */
  upsert<T extends TaskUpsertArgs>(args: Prisma.SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
   * @example
   * // Count the number of Tasks
   * const count = await prisma.task.count({
   *   where: {
   *     // ... the filter for the Tasks we want to count
   *   }
   * })
  **/
  count<T extends TaskCountArgs>(
    args?: Prisma.Subset<T, TaskCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TaskCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Task.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TaskAggregateArgs>(args: Prisma.Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

  /**
   * Group by Task.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TaskGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TaskGroupByArgs['orderBy'] }
      : { orderBy?: TaskGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Task model
 */
readonly fields: TaskFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Task.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TaskClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  owner<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  org<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  groups<T extends Prisma.Task$groupsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Task$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  mainTask<T extends Prisma.Task$mainTaskArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Task$mainTaskArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  SubTasks<T extends Prisma.Task$SubTasksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Task$SubTasksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Users<T extends Prisma.Task$UsersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Task$UsersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserTaskLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  todo<T extends Prisma.Task$todoArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Task$todoArgs<ExtArgs>>): Prisma.Prisma__TodoClient<runtime.Types.Result.GetResult<Prisma.$TodoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Task model
 */
export interface TaskFieldRefs {
  readonly id: Prisma.FieldRef<"Task", 'String'>
  readonly numSeq: Prisma.FieldRef<"Task", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Task", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Task", 'DateTime'>
  readonly published: Prisma.FieldRef<"Task", 'Boolean'>
  readonly isDeleted: Prisma.FieldRef<"Task", 'Int'>
  readonly isDeletedDT: Prisma.FieldRef<"Task", 'DateTime'>
  readonly isPublic: Prisma.FieldRef<"Task", 'Boolean'>
  readonly ownerId: Prisma.FieldRef<"Task", 'String'>
  readonly orgId: Prisma.FieldRef<"Task", 'String'>
  readonly orderTask: Prisma.FieldRef<"Task", 'Int'>
  readonly title: Prisma.FieldRef<"Task", 'String'>
  readonly content: Prisma.FieldRef<"Task", 'String'>
  readonly taskState: Prisma.FieldRef<"Task", 'TaskState'>
  readonly mainTaskId: Prisma.FieldRef<"Task", 'String'>
  readonly todoId: Prisma.FieldRef<"Task", 'String'>
}
    

// Custom InputTypes
/**
 * Task findUnique
 */
export type TaskFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task findUniqueOrThrow
 */
export type TaskFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task findFirst
 */
export type TaskFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tasks to fetch.
   */
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tasks.
   */
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task findFirstOrThrow
 */
export type TaskFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tasks to fetch.
   */
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tasks.
   */
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task findMany
 */
export type TaskFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Tasks to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tasks to fetch.
   */
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tasks.
   */
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task create
 */
export type TaskCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The data needed to create a Task.
   */
  data: Prisma.XOR<Prisma.TaskCreateInput, Prisma.TaskUncheckedCreateInput>
}

/**
 * Task createMany
 */
export type TaskCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Tasks.
   */
  data: Prisma.TaskCreateManyInput | Prisma.TaskCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Task createManyAndReturn
 */
export type TaskCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * The data used to create many Tasks.
   */
  data: Prisma.TaskCreateManyInput | Prisma.TaskCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Task update
 */
export type TaskUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The data needed to update a Task.
   */
  data: Prisma.XOR<Prisma.TaskUpdateInput, Prisma.TaskUncheckedUpdateInput>
  /**
   * Choose, which Task to update.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task updateMany
 */
export type TaskUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Tasks.
   */
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyInput>
  /**
   * Filter which Tasks to update
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to update.
   */
  limit?: number
}

/**
 * Task updateManyAndReturn
 */
export type TaskUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * The data used to update Tasks.
   */
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyInput>
  /**
   * Filter which Tasks to update
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Task upsert
 */
export type TaskUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The filter to search for the Task to update in case it exists.
   */
  where: Prisma.TaskWhereUniqueInput
  /**
   * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
   */
  create: Prisma.XOR<Prisma.TaskCreateInput, Prisma.TaskUncheckedCreateInput>
  /**
   * In case the Task was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TaskUpdateInput, Prisma.TaskUncheckedUpdateInput>
}

/**
 * Task delete
 */
export type TaskDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter which Task to delete.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task deleteMany
 */
export type TaskDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tasks to delete
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to delete.
   */
  limit?: number
}

/**
 * Task.groups
 */
export type Task$groupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  where?: Prisma.GroupWhereInput
  orderBy?: Prisma.GroupOrderByWithRelationInput | Prisma.GroupOrderByWithRelationInput[]
  cursor?: Prisma.GroupWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GroupScalarFieldEnum | Prisma.GroupScalarFieldEnum[]
}

/**
 * Task.mainTask
 */
export type Task$mainTaskArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  where?: Prisma.TaskWhereInput
}

/**
 * Task.SubTasks
 */
export type Task$SubTasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  where?: Prisma.TaskWhereInput
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  cursor?: Prisma.TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task.Users
 */
export type Task$UsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTaskLink
   */
  select?: Prisma.UserTaskLinkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserTaskLink
   */
  omit?: Prisma.UserTaskLinkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTaskLinkInclude<ExtArgs> | null
  where?: Prisma.UserTaskLinkWhereInput
  orderBy?: Prisma.UserTaskLinkOrderByWithRelationInput | Prisma.UserTaskLinkOrderByWithRelationInput[]
  cursor?: Prisma.UserTaskLinkWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserTaskLinkScalarFieldEnum | Prisma.UserTaskLinkScalarFieldEnum[]
}

/**
 * Task.todo
 */
export type Task$todoArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Todo
   */
  select?: Prisma.TodoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Todo
   */
  omit?: Prisma.TodoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TodoInclude<ExtArgs> | null
  where?: Prisma.TodoWhereInput
}

/**
 * Task without action
 */
export type TaskDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
}
