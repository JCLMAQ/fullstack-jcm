
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models.ts"
import { type PrismaClient } from "./class.ts"

export type * from '../models.ts'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
export const prismaVersion: PrismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

/**
 * Utility Types
 */

export type Bytes = runtime.Bytes
export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue


export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull


type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Organization: 'Organization',
  OrgEmail: 'OrgEmail',
  OrgDomain: 'OrgDomain',
  OrgEmailUseTo: 'OrgEmailUseTo',
  User: 'User',
  Phone: 'Phone',
  Address: 'Address',
  UserSecret: 'UserSecret',
  Profile: 'Profile',
  Group: 'Group',
  Todo: 'Todo',
  UserTodoLink: 'UserTodoLink',
  Task: 'Task',
  UserTaskLink: 'UserTaskLink',
  Post: 'Post',
  Category: 'Category',
  Comment: 'Comment',
  File: 'File',
  UserFollower: 'UserFollower',
  PostLike: 'PostLike',
  Story: 'Story',
  Image: 'Image',
  ConfigParam: 'ConfigParam',
  AppEmailDomain: 'AppEmailDomain',
  RefreshToken: 'RefreshToken',
  ApiKey: 'ApiKey',
  Scope: 'Scope',
  Token: 'Token',
  AccountValidation: 'AccountValidation',
  ChangesTracking: 'ChangesTracking'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "organization" | "orgEmail" | "orgDomain" | "orgEmailUseTo" | "user" | "phone" | "address" | "userSecret" | "profile" | "group" | "todo" | "userTodoLink" | "task" | "userTaskLink" | "post" | "category" | "comment" | "file" | "userFollower" | "postLike" | "story" | "image" | "configParam" | "appEmailDomain" | "refreshToken" | "apiKey" | "scope" | "token" | "accountValidation" | "changesTracking"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Organization: {
      payload: Prisma.$OrganizationPayload<ExtArgs>
      fields: Prisma.OrganizationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findFirst: {
          args: Prisma.OrganizationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        findMany: {
          args: Prisma.OrganizationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        create: {
          args: Prisma.OrganizationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        createMany: {
          args: Prisma.OrganizationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        delete: {
          args: Prisma.OrganizationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        update: {
          args: Prisma.OrganizationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        deleteMany: {
          args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
        }
        upsert: {
          args: Prisma.OrganizationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>
        }
        aggregate: {
          args: Prisma.OrganizationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganization>
        }
        groupBy: {
          args: Prisma.OrganizationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrganizationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrganizationCountAggregateOutputType> | number
        }
      }
    }
    OrgEmail: {
      payload: Prisma.$OrgEmailPayload<ExtArgs>
      fields: Prisma.OrgEmailFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrgEmailFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrgEmailFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>
        }
        findFirst: {
          args: Prisma.OrgEmailFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrgEmailFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>
        }
        findMany: {
          args: Prisma.OrgEmailFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>[]
        }
        create: {
          args: Prisma.OrgEmailCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>
        }
        createMany: {
          args: Prisma.OrgEmailCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrgEmailCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>[]
        }
        delete: {
          args: Prisma.OrgEmailDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>
        }
        update: {
          args: Prisma.OrgEmailUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>
        }
        deleteMany: {
          args: Prisma.OrgEmailDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrgEmailUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrgEmailUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>[]
        }
        upsert: {
          args: Prisma.OrgEmailUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailPayload>
        }
        aggregate: {
          args: Prisma.OrgEmailAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrgEmail>
        }
        groupBy: {
          args: Prisma.OrgEmailGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrgEmailGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrgEmailCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrgEmailCountAggregateOutputType> | number
        }
      }
    }
    OrgDomain: {
      payload: Prisma.$OrgDomainPayload<ExtArgs>
      fields: Prisma.OrgDomainFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrgDomainFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrgDomainFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>
        }
        findFirst: {
          args: Prisma.OrgDomainFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrgDomainFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>
        }
        findMany: {
          args: Prisma.OrgDomainFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>[]
        }
        create: {
          args: Prisma.OrgDomainCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>
        }
        createMany: {
          args: Prisma.OrgDomainCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrgDomainCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>[]
        }
        delete: {
          args: Prisma.OrgDomainDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>
        }
        update: {
          args: Prisma.OrgDomainUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>
        }
        deleteMany: {
          args: Prisma.OrgDomainDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrgDomainUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrgDomainUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>[]
        }
        upsert: {
          args: Prisma.OrgDomainUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgDomainPayload>
        }
        aggregate: {
          args: Prisma.OrgDomainAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrgDomain>
        }
        groupBy: {
          args: Prisma.OrgDomainGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrgDomainGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrgDomainCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrgDomainCountAggregateOutputType> | number
        }
      }
    }
    OrgEmailUseTo: {
      payload: Prisma.$OrgEmailUseToPayload<ExtArgs>
      fields: Prisma.OrgEmailUseToFieldRefs
      operations: {
        findUnique: {
          args: Prisma.OrgEmailUseToFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.OrgEmailUseToFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>
        }
        findFirst: {
          args: Prisma.OrgEmailUseToFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.OrgEmailUseToFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>
        }
        findMany: {
          args: Prisma.OrgEmailUseToFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>[]
        }
        create: {
          args: Prisma.OrgEmailUseToCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>
        }
        createMany: {
          args: Prisma.OrgEmailUseToCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.OrgEmailUseToCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>[]
        }
        delete: {
          args: Prisma.OrgEmailUseToDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>
        }
        update: {
          args: Prisma.OrgEmailUseToUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>
        }
        deleteMany: {
          args: Prisma.OrgEmailUseToDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.OrgEmailUseToUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.OrgEmailUseToUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>[]
        }
        upsert: {
          args: Prisma.OrgEmailUseToUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrgEmailUseToPayload>
        }
        aggregate: {
          args: Prisma.OrgEmailUseToAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrgEmailUseTo>
        }
        groupBy: {
          args: Prisma.OrgEmailUseToGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrgEmailUseToGroupByOutputType>[]
        }
        count: {
          args: Prisma.OrgEmailUseToCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrgEmailUseToCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
    Phone: {
      payload: Prisma.$PhonePayload<ExtArgs>
      fields: Prisma.PhoneFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PhoneFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PhoneFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>
        }
        findFirst: {
          args: Prisma.PhoneFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PhoneFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>
        }
        findMany: {
          args: Prisma.PhoneFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>[]
        }
        create: {
          args: Prisma.PhoneCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>
        }
        createMany: {
          args: Prisma.PhoneCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PhoneCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>[]
        }
        delete: {
          args: Prisma.PhoneDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>
        }
        update: {
          args: Prisma.PhoneUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>
        }
        deleteMany: {
          args: Prisma.PhoneDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PhoneUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PhoneUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>[]
        }
        upsert: {
          args: Prisma.PhoneUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PhonePayload>
        }
        aggregate: {
          args: Prisma.PhoneAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePhone>
        }
        groupBy: {
          args: Prisma.PhoneGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PhoneGroupByOutputType>[]
        }
        count: {
          args: Prisma.PhoneCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PhoneCountAggregateOutputType> | number
        }
      }
    }
    Address: {
      payload: Prisma.$AddressPayload<ExtArgs>
      fields: Prisma.AddressFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AddressFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        findFirst: {
          args: Prisma.AddressFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        findMany: {
          args: Prisma.AddressFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        create: {
          args: Prisma.AddressCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        createMany: {
          args: Prisma.AddressCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        delete: {
          args: Prisma.AddressDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        update: {
          args: Prisma.AddressUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        deleteMany: {
          args: Prisma.AddressDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AddressUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AddressUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>[]
        }
        upsert: {
          args: Prisma.AddressUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AddressPayload>
        }
        aggregate: {
          args: Prisma.AddressAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAddress>
        }
        groupBy: {
          args: Prisma.AddressGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddressGroupByOutputType>[]
        }
        count: {
          args: Prisma.AddressCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AddressCountAggregateOutputType> | number
        }
      }
    }
    UserSecret: {
      payload: Prisma.$UserSecretPayload<ExtArgs>
      fields: Prisma.UserSecretFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserSecretFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserSecretFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>
        }
        findFirst: {
          args: Prisma.UserSecretFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserSecretFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>
        }
        findMany: {
          args: Prisma.UserSecretFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>[]
        }
        create: {
          args: Prisma.UserSecretCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>
        }
        createMany: {
          args: Prisma.UserSecretCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserSecretCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>[]
        }
        delete: {
          args: Prisma.UserSecretDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>
        }
        update: {
          args: Prisma.UserSecretUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>
        }
        deleteMany: {
          args: Prisma.UserSecretDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserSecretUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserSecretUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>[]
        }
        upsert: {
          args: Prisma.UserSecretUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserSecretPayload>
        }
        aggregate: {
          args: Prisma.UserSecretAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserSecret>
        }
        groupBy: {
          args: Prisma.UserSecretGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserSecretGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserSecretCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserSecretCountAggregateOutputType> | number
        }
      }
    }
    Profile: {
      payload: Prisma.$ProfilePayload<ExtArgs>
      fields: Prisma.ProfileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ProfileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        findFirst: {
          args: Prisma.ProfileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        findMany: {
          args: Prisma.ProfileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        create: {
          args: Prisma.ProfileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        createMany: {
          args: Prisma.ProfileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        delete: {
          args: Prisma.ProfileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        update: {
          args: Prisma.ProfileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        deleteMany: {
          args: Prisma.ProfileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ProfileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>[]
        }
        upsert: {
          args: Prisma.ProfileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProfilePayload>
        }
        aggregate: {
          args: Prisma.ProfileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProfile>
        }
        groupBy: {
          args: Prisma.ProfileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileGroupByOutputType>[]
        }
        count: {
          args: Prisma.ProfileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileCountAggregateOutputType> | number
        }
      }
    }
    Group: {
      payload: Prisma.$GroupPayload<ExtArgs>
      fields: Prisma.GroupFieldRefs
      operations: {
        findUnique: {
          args: Prisma.GroupFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        findFirst: {
          args: Prisma.GroupFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        findMany: {
          args: Prisma.GroupFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>[]
        }
        create: {
          args: Prisma.GroupCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        createMany: {
          args: Prisma.GroupCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>[]
        }
        delete: {
          args: Prisma.GroupDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        update: {
          args: Prisma.GroupUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        deleteMany: {
          args: Prisma.GroupDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.GroupUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.GroupUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>[]
        }
        upsert: {
          args: Prisma.GroupUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GroupPayload>
        }
        aggregate: {
          args: Prisma.GroupAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGroup>
        }
        groupBy: {
          args: Prisma.GroupGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GroupGroupByOutputType>[]
        }
        count: {
          args: Prisma.GroupCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GroupCountAggregateOutputType> | number
        }
      }
    }
    Todo: {
      payload: Prisma.$TodoPayload<ExtArgs>
      fields: Prisma.TodoFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TodoFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TodoFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>
        }
        findFirst: {
          args: Prisma.TodoFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TodoFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>
        }
        findMany: {
          args: Prisma.TodoFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>[]
        }
        create: {
          args: Prisma.TodoCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>
        }
        createMany: {
          args: Prisma.TodoCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TodoCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>[]
        }
        delete: {
          args: Prisma.TodoDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>
        }
        update: {
          args: Prisma.TodoUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>
        }
        deleteMany: {
          args: Prisma.TodoDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TodoUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TodoUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>[]
        }
        upsert: {
          args: Prisma.TodoUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TodoPayload>
        }
        aggregate: {
          args: Prisma.TodoAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTodo>
        }
        groupBy: {
          args: Prisma.TodoGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TodoGroupByOutputType>[]
        }
        count: {
          args: Prisma.TodoCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TodoCountAggregateOutputType> | number
        }
      }
    }
    UserTodoLink: {
      payload: Prisma.$UserTodoLinkPayload<ExtArgs>
      fields: Prisma.UserTodoLinkFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserTodoLinkFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserTodoLinkFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>
        }
        findFirst: {
          args: Prisma.UserTodoLinkFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserTodoLinkFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>
        }
        findMany: {
          args: Prisma.UserTodoLinkFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>[]
        }
        create: {
          args: Prisma.UserTodoLinkCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>
        }
        createMany: {
          args: Prisma.UserTodoLinkCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserTodoLinkCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>[]
        }
        delete: {
          args: Prisma.UserTodoLinkDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>
        }
        update: {
          args: Prisma.UserTodoLinkUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>
        }
        deleteMany: {
          args: Prisma.UserTodoLinkDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserTodoLinkUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserTodoLinkUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>[]
        }
        upsert: {
          args: Prisma.UserTodoLinkUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTodoLinkPayload>
        }
        aggregate: {
          args: Prisma.UserTodoLinkAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserTodoLink>
        }
        groupBy: {
          args: Prisma.UserTodoLinkGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserTodoLinkGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserTodoLinkCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserTodoLinkCountAggregateOutputType> | number
        }
      }
    }
    Task: {
      payload: Prisma.$TaskPayload<ExtArgs>
      fields: Prisma.TaskFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TaskFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        findFirst: {
          args: Prisma.TaskFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        findMany: {
          args: Prisma.TaskFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        create: {
          args: Prisma.TaskCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        createMany: {
          args: Prisma.TaskCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        delete: {
          args: Prisma.TaskDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        update: {
          args: Prisma.TaskUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        deleteMany: {
          args: Prisma.TaskDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TaskUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>[]
        }
        upsert: {
          args: Prisma.TaskUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TaskPayload>
        }
        aggregate: {
          args: Prisma.TaskAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTask>
        }
        groupBy: {
          args: Prisma.TaskGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TaskGroupByOutputType>[]
        }
        count: {
          args: Prisma.TaskCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TaskCountAggregateOutputType> | number
        }
      }
    }
    UserTaskLink: {
      payload: Prisma.$UserTaskLinkPayload<ExtArgs>
      fields: Prisma.UserTaskLinkFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserTaskLinkFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserTaskLinkFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>
        }
        findFirst: {
          args: Prisma.UserTaskLinkFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserTaskLinkFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>
        }
        findMany: {
          args: Prisma.UserTaskLinkFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>[]
        }
        create: {
          args: Prisma.UserTaskLinkCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>
        }
        createMany: {
          args: Prisma.UserTaskLinkCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserTaskLinkCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>[]
        }
        delete: {
          args: Prisma.UserTaskLinkDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>
        }
        update: {
          args: Prisma.UserTaskLinkUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>
        }
        deleteMany: {
          args: Prisma.UserTaskLinkDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserTaskLinkUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserTaskLinkUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>[]
        }
        upsert: {
          args: Prisma.UserTaskLinkUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserTaskLinkPayload>
        }
        aggregate: {
          args: Prisma.UserTaskLinkAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserTaskLink>
        }
        groupBy: {
          args: Prisma.UserTaskLinkGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserTaskLinkGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserTaskLinkCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserTaskLinkCountAggregateOutputType> | number
        }
      }
    }
    Post: {
      payload: Prisma.$PostPayload<ExtArgs>
      fields: Prisma.PostFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PostFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        findFirst: {
          args: Prisma.PostFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        findMany: {
          args: Prisma.PostFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>[]
        }
        create: {
          args: Prisma.PostCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        createMany: {
          args: Prisma.PostCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>[]
        }
        delete: {
          args: Prisma.PostDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        update: {
          args: Prisma.PostUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        deleteMany: {
          args: Prisma.PostDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PostUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>[]
        }
        upsert: {
          args: Prisma.PostUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostPayload>
        }
        aggregate: {
          args: Prisma.PostAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePost>
        }
        groupBy: {
          args: Prisma.PostGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostGroupByOutputType>[]
        }
        count: {
          args: Prisma.PostCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostCountAggregateOutputType> | number
        }
      }
    }
    Category: {
      payload: Prisma.$CategoryPayload<ExtArgs>
      fields: Prisma.CategoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CategoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        findFirst: {
          args: Prisma.CategoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        findMany: {
          args: Prisma.CategoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        create: {
          args: Prisma.CategoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        createMany: {
          args: Prisma.CategoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        delete: {
          args: Prisma.CategoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        update: {
          args: Prisma.CategoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        deleteMany: {
          args: Prisma.CategoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CategoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>[]
        }
        upsert: {
          args: Prisma.CategoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CategoryPayload>
        }
        aggregate: {
          args: Prisma.CategoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCategory>
        }
        groupBy: {
          args: Prisma.CategoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.CategoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CategoryCountAggregateOutputType> | number
        }
      }
    }
    Comment: {
      payload: Prisma.$CommentPayload<ExtArgs>
      fields: Prisma.CommentFieldRefs
      operations: {
        findUnique: {
          args: Prisma.CommentFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        findFirst: {
          args: Prisma.CommentFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        findMany: {
          args: Prisma.CommentFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        create: {
          args: Prisma.CommentCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        createMany: {
          args: Prisma.CommentCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        delete: {
          args: Prisma.CommentDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        update: {
          args: Prisma.CommentUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        deleteMany: {
          args: Prisma.CommentDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.CommentUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>[]
        }
        upsert: {
          args: Prisma.CommentUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CommentPayload>
        }
        aggregate: {
          args: Prisma.CommentAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateComment>
        }
        groupBy: {
          args: Prisma.CommentGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CommentGroupByOutputType>[]
        }
        count: {
          args: Prisma.CommentCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CommentCountAggregateOutputType> | number
        }
      }
    }
    File: {
      payload: Prisma.$FilePayload<ExtArgs>
      fields: Prisma.FileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.FileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findFirst: {
          args: Prisma.FileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        findMany: {
          args: Prisma.FileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        create: {
          args: Prisma.FileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        createMany: {
          args: Prisma.FileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        delete: {
          args: Prisma.FileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        update: {
          args: Prisma.FileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        deleteMany: {
          args: Prisma.FileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.FileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>[]
        }
        upsert: {
          args: Prisma.FileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$FilePayload>
        }
        aggregate: {
          args: Prisma.FileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFile>
        }
        groupBy: {
          args: Prisma.FileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileGroupByOutputType>[]
        }
        count: {
          args: Prisma.FileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FileCountAggregateOutputType> | number
        }
      }
    }
    UserFollower: {
      payload: Prisma.$UserFollowerPayload<ExtArgs>
      fields: Prisma.UserFollowerFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFollowerFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFollowerFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>
        }
        findFirst: {
          args: Prisma.UserFollowerFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFollowerFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>
        }
        findMany: {
          args: Prisma.UserFollowerFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>[]
        }
        create: {
          args: Prisma.UserFollowerCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>
        }
        createMany: {
          args: Prisma.UserFollowerCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserFollowerCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>[]
        }
        delete: {
          args: Prisma.UserFollowerDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>
        }
        update: {
          args: Prisma.UserFollowerUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>
        }
        deleteMany: {
          args: Prisma.UserFollowerDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserFollowerUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserFollowerUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>[]
        }
        upsert: {
          args: Prisma.UserFollowerUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserFollowerPayload>
        }
        aggregate: {
          args: Prisma.UserFollowerAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUserFollower>
        }
        groupBy: {
          args: Prisma.UserFollowerGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserFollowerGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserFollowerCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserFollowerCountAggregateOutputType> | number
        }
      }
    }
    PostLike: {
      payload: Prisma.$PostLikePayload<ExtArgs>
      fields: Prisma.PostLikeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.PostLikeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.PostLikeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>
        }
        findFirst: {
          args: Prisma.PostLikeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.PostLikeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>
        }
        findMany: {
          args: Prisma.PostLikeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>[]
        }
        create: {
          args: Prisma.PostLikeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>
        }
        createMany: {
          args: Prisma.PostLikeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.PostLikeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>[]
        }
        delete: {
          args: Prisma.PostLikeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>
        }
        update: {
          args: Prisma.PostLikeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>
        }
        deleteMany: {
          args: Prisma.PostLikeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.PostLikeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.PostLikeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>[]
        }
        upsert: {
          args: Prisma.PostLikeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$PostLikePayload>
        }
        aggregate: {
          args: Prisma.PostLikeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePostLike>
        }
        groupBy: {
          args: Prisma.PostLikeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostLikeGroupByOutputType>[]
        }
        count: {
          args: Prisma.PostLikeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PostLikeCountAggregateOutputType> | number
        }
      }
    }
    Story: {
      payload: Prisma.$StoryPayload<ExtArgs>
      fields: Prisma.StoryFieldRefs
      operations: {
        findUnique: {
          args: Prisma.StoryFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.StoryFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>
        }
        findFirst: {
          args: Prisma.StoryFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.StoryFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>
        }
        findMany: {
          args: Prisma.StoryFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>[]
        }
        create: {
          args: Prisma.StoryCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>
        }
        createMany: {
          args: Prisma.StoryCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.StoryCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>[]
        }
        delete: {
          args: Prisma.StoryDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>
        }
        update: {
          args: Prisma.StoryUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>
        }
        deleteMany: {
          args: Prisma.StoryDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.StoryUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.StoryUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>[]
        }
        upsert: {
          args: Prisma.StoryUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$StoryPayload>
        }
        aggregate: {
          args: Prisma.StoryAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateStory>
        }
        groupBy: {
          args: Prisma.StoryGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StoryGroupByOutputType>[]
        }
        count: {
          args: Prisma.StoryCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.StoryCountAggregateOutputType> | number
        }
      }
    }
    Image: {
      payload: Prisma.$ImagePayload<ExtArgs>
      fields: Prisma.ImageFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ImageFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>
        }
        findFirst: {
          args: Prisma.ImageFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>
        }
        findMany: {
          args: Prisma.ImageFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>[]
        }
        create: {
          args: Prisma.ImageCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>
        }
        createMany: {
          args: Prisma.ImageCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>[]
        }
        delete: {
          args: Prisma.ImageDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>
        }
        update: {
          args: Prisma.ImageUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>
        }
        deleteMany: {
          args: Prisma.ImageDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ImageUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>[]
        }
        upsert: {
          args: Prisma.ImageUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ImagePayload>
        }
        aggregate: {
          args: Prisma.ImageAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateImage>
        }
        groupBy: {
          args: Prisma.ImageGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ImageGroupByOutputType>[]
        }
        count: {
          args: Prisma.ImageCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ImageCountAggregateOutputType> | number
        }
      }
    }
    ConfigParam: {
      payload: Prisma.$ConfigParamPayload<ExtArgs>
      fields: Prisma.ConfigParamFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ConfigParamFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ConfigParamFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>
        }
        findFirst: {
          args: Prisma.ConfigParamFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ConfigParamFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>
        }
        findMany: {
          args: Prisma.ConfigParamFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>[]
        }
        create: {
          args: Prisma.ConfigParamCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>
        }
        createMany: {
          args: Prisma.ConfigParamCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ConfigParamCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>[]
        }
        delete: {
          args: Prisma.ConfigParamDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>
        }
        update: {
          args: Prisma.ConfigParamUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>
        }
        deleteMany: {
          args: Prisma.ConfigParamDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ConfigParamUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ConfigParamUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>[]
        }
        upsert: {
          args: Prisma.ConfigParamUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ConfigParamPayload>
        }
        aggregate: {
          args: Prisma.ConfigParamAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateConfigParam>
        }
        groupBy: {
          args: Prisma.ConfigParamGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConfigParamGroupByOutputType>[]
        }
        count: {
          args: Prisma.ConfigParamCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ConfigParamCountAggregateOutputType> | number
        }
      }
    }
    AppEmailDomain: {
      payload: Prisma.$AppEmailDomainPayload<ExtArgs>
      fields: Prisma.AppEmailDomainFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AppEmailDomainFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AppEmailDomainFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>
        }
        findFirst: {
          args: Prisma.AppEmailDomainFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AppEmailDomainFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>
        }
        findMany: {
          args: Prisma.AppEmailDomainFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>[]
        }
        create: {
          args: Prisma.AppEmailDomainCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>
        }
        createMany: {
          args: Prisma.AppEmailDomainCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AppEmailDomainCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>[]
        }
        delete: {
          args: Prisma.AppEmailDomainDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>
        }
        update: {
          args: Prisma.AppEmailDomainUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>
        }
        deleteMany: {
          args: Prisma.AppEmailDomainDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AppEmailDomainUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AppEmailDomainUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>[]
        }
        upsert: {
          args: Prisma.AppEmailDomainUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AppEmailDomainPayload>
        }
        aggregate: {
          args: Prisma.AppEmailDomainAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAppEmailDomain>
        }
        groupBy: {
          args: Prisma.AppEmailDomainGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AppEmailDomainGroupByOutputType>[]
        }
        count: {
          args: Prisma.AppEmailDomainCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AppEmailDomainCountAggregateOutputType> | number
        }
      }
    }
    RefreshToken: {
      payload: Prisma.$RefreshTokenPayload<ExtArgs>
      fields: Prisma.RefreshTokenFieldRefs
      operations: {
        findUnique: {
          args: Prisma.RefreshTokenFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.RefreshTokenFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
        }
        findFirst: {
          args: Prisma.RefreshTokenFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.RefreshTokenFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
        }
        findMany: {
          args: Prisma.RefreshTokenFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
        }
        create: {
          args: Prisma.RefreshTokenCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
        }
        createMany: {
          args: Prisma.RefreshTokenCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.RefreshTokenCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
        }
        delete: {
          args: Prisma.RefreshTokenDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
        }
        update: {
          args: Prisma.RefreshTokenUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
        }
        deleteMany: {
          args: Prisma.RefreshTokenDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.RefreshTokenUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.RefreshTokenUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>[]
        }
        upsert: {
          args: Prisma.RefreshTokenUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$RefreshTokenPayload>
        }
        aggregate: {
          args: Prisma.RefreshTokenAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateRefreshToken>
        }
        groupBy: {
          args: Prisma.RefreshTokenGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RefreshTokenGroupByOutputType>[]
        }
        count: {
          args: Prisma.RefreshTokenCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.RefreshTokenCountAggregateOutputType> | number
        }
      }
    }
    ApiKey: {
      payload: Prisma.$ApiKeyPayload<ExtArgs>
      fields: Prisma.ApiKeyFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ApiKeyFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ApiKeyFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>
        }
        findFirst: {
          args: Prisma.ApiKeyFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ApiKeyFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>
        }
        findMany: {
          args: Prisma.ApiKeyFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
        }
        create: {
          args: Prisma.ApiKeyCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>
        }
        createMany: {
          args: Prisma.ApiKeyCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ApiKeyCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
        }
        delete: {
          args: Prisma.ApiKeyDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>
        }
        update: {
          args: Prisma.ApiKeyUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>
        }
        deleteMany: {
          args: Prisma.ApiKeyDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ApiKeyUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ApiKeyUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
        }
        upsert: {
          args: Prisma.ApiKeyUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ApiKeyPayload>
        }
        aggregate: {
          args: Prisma.ApiKeyAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateApiKey>
        }
        groupBy: {
          args: Prisma.ApiKeyGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ApiKeyGroupByOutputType>[]
        }
        count: {
          args: Prisma.ApiKeyCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ApiKeyCountAggregateOutputType> | number
        }
      }
    }
    Scope: {
      payload: Prisma.$ScopePayload<ExtArgs>
      fields: Prisma.ScopeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ScopeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ScopeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>
        }
        findFirst: {
          args: Prisma.ScopeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ScopeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>
        }
        findMany: {
          args: Prisma.ScopeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>[]
        }
        create: {
          args: Prisma.ScopeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>
        }
        createMany: {
          args: Prisma.ScopeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ScopeCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>[]
        }
        delete: {
          args: Prisma.ScopeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>
        }
        update: {
          args: Prisma.ScopeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>
        }
        deleteMany: {
          args: Prisma.ScopeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ScopeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ScopeUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>[]
        }
        upsert: {
          args: Prisma.ScopeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ScopePayload>
        }
        aggregate: {
          args: Prisma.ScopeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateScope>
        }
        groupBy: {
          args: Prisma.ScopeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScopeGroupByOutputType>[]
        }
        count: {
          args: Prisma.ScopeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScopeCountAggregateOutputType> | number
        }
      }
    }
    Token: {
      payload: Prisma.$TokenPayload<ExtArgs>
      fields: Prisma.TokenFieldRefs
      operations: {
        findUnique: {
          args: Prisma.TokenFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        findFirst: {
          args: Prisma.TokenFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        findMany: {
          args: Prisma.TokenFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[]
        }
        create: {
          args: Prisma.TokenCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        createMany: {
          args: Prisma.TokenCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[]
        }
        delete: {
          args: Prisma.TokenDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        update: {
          args: Prisma.TokenUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        deleteMany: {
          args: Prisma.TokenDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.TokenUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.TokenUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>[]
        }
        upsert: {
          args: Prisma.TokenUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$TokenPayload>
        }
        aggregate: {
          args: Prisma.TokenAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateToken>
        }
        groupBy: {
          args: Prisma.TokenGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TokenGroupByOutputType>[]
        }
        count: {
          args: Prisma.TokenCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TokenCountAggregateOutputType> | number
        }
      }
    }
    AccountValidation: {
      payload: Prisma.$AccountValidationPayload<ExtArgs>
      fields: Prisma.AccountValidationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.AccountValidationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.AccountValidationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>
        }
        findFirst: {
          args: Prisma.AccountValidationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.AccountValidationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>
        }
        findMany: {
          args: Prisma.AccountValidationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>[]
        }
        create: {
          args: Prisma.AccountValidationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>
        }
        createMany: {
          args: Prisma.AccountValidationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.AccountValidationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>[]
        }
        delete: {
          args: Prisma.AccountValidationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>
        }
        update: {
          args: Prisma.AccountValidationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>
        }
        deleteMany: {
          args: Prisma.AccountValidationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.AccountValidationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.AccountValidationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>[]
        }
        upsert: {
          args: Prisma.AccountValidationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountValidationPayload>
        }
        aggregate: {
          args: Prisma.AccountValidationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccountValidation>
        }
        groupBy: {
          args: Prisma.AccountValidationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountValidationGroupByOutputType>[]
        }
        count: {
          args: Prisma.AccountValidationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AccountValidationCountAggregateOutputType> | number
        }
      }
    }
    ChangesTracking: {
      payload: Prisma.$ChangesTrackingPayload<ExtArgs>
      fields: Prisma.ChangesTrackingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ChangesTrackingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ChangesTrackingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>
        }
        findFirst: {
          args: Prisma.ChangesTrackingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ChangesTrackingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>
        }
        findMany: {
          args: Prisma.ChangesTrackingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>[]
        }
        create: {
          args: Prisma.ChangesTrackingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>
        }
        createMany: {
          args: Prisma.ChangesTrackingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ChangesTrackingCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>[]
        }
        delete: {
          args: Prisma.ChangesTrackingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>
        }
        update: {
          args: Prisma.ChangesTrackingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>
        }
        deleteMany: {
          args: Prisma.ChangesTrackingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ChangesTrackingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ChangesTrackingUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>[]
        }
        upsert: {
          args: Prisma.ChangesTrackingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChangesTrackingPayload>
        }
        aggregate: {
          args: Prisma.ChangesTrackingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateChangesTracking>
        }
        groupBy: {
          args: Prisma.ChangesTrackingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChangesTrackingGroupByOutputType>[]
        }
        count: {
          args: Prisma.ChangesTrackingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ChangesTrackingCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const OrganizationScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  name: 'name',
  description: 'description',
  address: 'address',
  emailITAdmin: 'emailITAdmin',
  webSite: 'webSite',
  mainOrgId: 'mainOrgId'
} as const

export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


export const OrgEmailScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  email: 'email',
  description: 'description',
  orgId: 'orgId'
} as const

export type OrgEmailScalarFieldEnum = (typeof OrgEmailScalarFieldEnum)[keyof typeof OrgEmailScalarFieldEnum]


export const OrgDomainScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  domainName: 'domainName',
  extension: 'extension',
  orgId: 'orgId'
} as const

export type OrgDomainScalarFieldEnum = (typeof OrgDomainScalarFieldEnum)[keyof typeof OrgDomainScalarFieldEnum]


export const OrgEmailUseToScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  useTo: 'useTo',
  isActiv: 'isActiv',
  emailOrgId: 'emailOrgId'
} as const

export type OrgEmailUseToScalarFieldEnum = (typeof OrgEmailUseToScalarFieldEnum)[keyof typeof OrgEmailUseToScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  email: 'email',
  lastName: 'lastName',
  firstName: 'firstName',
  title: 'title',
  nickName: 'nickName',
  Gender: 'Gender',
  social: 'social',
  Language: 'Language',
  photoUrl: 'photoUrl',
  avatarFileId: 'avatarFileId',
  dateOfBirth: 'dateOfBirth',
  hasEmergencyContact: 'hasEmergencyContact',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  jobTitle: 'jobTitle',
  position: 'position',
  isValidated: 'isValidated',
  isSuspended: 'isSuspended',
  managerId: 'managerId',
  Roles: 'Roles',
  Permissions: 'Permissions',
  isTfaEnable: 'isTfaEnable',
  tfaSecret: 'tfaSecret',
  passWordFaker: 'passWordFaker'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const PhoneScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  countryCode: 'countryCode',
  number: 'number',
  extension: 'extension',
  phoneType: 'phoneType',
  isPrimary: 'isPrimary'
} as const

export type PhoneScalarFieldEnum = (typeof PhoneScalarFieldEnum)[keyof typeof PhoneScalarFieldEnum]


export const AddressScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  addressType: 'addressType',
  isPrimary: 'isPrimary'
} as const

export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


export const UserSecretScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  pwdHash: 'pwdHash',
  salt: 'salt',
  isAdmin: 'isAdmin'
} as const

export type UserSecretScalarFieldEnum = (typeof UserSecretScalarFieldEnum)[keyof typeof UserSecretScalarFieldEnum]


export const ProfileScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  orderProfile: 'orderProfile',
  bio: 'bio'
} as const

export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


export const GroupScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  orderGroup: 'orderGroup',
  name: 'name',
  description: 'description',
  isActiv: 'isActiv',
  orgId: 'orgId'
} as const

export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


export const TodoScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  isPublic: 'isPublic',
  ownerId: 'ownerId',
  orgId: 'orgId',
  orderTodo: 'orderTodo',
  title: 'title',
  content: 'content',
  todoState: 'todoState',
  mainTodoId: 'mainTodoId'
} as const

export type TodoScalarFieldEnum = (typeof TodoScalarFieldEnum)[keyof typeof TodoScalarFieldEnum]


export const UserTodoLinkScalarFieldEnum = {
  userId: 'userId',
  todoId: 'todoId',
  isAuthor: 'isAuthor',
  isAssigned: 'isAssigned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  comment: 'comment'
} as const

export type UserTodoLinkScalarFieldEnum = (typeof UserTodoLinkScalarFieldEnum)[keyof typeof UserTodoLinkScalarFieldEnum]


export const TaskScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  isPublic: 'isPublic',
  ownerId: 'ownerId',
  orgId: 'orgId',
  orderTask: 'orderTask',
  title: 'title',
  content: 'content',
  taskState: 'taskState',
  mainTaskId: 'mainTaskId',
  todoId: 'todoId'
} as const

export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


export const UserTaskLinkScalarFieldEnum = {
  userId: 'userId',
  taskId: 'taskId',
  isAuthor: 'isAuthor',
  isAssigned: 'isAssigned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  comment: 'comment'
} as const

export type UserTaskLinkScalarFieldEnum = (typeof UserTaskLinkScalarFieldEnum)[keyof typeof UserTaskLinkScalarFieldEnum]


export const PostScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  isPublic: 'isPublic',
  ownerId: 'ownerId',
  orgId: 'orgId',
  orderPost: 'orderPost',
  title: 'title',
  content: 'content'
} as const

export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


export const CategoryScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  orderCategory: 'orderCategory',
  name: 'name'
} as const

export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


export const CommentScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  orderComment: 'orderComment',
  content: 'content',
  postId: 'postId',
  authorId: 'authorId'
} as const

export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


export const FileScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  extension: 'extension',
  encoding: 'encoding',
  storageType: 'storageType',
  storagePath: 'storagePath',
  storageUrl: 'storageUrl',
  bucketName: 'bucketName',
  storageName: 'storageName',
  binaryData: 'binaryData',
  category: 'category',
  tags: 'tags',
  description: 'description',
  version: 'version',
  checksum: 'checksum',
  isProcessed: 'isProcessed',
  processingStatus: 'processingStatus',
  virusScanStatus: 'virusScanStatus',
  ocrText: 'ocrText',
  isPublicDownload: 'isPublicDownload',
  downloadCount: 'downloadCount',
  lastAccessedAt: 'lastAccessedAt',
  expiresAt: 'expiresAt',
  isArchived: 'isArchived',
  name: 'name',
  type: 'type',
  data: 'data',
  size: 'size',
  ownerId: 'ownerId',
  uploadedById: 'uploadedById',
  associatedId: 'associatedId',
  associationType: 'associationType',
  orgId: 'orgId',
  postId: 'postId',
  storyId: 'storyId',
  profileUserId: 'profileUserId',
  commentId: 'commentId'
} as const

export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


export const UserFollowerScalarFieldEnum = {
  user_id: 'user_id',
  follower_id: 'follower_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type UserFollowerScalarFieldEnum = (typeof UserFollowerScalarFieldEnum)[keyof typeof UserFollowerScalarFieldEnum]


export const PostLikeScalarFieldEnum = {
  user_id: 'user_id',
  post_id: 'post_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
} as const

export type PostLikeScalarFieldEnum = (typeof PostLikeScalarFieldEnum)[keyof typeof PostLikeScalarFieldEnum]


export const StoryScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  caption: 'caption',
  user_id: 'user_id'
} as const

export type StoryScalarFieldEnum = (typeof StoryScalarFieldEnum)[keyof typeof StoryScalarFieldEnum]


export const ImageScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  url: 'url',
  type: 'type',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  width: 'width',
  height: 'height',
  storageType: 'storageType',
  storagePath: 'storagePath',
  storageUrl: 'storageUrl',
  bucketName: 'bucketName',
  isProcessed: 'isProcessed',
  thumbnailUrl: 'thumbnailUrl',
  variants: 'variants',
  tags: 'tags',
  altText: 'altText',
  description: 'description',
  uploadedById: 'uploadedById',
  associatedId: 'associatedId',
  associationType: 'associationType',
  sequence: 'sequence',
  orgId: 'orgId',
  postId: 'postId',
  profileUserId: 'profileUserId',
  storyId: 'storyId'
} as const

export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


export const ConfigParamScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  name: 'name',
  value: 'value',
  utility: 'utility'
} as const

export type ConfigParamScalarFieldEnum = (typeof ConfigParamScalarFieldEnum)[keyof typeof ConfigParamScalarFieldEnum]


export const AppEmailDomainScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  domain: 'domain',
  allowed: 'allowed'
} as const

export type AppEmailDomainScalarFieldEnum = (typeof AppEmailDomainScalarFieldEnum)[keyof typeof AppEmailDomainScalarFieldEnum]


export const RefreshTokenScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  userId: 'userId',
  tokenId: 'tokenId'
} as const

export type RefreshTokenScalarFieldEnum = (typeof RefreshTokenScalarFieldEnum)[keyof typeof RefreshTokenScalarFieldEnum]


export const ApiKeyScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  key: 'key',
  uuid: 'uuid',
  userId: 'userId'
} as const

export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


export const ScopeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  scope: 'scope'
} as const

export type ScopeScalarFieldEnum = (typeof ScopeScalarFieldEnum)[keyof typeof ScopeScalarFieldEnum]


export const TokenScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  tokenId: 'tokenId',
  type: 'type',
  emailToken: 'emailToken',
  valid: 'valid',
  expiration: 'expiration',
  userId: 'userId'
} as const

export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


export const AccountValidationScalarFieldEnum = {
  id: 'id',
  numSeq: 'numSeq',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  isValidated: 'isValidated',
  emailToken: 'emailToken',
  timeStamp: 'timeStamp'
} as const

export type AccountValidationScalarFieldEnum = (typeof AccountValidationScalarFieldEnum)[keyof typeof AccountValidationScalarFieldEnum]


export const ChangesTrackingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  isPublic: 'isPublic',
  isDeleted: 'isDeleted',
  isDeletedDT: 'isDeletedDT',
  doneAt: 'doneAt',
  modifiedById: 'modifiedById',
  modelName: 'modelName',
  recordId: 'recordId',
  operation: 'operation',
  newData: 'newData',
  oldData: 'oldData'
} as const

export type ChangesTrackingScalarFieldEnum = (typeof ChangesTrackingScalarFieldEnum)[keyof typeof ChangesTrackingScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Title'
 */
export type EnumTitleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Title'>
    


/**
 * Reference to a field of type 'Title[]'
 */
export type ListEnumTitleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Title[]'>
    


/**
 * Reference to a field of type 'Gender'
 */
export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


/**
 * Reference to a field of type 'Gender[]'
 */
export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


/**
 * Reference to a field of type 'Language'
 */
export type EnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language'>
    


/**
 * Reference to a field of type 'Language[]'
 */
export type ListEnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language[]'>
    


/**
 * Reference to a field of type 'Position'
 */
export type EnumPositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Position'>
    


/**
 * Reference to a field of type 'Position[]'
 */
export type ListEnumPositionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Position[]'>
    


/**
 * Reference to a field of type 'Role[]'
 */
export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


/**
 * Reference to a field of type 'Role'
 */
export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


/**
 * Reference to a field of type 'PermissionClaim[]'
 */
export type ListEnumPermissionClaimFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PermissionClaim[]'>
    


/**
 * Reference to a field of type 'PermissionClaim'
 */
export type EnumPermissionClaimFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PermissionClaim'>
    


/**
 * Reference to a field of type 'PhoneType'
 */
export type EnumPhoneTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhoneType'>
    


/**
 * Reference to a field of type 'PhoneType[]'
 */
export type ListEnumPhoneTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhoneType[]'>
    


/**
 * Reference to a field of type 'AddressType'
 */
export type EnumAddressTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AddressType'>
    


/**
 * Reference to a field of type 'AddressType[]'
 */
export type ListEnumAddressTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AddressType[]'>
    


/**
 * Reference to a field of type 'TodoState'
 */
export type EnumTodoStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TodoState'>
    


/**
 * Reference to a field of type 'TodoState[]'
 */
export type ListEnumTodoStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TodoState[]'>
    


/**
 * Reference to a field of type 'TaskState'
 */
export type EnumTaskStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskState'>
    


/**
 * Reference to a field of type 'TaskState[]'
 */
export type ListEnumTaskStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskState[]'>
    


/**
 * Reference to a field of type 'Bytes'
 */
export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


/**
 * Reference to a field of type 'Bytes[]'
 */
export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


/**
 * Reference to a field of type 'TokenType'
 */
export type EnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType'>
    


/**
 * Reference to a field of type 'TokenType[]'
 */
export type ListEnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  organization?: Prisma.OrganizationOmit
  orgEmail?: Prisma.OrgEmailOmit
  orgDomain?: Prisma.OrgDomainOmit
  orgEmailUseTo?: Prisma.OrgEmailUseToOmit
  user?: Prisma.UserOmit
  phone?: Prisma.PhoneOmit
  address?: Prisma.AddressOmit
  userSecret?: Prisma.UserSecretOmit
  profile?: Prisma.ProfileOmit
  group?: Prisma.GroupOmit
  todo?: Prisma.TodoOmit
  userTodoLink?: Prisma.UserTodoLinkOmit
  task?: Prisma.TaskOmit
  userTaskLink?: Prisma.UserTaskLinkOmit
  post?: Prisma.PostOmit
  category?: Prisma.CategoryOmit
  comment?: Prisma.CommentOmit
  file?: Prisma.FileOmit
  userFollower?: Prisma.UserFollowerOmit
  postLike?: Prisma.PostLikeOmit
  story?: Prisma.StoryOmit
  image?: Prisma.ImageOmit
  configParam?: Prisma.ConfigParamOmit
  appEmailDomain?: Prisma.AppEmailDomainOmit
  refreshToken?: Prisma.RefreshTokenOmit
  apiKey?: Prisma.ApiKeyOmit
  scope?: Prisma.ScopeOmit
  token?: Prisma.TokenOmit
  accountValidation?: Prisma.AccountValidationOmit
  changesTracking?: Prisma.ChangesTrackingOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

